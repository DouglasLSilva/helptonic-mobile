define(['dart_sdk', 'packages/flutter/src/painting/strut_style.dart', 'packages/google_fonts/src/google_fonts_variant.dart', 'packages/google_fonts/src/google_fonts_family_with_variant.dart', 'packages/google_fonts/src/google_fonts_descriptor.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/google_fonts/src/file_io.dart', 'packages/flutter/src/services/font_loader.dart', 'packages/crypto/src/sha256.dart', 'packages/http/src/browser_client.dart', 'packages/google_fonts/src/asset_manifest.dart', 'packages/flutter/src/material/typography.dart', 'packages/flutter/src/material/icon_button.dart'], (function load__packages__google_fonts__src__google_fonts_base_dart(dart_sdk, packages__flutter__src__painting__strut_style$46dart, packages__google_fonts__src__google_fonts_variant$46dart, packages__google_fonts__src__google_fonts_family_with_variant$46dart, packages__google_fonts__src__google_fonts_descriptor$46dart, packages__flutter__src__services__system_channels$46dart, packages__google_fonts__src__file_io$46dart, packages__flutter__src__services__font_loader$46dart, packages__crypto__src__sha256$46dart, packages__http__src__browser_client$46dart, packages__google_fonts__src__asset_manifest$46dart, packages__flutter__src__material__typography$46dart, packages__flutter__src__material__icon_button$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const google_fonts_variant = packages__google_fonts__src__google_fonts_variant$46dart.src__google_fonts_variant;
  const google_fonts_family_with_variant = packages__google_fonts__src__google_fonts_family_with_variant$46dart.src__google_fonts_family_with_variant;
  const google_fonts_descriptor = packages__google_fonts__src__google_fonts_descriptor$46dart.src__google_fonts_descriptor;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const file_io = packages__google_fonts__src__file_io$46dart.src__file_io;
  const font_loader = packages__flutter__src__services__font_loader$46dart.src__services__font_loader;
  const sha256 = packages__crypto__src__sha256$46dart.src__sha256;
  const client = packages__http__src__browser_client$46dart.src__client;
  const asset_manifest = packages__google_fonts__src__asset_manifest$46dart.src__asset_manifest;
  const text_theme = packages__flutter__src__material__typography$46dart.src__material__text_theme;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  var google_fonts_base = Object.create(dart.library);
  var google_fonts = Object.create(dart.library);
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $buffer = dartx.buffer;
  var $abs = dartx.abs;
  var $values = dartx.values;
  var $endsWith = dartx.endsWith;
  var $where = dartx.where;
  var $substring = dartx.substring;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    ByteDataL: () => (T.ByteDataL = dart.constFn(dart.legacy(typed_data.ByteData)))(),
    LinkedHashSetOfStringL: () => (T.LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(T.StringL())))(),
    TextStyleL: () => (T.TextStyleL = dart.constFn(dart.legacy(text_style.TextStyle)))(),
    PaintL: () => (T.PaintL = dart.constFn(dart.legacy(ui.Paint)))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    TextDecorationL: () => (T.TextDecorationL = dart.constFn(dart.legacy(ui.TextDecoration)))(),
    TextDecorationStyleL: () => (T.TextDecorationStyleL = dart.constFn(dart.legacy(ui.TextDecorationStyle)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    FontFeatureL: () => (T.FontFeatureL = dart.constFn(dart.legacy(ui.FontFeature)))(),
    ListOfFontFeatureL: () => (T.ListOfFontFeatureL = dart.constFn(core.List$(T.FontFeatureL())))(),
    ListLOfFontFeatureL: () => (T.ListLOfFontFeatureL = dart.constFn(dart.legacy(T.ListOfFontFeatureL())))(),
    FontStyleL: () => (T.FontStyleL = dart.constFn(dart.legacy(ui.FontStyle)))(),
    FontWeightL: () => (T.FontWeightL = dart.constFn(dart.legacy(ui.FontWeight)))(),
    LocaleL: () => (T.LocaleL = dart.constFn(dart.legacy(ui.Locale)))(),
    ShadowL: () => (T.ShadowL = dart.constFn(dart.legacy(ui.Shadow)))(),
    ListOfShadowL: () => (T.ListOfShadowL = dart.constFn(core.List$(T.ShadowL())))(),
    ListLOfShadowL: () => (T.ListLOfShadowL = dart.constFn(dart.legacy(T.ListOfShadowL())))(),
    TextBaselineL: () => (T.TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))(),
    __ToTextStyleL: () => (T.__ToTextStyleL = dart.constFn(dart.fnType(T.TextStyleL(), [], {background: T.PaintL(), backgroundColor: T.ColorL(), color: T.ColorL(), decoration: T.TextDecorationL(), decorationColor: T.ColorL(), decorationStyle: T.TextDecorationStyleL(), decorationThickness: T.doubleL(), fontFeatures: T.ListLOfFontFeatureL(), fontSize: T.doubleL(), fontStyle: T.FontStyleL(), fontWeight: T.FontWeightL(), foreground: T.PaintL(), height: T.doubleL(), letterSpacing: T.doubleL(), locale: T.LocaleL(), shadows: T.ListLOfShadowL(), textBaseline: T.TextBaselineL(), textStyle: T.TextStyleL(), wordSpacing: T.doubleL()}, {})))(),
    __ToLTextStyleL: () => (T.__ToLTextStyleL = dart.constFn(dart.legacy(T.__ToTextStyleL())))(),
    TextThemeL: () => (T.TextThemeL = dart.constFn(dart.legacy(text_theme.TextTheme)))(),
    TextThemeLToTextThemeL: () => (T.TextThemeLToTextThemeL = dart.constFn(dart.fnType(T.TextThemeL(), [], [T.TextThemeL()])))(),
    TextThemeLToLTextThemeL: () => (T.TextThemeLToLTextThemeL = dart.constFn(dart.legacy(T.TextThemeLToTextThemeL())))(),
    GoogleFontsVariantL: () => (T.GoogleFontsVariantL = dart.constFn(dart.legacy(google_fonts_variant.GoogleFontsVariant)))(),
    GoogleFontsFileL: () => (T.GoogleFontsFileL = dart.constFn(dart.legacy(google_fonts_descriptor.GoogleFontsFile)))(),
    LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL: () => (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL = dart.constFn(_js_helper.LinkedMap$(T.GoogleFontsVariantL(), T.GoogleFontsFileL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.fn(google_fonts.GoogleFonts.aBeeZee, T.__ToTextStyleL());
    },
    get C2() {
      return C[2] = dart.fn(google_fonts.GoogleFonts.abel, T.__ToTextStyleL());
    },
    get C3() {
      return C[3] = dart.fn(google_fonts.GoogleFonts.abhayaLibre, T.__ToTextStyleL());
    },
    get C4() {
      return C[4] = dart.fn(google_fonts.GoogleFonts.abrilFatface, T.__ToTextStyleL());
    },
    get C5() {
      return C[5] = dart.fn(google_fonts.GoogleFonts.aclonica, T.__ToTextStyleL());
    },
    get C6() {
      return C[6] = dart.fn(google_fonts.GoogleFonts.acme, T.__ToTextStyleL());
    },
    get C7() {
      return C[7] = dart.fn(google_fonts.GoogleFonts.actor, T.__ToTextStyleL());
    },
    get C8() {
      return C[8] = dart.fn(google_fonts.GoogleFonts.adamina, T.__ToTextStyleL());
    },
    get C9() {
      return C[9] = dart.fn(google_fonts.GoogleFonts.adventPro, T.__ToTextStyleL());
    },
    get C10() {
      return C[10] = dart.fn(google_fonts.GoogleFonts.aguafinaScript, T.__ToTextStyleL());
    },
    get C11() {
      return C[11] = dart.fn(google_fonts.GoogleFonts.akronim, T.__ToTextStyleL());
    },
    get C12() {
      return C[12] = dart.fn(google_fonts.GoogleFonts.aladin, T.__ToTextStyleL());
    },
    get C13() {
      return C[13] = dart.fn(google_fonts.GoogleFonts.alata, T.__ToTextStyleL());
    },
    get C14() {
      return C[14] = dart.fn(google_fonts.GoogleFonts.alatsi, T.__ToTextStyleL());
    },
    get C15() {
      return C[15] = dart.fn(google_fonts.GoogleFonts.aldrich, T.__ToTextStyleL());
    },
    get C16() {
      return C[16] = dart.fn(google_fonts.GoogleFonts.alef, T.__ToTextStyleL());
    },
    get C17() {
      return C[17] = dart.fn(google_fonts.GoogleFonts.alegreya, T.__ToTextStyleL());
    },
    get C18() {
      return C[18] = dart.fn(google_fonts.GoogleFonts.alegreyaSc, T.__ToTextStyleL());
    },
    get C19() {
      return C[19] = dart.fn(google_fonts.GoogleFonts.alegreyaSans, T.__ToTextStyleL());
    },
    get C20() {
      return C[20] = dart.fn(google_fonts.GoogleFonts.alegreyaSansSc, T.__ToTextStyleL());
    },
    get C21() {
      return C[21] = dart.fn(google_fonts.GoogleFonts.aleo, T.__ToTextStyleL());
    },
    get C22() {
      return C[22] = dart.fn(google_fonts.GoogleFonts.alexBrush, T.__ToTextStyleL());
    },
    get C23() {
      return C[23] = dart.fn(google_fonts.GoogleFonts.alfaSlabOne, T.__ToTextStyleL());
    },
    get C24() {
      return C[24] = dart.fn(google_fonts.GoogleFonts.alice, T.__ToTextStyleL());
    },
    get C25() {
      return C[25] = dart.fn(google_fonts.GoogleFonts.alike, T.__ToTextStyleL());
    },
    get C26() {
      return C[26] = dart.fn(google_fonts.GoogleFonts.alikeAngular, T.__ToTextStyleL());
    },
    get C27() {
      return C[27] = dart.fn(google_fonts.GoogleFonts.allan, T.__ToTextStyleL());
    },
    get C28() {
      return C[28] = dart.fn(google_fonts.GoogleFonts.allerta, T.__ToTextStyleL());
    },
    get C29() {
      return C[29] = dart.fn(google_fonts.GoogleFonts.allertaStencil, T.__ToTextStyleL());
    },
    get C30() {
      return C[30] = dart.fn(google_fonts.GoogleFonts.allura, T.__ToTextStyleL());
    },
    get C31() {
      return C[31] = dart.fn(google_fonts.GoogleFonts.almarai, T.__ToTextStyleL());
    },
    get C32() {
      return C[32] = dart.fn(google_fonts.GoogleFonts.almendra, T.__ToTextStyleL());
    },
    get C33() {
      return C[33] = dart.fn(google_fonts.GoogleFonts.almendraDisplay, T.__ToTextStyleL());
    },
    get C34() {
      return C[34] = dart.fn(google_fonts.GoogleFonts.almendraSc, T.__ToTextStyleL());
    },
    get C35() {
      return C[35] = dart.fn(google_fonts.GoogleFonts.amarante, T.__ToTextStyleL());
    },
    get C36() {
      return C[36] = dart.fn(google_fonts.GoogleFonts.amaranth, T.__ToTextStyleL());
    },
    get C37() {
      return C[37] = dart.fn(google_fonts.GoogleFonts.amaticSc, T.__ToTextStyleL());
    },
    get C38() {
      return C[38] = dart.fn(google_fonts.GoogleFonts.amaticaSc, T.__ToTextStyleL());
    },
    get C39() {
      return C[39] = dart.fn(google_fonts.GoogleFonts.amethysta, T.__ToTextStyleL());
    },
    get C40() {
      return C[40] = dart.fn(google_fonts.GoogleFonts.amiko, T.__ToTextStyleL());
    },
    get C41() {
      return C[41] = dart.fn(google_fonts.GoogleFonts.amiri, T.__ToTextStyleL());
    },
    get C42() {
      return C[42] = dart.fn(google_fonts.GoogleFonts.amita, T.__ToTextStyleL());
    },
    get C43() {
      return C[43] = dart.fn(google_fonts.GoogleFonts.anaheim, T.__ToTextStyleL());
    },
    get C44() {
      return C[44] = dart.fn(google_fonts.GoogleFonts.andada, T.__ToTextStyleL());
    },
    get C45() {
      return C[45] = dart.fn(google_fonts.GoogleFonts.andika, T.__ToTextStyleL());
    },
    get C46() {
      return C[46] = dart.fn(google_fonts.GoogleFonts.annieUseYourTelescope, T.__ToTextStyleL());
    },
    get C47() {
      return C[47] = dart.fn(google_fonts.GoogleFonts.anonymousPro, T.__ToTextStyleL());
    },
    get C48() {
      return C[48] = dart.fn(google_fonts.GoogleFonts.antic, T.__ToTextStyleL());
    },
    get C49() {
      return C[49] = dart.fn(google_fonts.GoogleFonts.anticDidone, T.__ToTextStyleL());
    },
    get C50() {
      return C[50] = dart.fn(google_fonts.GoogleFonts.anticSlab, T.__ToTextStyleL());
    },
    get C51() {
      return C[51] = dart.fn(google_fonts.GoogleFonts.anton, T.__ToTextStyleL());
    },
    get C52() {
      return C[52] = dart.fn(google_fonts.GoogleFonts.arapey, T.__ToTextStyleL());
    },
    get C53() {
      return C[53] = dart.fn(google_fonts.GoogleFonts.arbutus, T.__ToTextStyleL());
    },
    get C54() {
      return C[54] = dart.fn(google_fonts.GoogleFonts.arbutusSlab, T.__ToTextStyleL());
    },
    get C55() {
      return C[55] = dart.fn(google_fonts.GoogleFonts.architectsDaughter, T.__ToTextStyleL());
    },
    get C56() {
      return C[56] = dart.fn(google_fonts.GoogleFonts.archivo, T.__ToTextStyleL());
    },
    get C57() {
      return C[57] = dart.fn(google_fonts.GoogleFonts.archivoBlack, T.__ToTextStyleL());
    },
    get C58() {
      return C[58] = dart.fn(google_fonts.GoogleFonts.archivoNarrow, T.__ToTextStyleL());
    },
    get C59() {
      return C[59] = dart.fn(google_fonts.GoogleFonts.arefRuqaa, T.__ToTextStyleL());
    },
    get C60() {
      return C[60] = dart.fn(google_fonts.GoogleFonts.arimaMadurai, T.__ToTextStyleL());
    },
    get C61() {
      return C[61] = dart.fn(google_fonts.GoogleFonts.arimo, T.__ToTextStyleL());
    },
    get C62() {
      return C[62] = dart.fn(google_fonts.GoogleFonts.arizonia, T.__ToTextStyleL());
    },
    get C63() {
      return C[63] = dart.fn(google_fonts.GoogleFonts.armata, T.__ToTextStyleL());
    },
    get C64() {
      return C[64] = dart.fn(google_fonts.GoogleFonts.arsenal, T.__ToTextStyleL());
    },
    get C65() {
      return C[65] = dart.fn(google_fonts.GoogleFonts.artifika, T.__ToTextStyleL());
    },
    get C66() {
      return C[66] = dart.fn(google_fonts.GoogleFonts.arvo, T.__ToTextStyleL());
    },
    get C67() {
      return C[67] = dart.fn(google_fonts.GoogleFonts.arya, T.__ToTextStyleL());
    },
    get C68() {
      return C[68] = dart.fn(google_fonts.GoogleFonts.asap, T.__ToTextStyleL());
    },
    get C69() {
      return C[69] = dart.fn(google_fonts.GoogleFonts.asar, T.__ToTextStyleL());
    },
    get C70() {
      return C[70] = dart.fn(google_fonts.GoogleFonts.asset, T.__ToTextStyleL());
    },
    get C71() {
      return C[71] = dart.fn(google_fonts.GoogleFonts.assistant, T.__ToTextStyleL());
    },
    get C72() {
      return C[72] = dart.fn(google_fonts.GoogleFonts.astloch, T.__ToTextStyleL());
    },
    get C73() {
      return C[73] = dart.fn(google_fonts.GoogleFonts.asul, T.__ToTextStyleL());
    },
    get C74() {
      return C[74] = dart.fn(google_fonts.GoogleFonts.athiti, T.__ToTextStyleL());
    },
    get C75() {
      return C[75] = dart.fn(google_fonts.GoogleFonts.atma, T.__ToTextStyleL());
    },
    get C76() {
      return C[76] = dart.fn(google_fonts.GoogleFonts.atomicAge, T.__ToTextStyleL());
    },
    get C77() {
      return C[77] = dart.fn(google_fonts.GoogleFonts.aubrey, T.__ToTextStyleL());
    },
    get C78() {
      return C[78] = dart.fn(google_fonts.GoogleFonts.audiowide, T.__ToTextStyleL());
    },
    get C79() {
      return C[79] = dart.fn(google_fonts.GoogleFonts.autourOne, T.__ToTextStyleL());
    },
    get C80() {
      return C[80] = dart.fn(google_fonts.GoogleFonts.average, T.__ToTextStyleL());
    },
    get C81() {
      return C[81] = dart.fn(google_fonts.GoogleFonts.averageSans, T.__ToTextStyleL());
    },
    get C82() {
      return C[82] = dart.fn(google_fonts.GoogleFonts.averiaGruesaLibre, T.__ToTextStyleL());
    },
    get C83() {
      return C[83] = dart.fn(google_fonts.GoogleFonts.averiaLibre, T.__ToTextStyleL());
    },
    get C84() {
      return C[84] = dart.fn(google_fonts.GoogleFonts.averiaSansLibre, T.__ToTextStyleL());
    },
    get C85() {
      return C[85] = dart.fn(google_fonts.GoogleFonts.averiaSerifLibre, T.__ToTextStyleL());
    },
    get C86() {
      return C[86] = dart.fn(google_fonts.GoogleFonts.b612, T.__ToTextStyleL());
    },
    get C87() {
      return C[87] = dart.fn(google_fonts.GoogleFonts.b612Mono, T.__ToTextStyleL());
    },
    get C88() {
      return C[88] = dart.fn(google_fonts.GoogleFonts.badScript, T.__ToTextStyleL());
    },
    get C89() {
      return C[89] = dart.fn(google_fonts.GoogleFonts.bahiana, T.__ToTextStyleL());
    },
    get C90() {
      return C[90] = dart.fn(google_fonts.GoogleFonts.bahianita, T.__ToTextStyleL());
    },
    get C91() {
      return C[91] = dart.fn(google_fonts.GoogleFonts.baiJamjuree, T.__ToTextStyleL());
    },
    get C92() {
      return C[92] = dart.fn(google_fonts.GoogleFonts.baloo, T.__ToTextStyleL());
    },
    get C93() {
      return C[93] = dart.fn(google_fonts.GoogleFonts.balooBhai, T.__ToTextStyleL());
    },
    get C94() {
      return C[94] = dart.fn(google_fonts.GoogleFonts.balooBhaijaan, T.__ToTextStyleL());
    },
    get C95() {
      return C[95] = dart.fn(google_fonts.GoogleFonts.balooBhaina, T.__ToTextStyleL());
    },
    get C96() {
      return C[96] = dart.fn(google_fonts.GoogleFonts.balooChettan, T.__ToTextStyleL());
    },
    get C97() {
      return C[97] = dart.fn(google_fonts.GoogleFonts.balooDa, T.__ToTextStyleL());
    },
    get C98() {
      return C[98] = dart.fn(google_fonts.GoogleFonts.balooPaaji, T.__ToTextStyleL());
    },
    get C99() {
      return C[99] = dart.fn(google_fonts.GoogleFonts.balooTamma, T.__ToTextStyleL());
    },
    get C100() {
      return C[100] = dart.fn(google_fonts.GoogleFonts.balooTammudu, T.__ToTextStyleL());
    },
    get C101() {
      return C[101] = dart.fn(google_fonts.GoogleFonts.balooThambi, T.__ToTextStyleL());
    },
    get C102() {
      return C[102] = dart.fn(google_fonts.GoogleFonts.balthazar, T.__ToTextStyleL());
    },
    get C103() {
      return C[103] = dart.fn(google_fonts.GoogleFonts.bangers, T.__ToTextStyleL());
    },
    get C104() {
      return C[104] = dart.fn(google_fonts.GoogleFonts.barlow, T.__ToTextStyleL());
    },
    get C105() {
      return C[105] = dart.fn(google_fonts.GoogleFonts.barlowCondensed, T.__ToTextStyleL());
    },
    get C106() {
      return C[106] = dart.fn(google_fonts.GoogleFonts.barlowSemiCondensed, T.__ToTextStyleL());
    },
    get C107() {
      return C[107] = dart.fn(google_fonts.GoogleFonts.barriecito, T.__ToTextStyleL());
    },
    get C108() {
      return C[108] = dart.fn(google_fonts.GoogleFonts.barrio, T.__ToTextStyleL());
    },
    get C109() {
      return C[109] = dart.fn(google_fonts.GoogleFonts.basic, T.__ToTextStyleL());
    },
    get C110() {
      return C[110] = dart.fn(google_fonts.GoogleFonts.baskervville, T.__ToTextStyleL());
    },
    get C111() {
      return C[111] = dart.fn(google_fonts.GoogleFonts.baumans, T.__ToTextStyleL());
    },
    get C112() {
      return C[112] = dart.fn(google_fonts.GoogleFonts.beVietnam, T.__ToTextStyleL());
    },
    get C113() {
      return C[113] = dart.fn(google_fonts.GoogleFonts.bebasNeue, T.__ToTextStyleL());
    },
    get C114() {
      return C[114] = dart.fn(google_fonts.GoogleFonts.belgrano, T.__ToTextStyleL());
    },
    get C115() {
      return C[115] = dart.fn(google_fonts.GoogleFonts.bellefair, T.__ToTextStyleL());
    },
    get C116() {
      return C[116] = dart.fn(google_fonts.GoogleFonts.belleza, T.__ToTextStyleL());
    },
    get C117() {
      return C[117] = dart.fn(google_fonts.GoogleFonts.bellota, T.__ToTextStyleL());
    },
    get C118() {
      return C[118] = dart.fn(google_fonts.GoogleFonts.bellotaText, T.__ToTextStyleL());
    },
    get C119() {
      return C[119] = dart.fn(google_fonts.GoogleFonts.benchNine, T.__ToTextStyleL());
    },
    get C120() {
      return C[120] = dart.fn(google_fonts.GoogleFonts.bentham, T.__ToTextStyleL());
    },
    get C121() {
      return C[121] = dart.fn(google_fonts.GoogleFonts.berkshireSwash, T.__ToTextStyleL());
    },
    get C122() {
      return C[122] = dart.fn(google_fonts.GoogleFonts.bethEllen, T.__ToTextStyleL());
    },
    get C123() {
      return C[123] = dart.fn(google_fonts.GoogleFonts.bevan, T.__ToTextStyleL());
    },
    get C124() {
      return C[124] = dart.fn(google_fonts.GoogleFonts.bigShouldersDisplay, T.__ToTextStyleL());
    },
    get C125() {
      return C[125] = dart.fn(google_fonts.GoogleFonts.bigShouldersText, T.__ToTextStyleL());
    },
    get C126() {
      return C[126] = dart.fn(google_fonts.GoogleFonts.bigelowRules, T.__ToTextStyleL());
    },
    get C127() {
      return C[127] = dart.fn(google_fonts.GoogleFonts.bigshotOne, T.__ToTextStyleL());
    },
    get C128() {
      return C[128] = dart.fn(google_fonts.GoogleFonts.bilbo, T.__ToTextStyleL());
    },
    get C129() {
      return C[129] = dart.fn(google_fonts.GoogleFonts.bilboSwashCaps, T.__ToTextStyleL());
    },
    get C130() {
      return C[130] = dart.fn(google_fonts.GoogleFonts.bioRhyme, T.__ToTextStyleL());
    },
    get C131() {
      return C[131] = dart.fn(google_fonts.GoogleFonts.bioRhymeExpanded, T.__ToTextStyleL());
    },
    get C132() {
      return C[132] = dart.fn(google_fonts.GoogleFonts.biryani, T.__ToTextStyleL());
    },
    get C133() {
      return C[133] = dart.fn(google_fonts.GoogleFonts.bitter, T.__ToTextStyleL());
    },
    get C134() {
      return C[134] = dart.fn(google_fonts.GoogleFonts.blackAndWhitePicture, T.__ToTextStyleL());
    },
    get C135() {
      return C[135] = dart.fn(google_fonts.GoogleFonts.blackHanSans, T.__ToTextStyleL());
    },
    get C136() {
      return C[136] = dart.fn(google_fonts.GoogleFonts.blackOpsOne, T.__ToTextStyleL());
    },
    get C137() {
      return C[137] = dart.fn(google_fonts.GoogleFonts.blinker, T.__ToTextStyleL());
    },
    get C138() {
      return C[138] = dart.fn(google_fonts.GoogleFonts.bonbon, T.__ToTextStyleL());
    },
    get C139() {
      return C[139] = dart.fn(google_fonts.GoogleFonts.boogaloo, T.__ToTextStyleL());
    },
    get C140() {
      return C[140] = dart.fn(google_fonts.GoogleFonts.bowlbyOne, T.__ToTextStyleL());
    },
    get C141() {
      return C[141] = dart.fn(google_fonts.GoogleFonts.bowlbyOneSc, T.__ToTextStyleL());
    },
    get C142() {
      return C[142] = dart.fn(google_fonts.GoogleFonts.brawler, T.__ToTextStyleL());
    },
    get C143() {
      return C[143] = dart.fn(google_fonts.GoogleFonts.breeSerif, T.__ToTextStyleL());
    },
    get C144() {
      return C[144] = dart.fn(google_fonts.GoogleFonts.bubblegumSans, T.__ToTextStyleL());
    },
    get C145() {
      return C[145] = dart.fn(google_fonts.GoogleFonts.bubblerOne, T.__ToTextStyleL());
    },
    get C146() {
      return C[146] = dart.fn(google_fonts.GoogleFonts.buda, T.__ToTextStyleL());
    },
    get C147() {
      return C[147] = dart.fn(google_fonts.GoogleFonts.buenard, T.__ToTextStyleL());
    },
    get C148() {
      return C[148] = dart.fn(google_fonts.GoogleFonts.bungee, T.__ToTextStyleL());
    },
    get C149() {
      return C[149] = dart.fn(google_fonts.GoogleFonts.bungeeHairline, T.__ToTextStyleL());
    },
    get C150() {
      return C[150] = dart.fn(google_fonts.GoogleFonts.bungeeInline, T.__ToTextStyleL());
    },
    get C151() {
      return C[151] = dart.fn(google_fonts.GoogleFonts.bungeeOutline, T.__ToTextStyleL());
    },
    get C152() {
      return C[152] = dart.fn(google_fonts.GoogleFonts.bungeeShade, T.__ToTextStyleL());
    },
    get C153() {
      return C[153] = dart.fn(google_fonts.GoogleFonts.butcherman, T.__ToTextStyleL());
    },
    get C154() {
      return C[154] = dart.fn(google_fonts.GoogleFonts.butterflyKids, T.__ToTextStyleL());
    },
    get C155() {
      return C[155] = dart.fn(google_fonts.GoogleFonts.cabin, T.__ToTextStyleL());
    },
    get C156() {
      return C[156] = dart.fn(google_fonts.GoogleFonts.cabinCondensed, T.__ToTextStyleL());
    },
    get C157() {
      return C[157] = dart.fn(google_fonts.GoogleFonts.cabinSketch, T.__ToTextStyleL());
    },
    get C158() {
      return C[158] = dart.fn(google_fonts.GoogleFonts.caesarDressing, T.__ToTextStyleL());
    },
    get C159() {
      return C[159] = dart.fn(google_fonts.GoogleFonts.cagliostro, T.__ToTextStyleL());
    },
    get C160() {
      return C[160] = dart.fn(google_fonts.GoogleFonts.cairo, T.__ToTextStyleL());
    },
    get C161() {
      return C[161] = dart.fn(google_fonts.GoogleFonts.caladea, T.__ToTextStyleL());
    },
    get C162() {
      return C[162] = dart.fn(google_fonts.GoogleFonts.calistoga, T.__ToTextStyleL());
    },
    get C163() {
      return C[163] = dart.fn(google_fonts.GoogleFonts.calligraffitti, T.__ToTextStyleL());
    },
    get C164() {
      return C[164] = dart.fn(google_fonts.GoogleFonts.cambay, T.__ToTextStyleL());
    },
    get C165() {
      return C[165] = dart.fn(google_fonts.GoogleFonts.cambo, T.__ToTextStyleL());
    },
    get C166() {
      return C[166] = dart.fn(google_fonts.GoogleFonts.candal, T.__ToTextStyleL());
    },
    get C167() {
      return C[167] = dart.fn(google_fonts.GoogleFonts.cantarell, T.__ToTextStyleL());
    },
    get C168() {
      return C[168] = dart.fn(google_fonts.GoogleFonts.cantataOne, T.__ToTextStyleL());
    },
    get C169() {
      return C[169] = dart.fn(google_fonts.GoogleFonts.cantoraOne, T.__ToTextStyleL());
    },
    get C170() {
      return C[170] = dart.fn(google_fonts.GoogleFonts.capriola, T.__ToTextStyleL());
    },
    get C171() {
      return C[171] = dart.fn(google_fonts.GoogleFonts.cardo, T.__ToTextStyleL());
    },
    get C172() {
      return C[172] = dart.fn(google_fonts.GoogleFonts.carme, T.__ToTextStyleL());
    },
    get C173() {
      return C[173] = dart.fn(google_fonts.GoogleFonts.carroisGothic, T.__ToTextStyleL());
    },
    get C174() {
      return C[174] = dart.fn(google_fonts.GoogleFonts.carroisGothicSc, T.__ToTextStyleL());
    },
    get C175() {
      return C[175] = dart.fn(google_fonts.GoogleFonts.carterOne, T.__ToTextStyleL());
    },
    get C176() {
      return C[176] = dart.fn(google_fonts.GoogleFonts.catamaran, T.__ToTextStyleL());
    },
    get C177() {
      return C[177] = dart.fn(google_fonts.GoogleFonts.caudex, T.__ToTextStyleL());
    },
    get C178() {
      return C[178] = dart.fn(google_fonts.GoogleFonts.caveat, T.__ToTextStyleL());
    },
    get C179() {
      return C[179] = dart.fn(google_fonts.GoogleFonts.caveatBrush, T.__ToTextStyleL());
    },
    get C180() {
      return C[180] = dart.fn(google_fonts.GoogleFonts.cedarvilleCursive, T.__ToTextStyleL());
    },
    get C181() {
      return C[181] = dart.fn(google_fonts.GoogleFonts.cevicheOne, T.__ToTextStyleL());
    },
    get C182() {
      return C[182] = dart.fn(google_fonts.GoogleFonts.chakraPetch, T.__ToTextStyleL());
    },
    get C183() {
      return C[183] = dart.fn(google_fonts.GoogleFonts.changa, T.__ToTextStyleL());
    },
    get C184() {
      return C[184] = dart.fn(google_fonts.GoogleFonts.changaOne, T.__ToTextStyleL());
    },
    get C185() {
      return C[185] = dart.fn(google_fonts.GoogleFonts.chango, T.__ToTextStyleL());
    },
    get C186() {
      return C[186] = dart.fn(google_fonts.GoogleFonts.charm, T.__ToTextStyleL());
    },
    get C187() {
      return C[187] = dart.fn(google_fonts.GoogleFonts.charmonman, T.__ToTextStyleL());
    },
    get C188() {
      return C[188] = dart.fn(google_fonts.GoogleFonts.chathura, T.__ToTextStyleL());
    },
    get C189() {
      return C[189] = dart.fn(google_fonts.GoogleFonts.chauPhilomeneOne, T.__ToTextStyleL());
    },
    get C190() {
      return C[190] = dart.fn(google_fonts.GoogleFonts.chelaOne, T.__ToTextStyleL());
    },
    get C191() {
      return C[191] = dart.fn(google_fonts.GoogleFonts.chelseaMarket, T.__ToTextStyleL());
    },
    get C192() {
      return C[192] = dart.fn(google_fonts.GoogleFonts.cherryCreamSoda, T.__ToTextStyleL());
    },
    get C193() {
      return C[193] = dart.fn(google_fonts.GoogleFonts.cherrySwash, T.__ToTextStyleL());
    },
    get C194() {
      return C[194] = dart.fn(google_fonts.GoogleFonts.chewy, T.__ToTextStyleL());
    },
    get C195() {
      return C[195] = dart.fn(google_fonts.GoogleFonts.chicle, T.__ToTextStyleL());
    },
    get C196() {
      return C[196] = dart.fn(google_fonts.GoogleFonts.chilanka, T.__ToTextStyleL());
    },
    get C197() {
      return C[197] = dart.fn(google_fonts.GoogleFonts.chivo, T.__ToTextStyleL());
    },
    get C198() {
      return C[198] = dart.fn(google_fonts.GoogleFonts.chonburi, T.__ToTextStyleL());
    },
    get C199() {
      return C[199] = dart.fn(google_fonts.GoogleFonts.cinzel, T.__ToTextStyleL());
    },
    get C200() {
      return C[200] = dart.fn(google_fonts.GoogleFonts.cinzelDecorative, T.__ToTextStyleL());
    },
    get C201() {
      return C[201] = dart.fn(google_fonts.GoogleFonts.clickerScript, T.__ToTextStyleL());
    },
    get C202() {
      return C[202] = dart.fn(google_fonts.GoogleFonts.coda, T.__ToTextStyleL());
    },
    get C203() {
      return C[203] = dart.fn(google_fonts.GoogleFonts.codaCaption, T.__ToTextStyleL());
    },
    get C204() {
      return C[204] = dart.fn(google_fonts.GoogleFonts.codystar, T.__ToTextStyleL());
    },
    get C205() {
      return C[205] = dart.fn(google_fonts.GoogleFonts.coiny, T.__ToTextStyleL());
    },
    get C206() {
      return C[206] = dart.fn(google_fonts.GoogleFonts.combo, T.__ToTextStyleL());
    },
    get C207() {
      return C[207] = dart.fn(google_fonts.GoogleFonts.comfortaa, T.__ToTextStyleL());
    },
    get C208() {
      return C[208] = dart.fn(google_fonts.GoogleFonts.comicNeue, T.__ToTextStyleL());
    },
    get C209() {
      return C[209] = dart.fn(google_fonts.GoogleFonts.comingSoon, T.__ToTextStyleL());
    },
    get C210() {
      return C[210] = dart.fn(google_fonts.GoogleFonts.concertOne, T.__ToTextStyleL());
    },
    get C211() {
      return C[211] = dart.fn(google_fonts.GoogleFonts.condiment, T.__ToTextStyleL());
    },
    get C212() {
      return C[212] = dart.fn(google_fonts.GoogleFonts.contrailOne, T.__ToTextStyleL());
    },
    get C213() {
      return C[213] = dart.fn(google_fonts.GoogleFonts.convergence, T.__ToTextStyleL());
    },
    get C214() {
      return C[214] = dart.fn(google_fonts.GoogleFonts.cookie, T.__ToTextStyleL());
    },
    get C215() {
      return C[215] = dart.fn(google_fonts.GoogleFonts.copse, T.__ToTextStyleL());
    },
    get C216() {
      return C[216] = dart.fn(google_fonts.GoogleFonts.corben, T.__ToTextStyleL());
    },
    get C217() {
      return C[217] = dart.fn(google_fonts.GoogleFonts.cormorant, T.__ToTextStyleL());
    },
    get C218() {
      return C[218] = dart.fn(google_fonts.GoogleFonts.cormorantGaramond, T.__ToTextStyleL());
    },
    get C219() {
      return C[219] = dart.fn(google_fonts.GoogleFonts.cormorantInfant, T.__ToTextStyleL());
    },
    get C220() {
      return C[220] = dart.fn(google_fonts.GoogleFonts.cormorantSc, T.__ToTextStyleL());
    },
    get C221() {
      return C[221] = dart.fn(google_fonts.GoogleFonts.cormorantUnicase, T.__ToTextStyleL());
    },
    get C222() {
      return C[222] = dart.fn(google_fonts.GoogleFonts.cormorantUpright, T.__ToTextStyleL());
    },
    get C223() {
      return C[223] = dart.fn(google_fonts.GoogleFonts.courgette, T.__ToTextStyleL());
    },
    get C224() {
      return C[224] = dart.fn(google_fonts.GoogleFonts.courierPrime, T.__ToTextStyleL());
    },
    get C225() {
      return C[225] = dart.fn(google_fonts.GoogleFonts.cousine, T.__ToTextStyleL());
    },
    get C226() {
      return C[226] = dart.fn(google_fonts.GoogleFonts.coustard, T.__ToTextStyleL());
    },
    get C227() {
      return C[227] = dart.fn(google_fonts.GoogleFonts.coveredByYourGrace, T.__ToTextStyleL());
    },
    get C228() {
      return C[228] = dart.fn(google_fonts.GoogleFonts.craftyGirls, T.__ToTextStyleL());
    },
    get C229() {
      return C[229] = dart.fn(google_fonts.GoogleFonts.creepster, T.__ToTextStyleL());
    },
    get C230() {
      return C[230] = dart.fn(google_fonts.GoogleFonts.creteRound, T.__ToTextStyleL());
    },
    get C231() {
      return C[231] = dart.fn(google_fonts.GoogleFonts.crimsonPro, T.__ToTextStyleL());
    },
    get C232() {
      return C[232] = dart.fn(google_fonts.GoogleFonts.crimsonText, T.__ToTextStyleL());
    },
    get C233() {
      return C[233] = dart.fn(google_fonts.GoogleFonts.croissantOne, T.__ToTextStyleL());
    },
    get C234() {
      return C[234] = dart.fn(google_fonts.GoogleFonts.crushed, T.__ToTextStyleL());
    },
    get C235() {
      return C[235] = dart.fn(google_fonts.GoogleFonts.cuprum, T.__ToTextStyleL());
    },
    get C236() {
      return C[236] = dart.fn(google_fonts.GoogleFonts.cuteFont, T.__ToTextStyleL());
    },
    get C237() {
      return C[237] = dart.fn(google_fonts.GoogleFonts.cutive, T.__ToTextStyleL());
    },
    get C238() {
      return C[238] = dart.fn(google_fonts.GoogleFonts.cutiveMono, T.__ToTextStyleL());
    },
    get C239() {
      return C[239] = dart.fn(google_fonts.GoogleFonts.dmSans, T.__ToTextStyleL());
    },
    get C240() {
      return C[240] = dart.fn(google_fonts.GoogleFonts.dmSerifDisplay, T.__ToTextStyleL());
    },
    get C241() {
      return C[241] = dart.fn(google_fonts.GoogleFonts.dmSerifText, T.__ToTextStyleL());
    },
    get C242() {
      return C[242] = dart.fn(google_fonts.GoogleFonts.damion, T.__ToTextStyleL());
    },
    get C243() {
      return C[243] = dart.fn(google_fonts.GoogleFonts.dancingScript, T.__ToTextStyleL());
    },
    get C244() {
      return C[244] = dart.fn(google_fonts.GoogleFonts.darkerGrotesque, T.__ToTextStyleL());
    },
    get C245() {
      return C[245] = dart.fn(google_fonts.GoogleFonts.davidLibre, T.__ToTextStyleL());
    },
    get C246() {
      return C[246] = dart.fn(google_fonts.GoogleFonts.dawningOfANewDay, T.__ToTextStyleL());
    },
    get C247() {
      return C[247] = dart.fn(google_fonts.GoogleFonts.daysOne, T.__ToTextStyleL());
    },
    get C248() {
      return C[248] = dart.fn(google_fonts.GoogleFonts.dekko, T.__ToTextStyleL());
    },
    get C249() {
      return C[249] = dart.fn(google_fonts.GoogleFonts.delius, T.__ToTextStyleL());
    },
    get C250() {
      return C[250] = dart.fn(google_fonts.GoogleFonts.deliusSwashCaps, T.__ToTextStyleL());
    },
    get C251() {
      return C[251] = dart.fn(google_fonts.GoogleFonts.deliusUnicase, T.__ToTextStyleL());
    },
    get C252() {
      return C[252] = dart.fn(google_fonts.GoogleFonts.dellaRespira, T.__ToTextStyleL());
    },
    get C253() {
      return C[253] = dart.fn(google_fonts.GoogleFonts.denkOne, T.__ToTextStyleL());
    },
    get C254() {
      return C[254] = dart.fn(google_fonts.GoogleFonts.devonshire, T.__ToTextStyleL());
    },
    get C255() {
      return C[255] = dart.fn(google_fonts.GoogleFonts.dhurjati, T.__ToTextStyleL());
    },
    get C256() {
      return C[256] = dart.fn(google_fonts.GoogleFonts.didactGothic, T.__ToTextStyleL());
    },
    get C257() {
      return C[257] = dart.fn(google_fonts.GoogleFonts.diplomata, T.__ToTextStyleL());
    },
    get C258() {
      return C[258] = dart.fn(google_fonts.GoogleFonts.diplomataSc, T.__ToTextStyleL());
    },
    get C259() {
      return C[259] = dart.fn(google_fonts.GoogleFonts.doHyeon, T.__ToTextStyleL());
    },
    get C260() {
      return C[260] = dart.fn(google_fonts.GoogleFonts.dokdo, T.__ToTextStyleL());
    },
    get C261() {
      return C[261] = dart.fn(google_fonts.GoogleFonts.domine, T.__ToTextStyleL());
    },
    get C262() {
      return C[262] = dart.fn(google_fonts.GoogleFonts.donegalOne, T.__ToTextStyleL());
    },
    get C263() {
      return C[263] = dart.fn(google_fonts.GoogleFonts.doppioOne, T.__ToTextStyleL());
    },
    get C264() {
      return C[264] = dart.fn(google_fonts.GoogleFonts.dorsa, T.__ToTextStyleL());
    },
    get C265() {
      return C[265] = dart.fn(google_fonts.GoogleFonts.dosis, T.__ToTextStyleL());
    },
    get C266() {
      return C[266] = dart.fn(google_fonts.GoogleFonts.drSugiyama, T.__ToTextStyleL());
    },
    get C267() {
      return C[267] = dart.fn(google_fonts.GoogleFonts.droidSans, T.__ToTextStyleL());
    },
    get C268() {
      return C[268] = dart.fn(google_fonts.GoogleFonts.droidSansMono, T.__ToTextStyleL());
    },
    get C269() {
      return C[269] = dart.fn(google_fonts.GoogleFonts.droidSerif, T.__ToTextStyleL());
    },
    get C270() {
      return C[270] = dart.fn(google_fonts.GoogleFonts.duruSans, T.__ToTextStyleL());
    },
    get C271() {
      return C[271] = dart.fn(google_fonts.GoogleFonts.dynalight, T.__ToTextStyleL());
    },
    get C272() {
      return C[272] = dart.fn(google_fonts.GoogleFonts.ebGaramond, T.__ToTextStyleL());
    },
    get C273() {
      return C[273] = dart.fn(google_fonts.GoogleFonts.eagleLake, T.__ToTextStyleL());
    },
    get C274() {
      return C[274] = dart.fn(google_fonts.GoogleFonts.eastSeaDokdo, T.__ToTextStyleL());
    },
    get C275() {
      return C[275] = dart.fn(google_fonts.GoogleFonts.eater, T.__ToTextStyleL());
    },
    get C276() {
      return C[276] = dart.fn(google_fonts.GoogleFonts.economica, T.__ToTextStyleL());
    },
    get C277() {
      return C[277] = dart.fn(google_fonts.GoogleFonts.eczar, T.__ToTextStyleL());
    },
    get C278() {
      return C[278] = dart.fn(google_fonts.GoogleFonts.elMessiri, T.__ToTextStyleL());
    },
    get C279() {
      return C[279] = dart.fn(google_fonts.GoogleFonts.electrolize, T.__ToTextStyleL());
    },
    get C280() {
      return C[280] = dart.fn(google_fonts.GoogleFonts.elsie, T.__ToTextStyleL());
    },
    get C281() {
      return C[281] = dart.fn(google_fonts.GoogleFonts.elsieSwashCaps, T.__ToTextStyleL());
    },
    get C282() {
      return C[282] = dart.fn(google_fonts.GoogleFonts.emblemaOne, T.__ToTextStyleL());
    },
    get C283() {
      return C[283] = dart.fn(google_fonts.GoogleFonts.emilysCandy, T.__ToTextStyleL());
    },
    get C284() {
      return C[284] = dart.fn(google_fonts.GoogleFonts.encodeSans, T.__ToTextStyleL());
    },
    get C285() {
      return C[285] = dart.fn(google_fonts.GoogleFonts.encodeSansCondensed, T.__ToTextStyleL());
    },
    get C286() {
      return C[286] = dart.fn(google_fonts.GoogleFonts.encodeSansExpanded, T.__ToTextStyleL());
    },
    get C287() {
      return C[287] = dart.fn(google_fonts.GoogleFonts.encodeSansSemiCondensed, T.__ToTextStyleL());
    },
    get C288() {
      return C[288] = dart.fn(google_fonts.GoogleFonts.encodeSansSemiExpanded, T.__ToTextStyleL());
    },
    get C289() {
      return C[289] = dart.fn(google_fonts.GoogleFonts.engagement, T.__ToTextStyleL());
    },
    get C290() {
      return C[290] = dart.fn(google_fonts.GoogleFonts.englebert, T.__ToTextStyleL());
    },
    get C291() {
      return C[291] = dart.fn(google_fonts.GoogleFonts.enriqueta, T.__ToTextStyleL());
    },
    get C292() {
      return C[292] = dart.fn(google_fonts.GoogleFonts.ericaOne, T.__ToTextStyleL());
    },
    get C293() {
      return C[293] = dart.fn(google_fonts.GoogleFonts.esteban, T.__ToTextStyleL());
    },
    get C294() {
      return C[294] = dart.fn(google_fonts.GoogleFonts.euphoriaScript, T.__ToTextStyleL());
    },
    get C295() {
      return C[295] = dart.fn(google_fonts.GoogleFonts.ewert, T.__ToTextStyleL());
    },
    get C296() {
      return C[296] = dart.fn(google_fonts.GoogleFonts.exo, T.__ToTextStyleL());
    },
    get C297() {
      return C[297] = dart.fn(google_fonts.GoogleFonts.exo2, T.__ToTextStyleL());
    },
    get C298() {
      return C[298] = dart.fn(google_fonts.GoogleFonts.expletusSans, T.__ToTextStyleL());
    },
    get C299() {
      return C[299] = dart.fn(google_fonts.GoogleFonts.fahkwang, T.__ToTextStyleL());
    },
    get C300() {
      return C[300] = dart.fn(google_fonts.GoogleFonts.fanwoodText, T.__ToTextStyleL());
    },
    get C301() {
      return C[301] = dart.fn(google_fonts.GoogleFonts.farro, T.__ToTextStyleL());
    },
    get C302() {
      return C[302] = dart.fn(google_fonts.GoogleFonts.farsan, T.__ToTextStyleL());
    },
    get C303() {
      return C[303] = dart.fn(google_fonts.GoogleFonts.fascinate, T.__ToTextStyleL());
    },
    get C304() {
      return C[304] = dart.fn(google_fonts.GoogleFonts.fascinateInline, T.__ToTextStyleL());
    },
    get C305() {
      return C[305] = dart.fn(google_fonts.GoogleFonts.fasterOne, T.__ToTextStyleL());
    },
    get C306() {
      return C[306] = dart.fn(google_fonts.GoogleFonts.faunaOne, T.__ToTextStyleL());
    },
    get C307() {
      return C[307] = dart.fn(google_fonts.GoogleFonts.faustina, T.__ToTextStyleL());
    },
    get C308() {
      return C[308] = dart.fn(google_fonts.GoogleFonts.federant, T.__ToTextStyleL());
    },
    get C309() {
      return C[309] = dart.fn(google_fonts.GoogleFonts.federo, T.__ToTextStyleL());
    },
    get C310() {
      return C[310] = dart.fn(google_fonts.GoogleFonts.felipa, T.__ToTextStyleL());
    },
    get C311() {
      return C[311] = dart.fn(google_fonts.GoogleFonts.fenix, T.__ToTextStyleL());
    },
    get C312() {
      return C[312] = dart.fn(google_fonts.GoogleFonts.fingerPaint, T.__ToTextStyleL());
    },
    get C313() {
      return C[313] = dart.fn(google_fonts.GoogleFonts.firaCode, T.__ToTextStyleL());
    },
    get C314() {
      return C[314] = dart.fn(google_fonts.GoogleFonts.firaMono, T.__ToTextStyleL());
    },
    get C315() {
      return C[315] = dart.fn(google_fonts.GoogleFonts.firaSans, T.__ToTextStyleL());
    },
    get C316() {
      return C[316] = dart.fn(google_fonts.GoogleFonts.firaSansCondensed, T.__ToTextStyleL());
    },
    get C317() {
      return C[317] = dart.fn(google_fonts.GoogleFonts.firaSansExtraCondensed, T.__ToTextStyleL());
    },
    get C318() {
      return C[318] = dart.fn(google_fonts.GoogleFonts.fjallaOne, T.__ToTextStyleL());
    },
    get C319() {
      return C[319] = dart.fn(google_fonts.GoogleFonts.fjordOne, T.__ToTextStyleL());
    },
    get C320() {
      return C[320] = dart.fn(google_fonts.GoogleFonts.flamenco, T.__ToTextStyleL());
    },
    get C321() {
      return C[321] = dart.fn(google_fonts.GoogleFonts.flavors, T.__ToTextStyleL());
    },
    get C322() {
      return C[322] = dart.fn(google_fonts.GoogleFonts.fondamento, T.__ToTextStyleL());
    },
    get C323() {
      return C[323] = dart.fn(google_fonts.GoogleFonts.fontdinerSwanky, T.__ToTextStyleL());
    },
    get C324() {
      return C[324] = dart.fn(google_fonts.GoogleFonts.forum, T.__ToTextStyleL());
    },
    get C325() {
      return C[325] = dart.fn(google_fonts.GoogleFonts.francoisOne, T.__ToTextStyleL());
    },
    get C326() {
      return C[326] = dart.fn(google_fonts.GoogleFonts.frankRuhlLibre, T.__ToTextStyleL());
    },
    get C327() {
      return C[327] = dart.fn(google_fonts.GoogleFonts.freckleFace, T.__ToTextStyleL());
    },
    get C328() {
      return C[328] = dart.fn(google_fonts.GoogleFonts.frederickaTheGreat, T.__ToTextStyleL());
    },
    get C329() {
      return C[329] = dart.fn(google_fonts.GoogleFonts.fredokaOne, T.__ToTextStyleL());
    },
    get C330() {
      return C[330] = dart.fn(google_fonts.GoogleFonts.fresca, T.__ToTextStyleL());
    },
    get C331() {
      return C[331] = dart.fn(google_fonts.GoogleFonts.frijole, T.__ToTextStyleL());
    },
    get C332() {
      return C[332] = dart.fn(google_fonts.GoogleFonts.fruktur, T.__ToTextStyleL());
    },
    get C333() {
      return C[333] = dart.fn(google_fonts.GoogleFonts.fugazOne, T.__ToTextStyleL());
    },
    get C334() {
      return C[334] = dart.fn(google_fonts.GoogleFonts.gfsDidot, T.__ToTextStyleL());
    },
    get C335() {
      return C[335] = dart.fn(google_fonts.GoogleFonts.gfsNeohellenic, T.__ToTextStyleL());
    },
    get C336() {
      return C[336] = dart.fn(google_fonts.GoogleFonts.gabriela, T.__ToTextStyleL());
    },
    get C337() {
      return C[337] = dart.fn(google_fonts.GoogleFonts.gaegu, T.__ToTextStyleL());
    },
    get C338() {
      return C[338] = dart.fn(google_fonts.GoogleFonts.gafata, T.__ToTextStyleL());
    },
    get C339() {
      return C[339] = dart.fn(google_fonts.GoogleFonts.galada, T.__ToTextStyleL());
    },
    get C340() {
      return C[340] = dart.fn(google_fonts.GoogleFonts.galdeano, T.__ToTextStyleL());
    },
    get C341() {
      return C[341] = dart.fn(google_fonts.GoogleFonts.galindo, T.__ToTextStyleL());
    },
    get C342() {
      return C[342] = dart.fn(google_fonts.GoogleFonts.gamjaFlower, T.__ToTextStyleL());
    },
    get C343() {
      return C[343] = dart.fn(google_fonts.GoogleFonts.gayathri, T.__ToTextStyleL());
    },
    get C344() {
      return C[344] = dart.fn(google_fonts.GoogleFonts.gelasio, T.__ToTextStyleL());
    },
    get C345() {
      return C[345] = dart.fn(google_fonts.GoogleFonts.gentiumBasic, T.__ToTextStyleL());
    },
    get C346() {
      return C[346] = dart.fn(google_fonts.GoogleFonts.gentiumBookBasic, T.__ToTextStyleL());
    },
    get C347() {
      return C[347] = dart.fn(google_fonts.GoogleFonts.geo, T.__ToTextStyleL());
    },
    get C348() {
      return C[348] = dart.fn(google_fonts.GoogleFonts.geostar, T.__ToTextStyleL());
    },
    get C349() {
      return C[349] = dart.fn(google_fonts.GoogleFonts.geostarFill, T.__ToTextStyleL());
    },
    get C350() {
      return C[350] = dart.fn(google_fonts.GoogleFonts.germaniaOne, T.__ToTextStyleL());
    },
    get C351() {
      return C[351] = dart.fn(google_fonts.GoogleFonts.gidugu, T.__ToTextStyleL());
    },
    get C352() {
      return C[352] = dart.fn(google_fonts.GoogleFonts.gildaDisplay, T.__ToTextStyleL());
    },
    get C353() {
      return C[353] = dart.fn(google_fonts.GoogleFonts.girassol, T.__ToTextStyleL());
    },
    get C354() {
      return C[354] = dart.fn(google_fonts.GoogleFonts.giveYouGlory, T.__ToTextStyleL());
    },
    get C355() {
      return C[355] = dart.fn(google_fonts.GoogleFonts.glassAntiqua, T.__ToTextStyleL());
    },
    get C356() {
      return C[356] = dart.fn(google_fonts.GoogleFonts.glegoo, T.__ToTextStyleL());
    },
    get C357() {
      return C[357] = dart.fn(google_fonts.GoogleFonts.gloriaHallelujah, T.__ToTextStyleL());
    },
    get C358() {
      return C[358] = dart.fn(google_fonts.GoogleFonts.goblinOne, T.__ToTextStyleL());
    },
    get C359() {
      return C[359] = dart.fn(google_fonts.GoogleFonts.gochiHand, T.__ToTextStyleL());
    },
    get C360() {
      return C[360] = dart.fn(google_fonts.GoogleFonts.gorditas, T.__ToTextStyleL());
    },
    get C361() {
      return C[361] = dart.fn(google_fonts.GoogleFonts.gothicA1, T.__ToTextStyleL());
    },
    get C362() {
      return C[362] = dart.fn(google_fonts.GoogleFonts.gotu, T.__ToTextStyleL());
    },
    get C363() {
      return C[363] = dart.fn(google_fonts.GoogleFonts.goudyBookletter1911, T.__ToTextStyleL());
    },
    get C364() {
      return C[364] = dart.fn(google_fonts.GoogleFonts.graduate, T.__ToTextStyleL());
    },
    get C365() {
      return C[365] = dart.fn(google_fonts.GoogleFonts.grandHotel, T.__ToTextStyleL());
    },
    get C366() {
      return C[366] = dart.fn(google_fonts.GoogleFonts.gravitasOne, T.__ToTextStyleL());
    },
    get C367() {
      return C[367] = dart.fn(google_fonts.GoogleFonts.greatVibes, T.__ToTextStyleL());
    },
    get C368() {
      return C[368] = dart.fn(google_fonts.GoogleFonts.grenze, T.__ToTextStyleL());
    },
    get C369() {
      return C[369] = dart.fn(google_fonts.GoogleFonts.griffy, T.__ToTextStyleL());
    },
    get C370() {
      return C[370] = dart.fn(google_fonts.GoogleFonts.gruppo, T.__ToTextStyleL());
    },
    get C371() {
      return C[371] = dart.fn(google_fonts.GoogleFonts.gudea, T.__ToTextStyleL());
    },
    get C372() {
      return C[372] = dart.fn(google_fonts.GoogleFonts.gugi, T.__ToTextStyleL());
    },
    get C373() {
      return C[373] = dart.fn(google_fonts.GoogleFonts.gupter, T.__ToTextStyleL());
    },
    get C374() {
      return C[374] = dart.fn(google_fonts.GoogleFonts.gurajada, T.__ToTextStyleL());
    },
    get C375() {
      return C[375] = dart.fn(google_fonts.GoogleFonts.habibi, T.__ToTextStyleL());
    },
    get C376() {
      return C[376] = dart.fn(google_fonts.GoogleFonts.halant, T.__ToTextStyleL());
    },
    get C377() {
      return C[377] = dart.fn(google_fonts.GoogleFonts.hammersmithOne, T.__ToTextStyleL());
    },
    get C378() {
      return C[378] = dart.fn(google_fonts.GoogleFonts.hanalei, T.__ToTextStyleL());
    },
    get C379() {
      return C[379] = dart.fn(google_fonts.GoogleFonts.hanaleiFill, T.__ToTextStyleL());
    },
    get C380() {
      return C[380] = dart.fn(google_fonts.GoogleFonts.handlee, T.__ToTextStyleL());
    },
    get C381() {
      return C[381] = dart.fn(google_fonts.GoogleFonts.happyMonkey, T.__ToTextStyleL());
    },
    get C382() {
      return C[382] = dart.fn(google_fonts.GoogleFonts.harmattan, T.__ToTextStyleL());
    },
    get C383() {
      return C[383] = dart.fn(google_fonts.GoogleFonts.headlandOne, T.__ToTextStyleL());
    },
    get C384() {
      return C[384] = dart.fn(google_fonts.GoogleFonts.heebo, T.__ToTextStyleL());
    },
    get C385() {
      return C[385] = dart.fn(google_fonts.GoogleFonts.hennyPenny, T.__ToTextStyleL());
    },
    get C386() {
      return C[386] = dart.fn(google_fonts.GoogleFonts.heptaSlab, T.__ToTextStyleL());
    },
    get C387() {
      return C[387] = dart.fn(google_fonts.GoogleFonts.herrVonMuellerhoff, T.__ToTextStyleL());
    },
    get C388() {
      return C[388] = dart.fn(google_fonts.GoogleFonts.hiMelody, T.__ToTextStyleL());
    },
    get C389() {
      return C[389] = dart.fn(google_fonts.GoogleFonts.hind, T.__ToTextStyleL());
    },
    get C390() {
      return C[390] = dart.fn(google_fonts.GoogleFonts.hindGuntur, T.__ToTextStyleL());
    },
    get C391() {
      return C[391] = dart.fn(google_fonts.GoogleFonts.hindMadurai, T.__ToTextStyleL());
    },
    get C392() {
      return C[392] = dart.fn(google_fonts.GoogleFonts.hindSiliguri, T.__ToTextStyleL());
    },
    get C393() {
      return C[393] = dart.fn(google_fonts.GoogleFonts.hindVadodara, T.__ToTextStyleL());
    },
    get C394() {
      return C[394] = dart.fn(google_fonts.GoogleFonts.holtwoodOneSc, T.__ToTextStyleL());
    },
    get C395() {
      return C[395] = dart.fn(google_fonts.GoogleFonts.homemadeApple, T.__ToTextStyleL());
    },
    get C396() {
      return C[396] = dart.fn(google_fonts.GoogleFonts.homenaje, T.__ToTextStyleL());
    },
    get C397() {
      return C[397] = dart.fn(google_fonts.GoogleFonts.ibmPlexMono, T.__ToTextStyleL());
    },
    get C398() {
      return C[398] = dart.fn(google_fonts.GoogleFonts.ibmPlexSans, T.__ToTextStyleL());
    },
    get C399() {
      return C[399] = dart.fn(google_fonts.GoogleFonts.ibmPlexSansCondensed, T.__ToTextStyleL());
    },
    get C400() {
      return C[400] = dart.fn(google_fonts.GoogleFonts.ibmPlexSerif, T.__ToTextStyleL());
    },
    get C401() {
      return C[401] = dart.fn(google_fonts.GoogleFonts.imFellDwPica, T.__ToTextStyleL());
    },
    get C402() {
      return C[402] = dart.fn(google_fonts.GoogleFonts.imFellDwPicaSc, T.__ToTextStyleL());
    },
    get C403() {
      return C[403] = dart.fn(google_fonts.GoogleFonts.imFellDoublePica, T.__ToTextStyleL());
    },
    get C404() {
      return C[404] = dart.fn(google_fonts.GoogleFonts.imFellDoublePicaSc, T.__ToTextStyleL());
    },
    get C405() {
      return C[405] = dart.fn(google_fonts.GoogleFonts.imFellEnglish, T.__ToTextStyleL());
    },
    get C406() {
      return C[406] = dart.fn(google_fonts.GoogleFonts.imFellEnglishSc, T.__ToTextStyleL());
    },
    get C407() {
      return C[407] = dart.fn(google_fonts.GoogleFonts.imFellFrenchCanon, T.__ToTextStyleL());
    },
    get C408() {
      return C[408] = dart.fn(google_fonts.GoogleFonts.imFellFrenchCanonSc, T.__ToTextStyleL());
    },
    get C409() {
      return C[409] = dart.fn(google_fonts.GoogleFonts.imFellGreatPrimer, T.__ToTextStyleL());
    },
    get C410() {
      return C[410] = dart.fn(google_fonts.GoogleFonts.imFellGreatPrimerSc, T.__ToTextStyleL());
    },
    get C411() {
      return C[411] = dart.fn(google_fonts.GoogleFonts.ibarraRealNova, T.__ToTextStyleL());
    },
    get C412() {
      return C[412] = dart.fn(google_fonts.GoogleFonts.iceberg, T.__ToTextStyleL());
    },
    get C413() {
      return C[413] = dart.fn(google_fonts.GoogleFonts.iceland, T.__ToTextStyleL());
    },
    get C414() {
      return C[414] = dart.fn(google_fonts.GoogleFonts.imprima, T.__ToTextStyleL());
    },
    get C415() {
      return C[415] = dart.fn(google_fonts.GoogleFonts.inconsolata, T.__ToTextStyleL());
    },
    get C416() {
      return C[416] = dart.fn(google_fonts.GoogleFonts.inder, T.__ToTextStyleL());
    },
    get C417() {
      return C[417] = dart.fn(google_fonts.GoogleFonts.indieFlower, T.__ToTextStyleL());
    },
    get C418() {
      return C[418] = dart.fn(google_fonts.GoogleFonts.inika, T.__ToTextStyleL());
    },
    get C419() {
      return C[419] = dart.fn(google_fonts.GoogleFonts.inknutAntiqua, T.__ToTextStyleL());
    },
    get C420() {
      return C[420] = dart.fn(google_fonts.GoogleFonts.inriaSans, T.__ToTextStyleL());
    },
    get C421() {
      return C[421] = dart.fn(google_fonts.GoogleFonts.inriaSerif, T.__ToTextStyleL());
    },
    get C422() {
      return C[422] = dart.fn(google_fonts.GoogleFonts.inter, T.__ToTextStyleL());
    },
    get C423() {
      return C[423] = dart.fn(google_fonts.GoogleFonts.irishGrover, T.__ToTextStyleL());
    },
    get C424() {
      return C[424] = dart.fn(google_fonts.GoogleFonts.istokWeb, T.__ToTextStyleL());
    },
    get C425() {
      return C[425] = dart.fn(google_fonts.GoogleFonts.italiana, T.__ToTextStyleL());
    },
    get C426() {
      return C[426] = dart.fn(google_fonts.GoogleFonts.italianno, T.__ToTextStyleL());
    },
    get C427() {
      return C[427] = dart.fn(google_fonts.GoogleFonts.itim, T.__ToTextStyleL());
    },
    get C428() {
      return C[428] = dart.fn(google_fonts.GoogleFonts.jacquesFrancois, T.__ToTextStyleL());
    },
    get C429() {
      return C[429] = dart.fn(google_fonts.GoogleFonts.jacquesFrancoisShadow, T.__ToTextStyleL());
    },
    get C430() {
      return C[430] = dart.fn(google_fonts.GoogleFonts.jaldi, T.__ToTextStyleL());
    },
    get C431() {
      return C[431] = dart.fn(google_fonts.GoogleFonts.jimNightshade, T.__ToTextStyleL());
    },
    get C432() {
      return C[432] = dart.fn(google_fonts.GoogleFonts.jockeyOne, T.__ToTextStyleL());
    },
    get C433() {
      return C[433] = dart.fn(google_fonts.GoogleFonts.jollyLodger, T.__ToTextStyleL());
    },
    get C434() {
      return C[434] = dart.fn(google_fonts.GoogleFonts.jomhuria, T.__ToTextStyleL());
    },
    get C435() {
      return C[435] = dart.fn(google_fonts.GoogleFonts.jomolhari, T.__ToTextStyleL());
    },
    get C436() {
      return C[436] = dart.fn(google_fonts.GoogleFonts.josefinSans, T.__ToTextStyleL());
    },
    get C437() {
      return C[437] = dart.fn(google_fonts.GoogleFonts.josefinSlab, T.__ToTextStyleL());
    },
    get C438() {
      return C[438] = dart.fn(google_fonts.GoogleFonts.jotiOne, T.__ToTextStyleL());
    },
    get C439() {
      return C[439] = dart.fn(google_fonts.GoogleFonts.jua, T.__ToTextStyleL());
    },
    get C440() {
      return C[440] = dart.fn(google_fonts.GoogleFonts.judson, T.__ToTextStyleL());
    },
    get C441() {
      return C[441] = dart.fn(google_fonts.GoogleFonts.julee, T.__ToTextStyleL());
    },
    get C442() {
      return C[442] = dart.fn(google_fonts.GoogleFonts.juliusSansOne, T.__ToTextStyleL());
    },
    get C443() {
      return C[443] = dart.fn(google_fonts.GoogleFonts.junge, T.__ToTextStyleL());
    },
    get C444() {
      return C[444] = dart.fn(google_fonts.GoogleFonts.jura, T.__ToTextStyleL());
    },
    get C445() {
      return C[445] = dart.fn(google_fonts.GoogleFonts.justAnotherHand, T.__ToTextStyleL());
    },
    get C446() {
      return C[446] = dart.fn(google_fonts.GoogleFonts.justMeAgainDownHere, T.__ToTextStyleL());
    },
    get C447() {
      return C[447] = dart.fn(google_fonts.GoogleFonts.k2d, T.__ToTextStyleL());
    },
    get C448() {
      return C[448] = dart.fn(google_fonts.GoogleFonts.kadwa, T.__ToTextStyleL());
    },
    get C449() {
      return C[449] = dart.fn(google_fonts.GoogleFonts.kalam, T.__ToTextStyleL());
    },
    get C450() {
      return C[450] = dart.fn(google_fonts.GoogleFonts.kameron, T.__ToTextStyleL());
    },
    get C451() {
      return C[451] = dart.fn(google_fonts.GoogleFonts.kanit, T.__ToTextStyleL());
    },
    get C452() {
      return C[452] = dart.fn(google_fonts.GoogleFonts.kantumruy, T.__ToTextStyleL());
    },
    get C453() {
      return C[453] = dart.fn(google_fonts.GoogleFonts.karla, T.__ToTextStyleL());
    },
    get C454() {
      return C[454] = dart.fn(google_fonts.GoogleFonts.karma, T.__ToTextStyleL());
    },
    get C455() {
      return C[455] = dart.fn(google_fonts.GoogleFonts.katibeh, T.__ToTextStyleL());
    },
    get C456() {
      return C[456] = dart.fn(google_fonts.GoogleFonts.kaushanScript, T.__ToTextStyleL());
    },
    get C457() {
      return C[457] = dart.fn(google_fonts.GoogleFonts.kavivanar, T.__ToTextStyleL());
    },
    get C458() {
      return C[458] = dart.fn(google_fonts.GoogleFonts.kavoon, T.__ToTextStyleL());
    },
    get C459() {
      return C[459] = dart.fn(google_fonts.GoogleFonts.kdamThmor, T.__ToTextStyleL());
    },
    get C460() {
      return C[460] = dart.fn(google_fonts.GoogleFonts.keaniaOne, T.__ToTextStyleL());
    },
    get C461() {
      return C[461] = dart.fn(google_fonts.GoogleFonts.kellySlab, T.__ToTextStyleL());
    },
    get C462() {
      return C[462] = dart.fn(google_fonts.GoogleFonts.kenia, T.__ToTextStyleL());
    },
    get C463() {
      return C[463] = dart.fn(google_fonts.GoogleFonts.khand, T.__ToTextStyleL());
    },
    get C464() {
      return C[464] = dart.fn(google_fonts.GoogleFonts.khula, T.__ToTextStyleL());
    },
    get C465() {
      return C[465] = dart.fn(google_fonts.GoogleFonts.kirangHaerang, T.__ToTextStyleL());
    },
    get C466() {
      return C[466] = dart.fn(google_fonts.GoogleFonts.kiteOne, T.__ToTextStyleL());
    },
    get C467() {
      return C[467] = dart.fn(google_fonts.GoogleFonts.knewave, T.__ToTextStyleL());
    },
    get C468() {
      return C[468] = dart.fn(google_fonts.GoogleFonts.koHo, T.__ToTextStyleL());
    },
    get C469() {
      return C[469] = dart.fn(google_fonts.GoogleFonts.kodchasan, T.__ToTextStyleL());
    },
    get C470() {
      return C[470] = dart.fn(google_fonts.GoogleFonts.kosugi, T.__ToTextStyleL());
    },
    get C471() {
      return C[471] = dart.fn(google_fonts.GoogleFonts.kosugiMaru, T.__ToTextStyleL());
    },
    get C472() {
      return C[472] = dart.fn(google_fonts.GoogleFonts.kottaOne, T.__ToTextStyleL());
    },
    get C473() {
      return C[473] = dart.fn(google_fonts.GoogleFonts.kranky, T.__ToTextStyleL());
    },
    get C474() {
      return C[474] = dart.fn(google_fonts.GoogleFonts.kreon, T.__ToTextStyleL());
    },
    get C475() {
      return C[475] = dart.fn(google_fonts.GoogleFonts.kristi, T.__ToTextStyleL());
    },
    get C476() {
      return C[476] = dart.fn(google_fonts.GoogleFonts.kronaOne, T.__ToTextStyleL());
    },
    get C477() {
      return C[477] = dart.fn(google_fonts.GoogleFonts.krub, T.__ToTextStyleL());
    },
    get C478() {
      return C[478] = dart.fn(google_fonts.GoogleFonts.kulimPark, T.__ToTextStyleL());
    },
    get C479() {
      return C[479] = dart.fn(google_fonts.GoogleFonts.kumarOne, T.__ToTextStyleL());
    },
    get C480() {
      return C[480] = dart.fn(google_fonts.GoogleFonts.kumarOneOutline, T.__ToTextStyleL());
    },
    get C481() {
      return C[481] = dart.fn(google_fonts.GoogleFonts.kurale, T.__ToTextStyleL());
    },
    get C482() {
      return C[482] = dart.fn(google_fonts.GoogleFonts.laBelleAurore, T.__ToTextStyleL());
    },
    get C483() {
      return C[483] = dart.fn(google_fonts.GoogleFonts.lacquer, T.__ToTextStyleL());
    },
    get C484() {
      return C[484] = dart.fn(google_fonts.GoogleFonts.laila, T.__ToTextStyleL());
    },
    get C485() {
      return C[485] = dart.fn(google_fonts.GoogleFonts.lakkiReddy, T.__ToTextStyleL());
    },
    get C486() {
      return C[486] = dart.fn(google_fonts.GoogleFonts.lalezar, T.__ToTextStyleL());
    },
    get C487() {
      return C[487] = dart.fn(google_fonts.GoogleFonts.lancelot, T.__ToTextStyleL());
    },
    get C488() {
      return C[488] = dart.fn(google_fonts.GoogleFonts.lateef, T.__ToTextStyleL());
    },
    get C489() {
      return C[489] = dart.fn(google_fonts.GoogleFonts.lato, T.__ToTextStyleL());
    },
    get C490() {
      return C[490] = dart.fn(google_fonts.GoogleFonts.leagueScript, T.__ToTextStyleL());
    },
    get C491() {
      return C[491] = dart.fn(google_fonts.GoogleFonts.leckerliOne, T.__ToTextStyleL());
    },
    get C492() {
      return C[492] = dart.fn(google_fonts.GoogleFonts.ledger, T.__ToTextStyleL());
    },
    get C493() {
      return C[493] = dart.fn(google_fonts.GoogleFonts.lekton, T.__ToTextStyleL());
    },
    get C494() {
      return C[494] = dart.fn(google_fonts.GoogleFonts.lemon, T.__ToTextStyleL());
    },
    get C495() {
      return C[495] = dart.fn(google_fonts.GoogleFonts.lemonada, T.__ToTextStyleL());
    },
    get C496() {
      return C[496] = dart.fn(google_fonts.GoogleFonts.lexendDeca, T.__ToTextStyleL());
    },
    get C497() {
      return C[497] = dart.fn(google_fonts.GoogleFonts.lexendExa, T.__ToTextStyleL());
    },
    get C498() {
      return C[498] = dart.fn(google_fonts.GoogleFonts.lexendGiga, T.__ToTextStyleL());
    },
    get C499() {
      return C[499] = dart.fn(google_fonts.GoogleFonts.lexendMega, T.__ToTextStyleL());
    },
    get C500() {
      return C[500] = dart.fn(google_fonts.GoogleFonts.lexendPeta, T.__ToTextStyleL());
    },
    get C501() {
      return C[501] = dart.fn(google_fonts.GoogleFonts.lexendTera, T.__ToTextStyleL());
    },
    get C502() {
      return C[502] = dart.fn(google_fonts.GoogleFonts.lexendZetta, T.__ToTextStyleL());
    },
    get C503() {
      return C[503] = dart.fn(google_fonts.GoogleFonts.libreBarcode128, T.__ToTextStyleL());
    },
    get C504() {
      return C[504] = dart.fn(google_fonts.GoogleFonts.libreBarcode128Text, T.__ToTextStyleL());
    },
    get C505() {
      return C[505] = dart.fn(google_fonts.GoogleFonts.libreBarcode39, T.__ToTextStyleL());
    },
    get C506() {
      return C[506] = dart.fn(google_fonts.GoogleFonts.libreBarcode39Extended, T.__ToTextStyleL());
    },
    get C507() {
      return C[507] = dart.fn(google_fonts.GoogleFonts.libreBarcode39ExtendedText, T.__ToTextStyleL());
    },
    get C508() {
      return C[508] = dart.fn(google_fonts.GoogleFonts.libreBarcode39Text, T.__ToTextStyleL());
    },
    get C509() {
      return C[509] = dart.fn(google_fonts.GoogleFonts.libreBaskerville, T.__ToTextStyleL());
    },
    get C510() {
      return C[510] = dart.fn(google_fonts.GoogleFonts.libreCaslonDisplay, T.__ToTextStyleL());
    },
    get C511() {
      return C[511] = dart.fn(google_fonts.GoogleFonts.libreCaslonText, T.__ToTextStyleL());
    },
    get C512() {
      return C[512] = dart.fn(google_fonts.GoogleFonts.libreFranklin, T.__ToTextStyleL());
    },
    get C513() {
      return C[513] = dart.fn(google_fonts.GoogleFonts.lifeSavers, T.__ToTextStyleL());
    },
    get C514() {
      return C[514] = dart.fn(google_fonts.GoogleFonts.lilitaOne, T.__ToTextStyleL());
    },
    get C515() {
      return C[515] = dart.fn(google_fonts.GoogleFonts.lilyScriptOne, T.__ToTextStyleL());
    },
    get C516() {
      return C[516] = dart.fn(google_fonts.GoogleFonts.limelight, T.__ToTextStyleL());
    },
    get C517() {
      return C[517] = dart.fn(google_fonts.GoogleFonts.lindenHill, T.__ToTextStyleL());
    },
    get C518() {
      return C[518] = dart.fn(google_fonts.GoogleFonts.literata, T.__ToTextStyleL());
    },
    get C519() {
      return C[519] = dart.fn(google_fonts.GoogleFonts.liuJianMaoCao, T.__ToTextStyleL());
    },
    get C520() {
      return C[520] = dart.fn(google_fonts.GoogleFonts.livvic, T.__ToTextStyleL());
    },
    get C521() {
      return C[521] = dart.fn(google_fonts.GoogleFonts.lobster, T.__ToTextStyleL());
    },
    get C522() {
      return C[522] = dart.fn(google_fonts.GoogleFonts.lobsterTwo, T.__ToTextStyleL());
    },
    get C523() {
      return C[523] = dart.fn(google_fonts.GoogleFonts.londrinaOutline, T.__ToTextStyleL());
    },
    get C524() {
      return C[524] = dart.fn(google_fonts.GoogleFonts.londrinaShadow, T.__ToTextStyleL());
    },
    get C525() {
      return C[525] = dart.fn(google_fonts.GoogleFonts.londrinaSketch, T.__ToTextStyleL());
    },
    get C526() {
      return C[526] = dart.fn(google_fonts.GoogleFonts.londrinaSolid, T.__ToTextStyleL());
    },
    get C527() {
      return C[527] = dart.fn(google_fonts.GoogleFonts.longCang, T.__ToTextStyleL());
    },
    get C528() {
      return C[528] = dart.fn(google_fonts.GoogleFonts.lora, T.__ToTextStyleL());
    },
    get C529() {
      return C[529] = dart.fn(google_fonts.GoogleFonts.loveYaLikeASister, T.__ToTextStyleL());
    },
    get C530() {
      return C[530] = dart.fn(google_fonts.GoogleFonts.lovedByTheKing, T.__ToTextStyleL());
    },
    get C531() {
      return C[531] = dart.fn(google_fonts.GoogleFonts.loversQuarrel, T.__ToTextStyleL());
    },
    get C532() {
      return C[532] = dart.fn(google_fonts.GoogleFonts.luckiestGuy, T.__ToTextStyleL());
    },
    get C533() {
      return C[533] = dart.fn(google_fonts.GoogleFonts.lusitana, T.__ToTextStyleL());
    },
    get C534() {
      return C[534] = dart.fn(google_fonts.GoogleFonts.lustria, T.__ToTextStyleL());
    },
    get C535() {
      return C[535] = dart.fn(google_fonts.GoogleFonts.mPlus1p, T.__ToTextStyleL());
    },
    get C536() {
      return C[536] = dart.fn(google_fonts.GoogleFonts.mPlusRounded1c, T.__ToTextStyleL());
    },
    get C537() {
      return C[537] = dart.fn(google_fonts.GoogleFonts.maShanZheng, T.__ToTextStyleL());
    },
    get C538() {
      return C[538] = dart.fn(google_fonts.GoogleFonts.macondo, T.__ToTextStyleL());
    },
    get C539() {
      return C[539] = dart.fn(google_fonts.GoogleFonts.macondoSwashCaps, T.__ToTextStyleL());
    },
    get C540() {
      return C[540] = dart.fn(google_fonts.GoogleFonts.mada, T.__ToTextStyleL());
    },
    get C541() {
      return C[541] = dart.fn(google_fonts.GoogleFonts.magra, T.__ToTextStyleL());
    },
    get C542() {
      return C[542] = dart.fn(google_fonts.GoogleFonts.maidenOrange, T.__ToTextStyleL());
    },
    get C543() {
      return C[543] = dart.fn(google_fonts.GoogleFonts.maitree, T.__ToTextStyleL());
    },
    get C544() {
      return C[544] = dart.fn(google_fonts.GoogleFonts.majorMonoDisplay, T.__ToTextStyleL());
    },
    get C545() {
      return C[545] = dart.fn(google_fonts.GoogleFonts.mako, T.__ToTextStyleL());
    },
    get C546() {
      return C[546] = dart.fn(google_fonts.GoogleFonts.mali, T.__ToTextStyleL());
    },
    get C547() {
      return C[547] = dart.fn(google_fonts.GoogleFonts.mallanna, T.__ToTextStyleL());
    },
    get C548() {
      return C[548] = dart.fn(google_fonts.GoogleFonts.mandali, T.__ToTextStyleL());
    },
    get C549() {
      return C[549] = dart.fn(google_fonts.GoogleFonts.manjari, T.__ToTextStyleL());
    },
    get C550() {
      return C[550] = dart.fn(google_fonts.GoogleFonts.manrope, T.__ToTextStyleL());
    },
    get C551() {
      return C[551] = dart.fn(google_fonts.GoogleFonts.mansalva, T.__ToTextStyleL());
    },
    get C552() {
      return C[552] = dart.fn(google_fonts.GoogleFonts.manuale, T.__ToTextStyleL());
    },
    get C553() {
      return C[553] = dart.fn(google_fonts.GoogleFonts.marcellus, T.__ToTextStyleL());
    },
    get C554() {
      return C[554] = dart.fn(google_fonts.GoogleFonts.marcellusSc, T.__ToTextStyleL());
    },
    get C555() {
      return C[555] = dart.fn(google_fonts.GoogleFonts.marckScript, T.__ToTextStyleL());
    },
    get C556() {
      return C[556] = dart.fn(google_fonts.GoogleFonts.margarine, T.__ToTextStyleL());
    },
    get C557() {
      return C[557] = dart.fn(google_fonts.GoogleFonts.markaziText, T.__ToTextStyleL());
    },
    get C558() {
      return C[558] = dart.fn(google_fonts.GoogleFonts.markoOne, T.__ToTextStyleL());
    },
    get C559() {
      return C[559] = dart.fn(google_fonts.GoogleFonts.marmelad, T.__ToTextStyleL());
    },
    get C560() {
      return C[560] = dart.fn(google_fonts.GoogleFonts.martel, T.__ToTextStyleL());
    },
    get C561() {
      return C[561] = dart.fn(google_fonts.GoogleFonts.martelSans, T.__ToTextStyleL());
    },
    get C562() {
      return C[562] = dart.fn(google_fonts.GoogleFonts.marvel, T.__ToTextStyleL());
    },
    get C563() {
      return C[563] = dart.fn(google_fonts.GoogleFonts.mate, T.__ToTextStyleL());
    },
    get C564() {
      return C[564] = dart.fn(google_fonts.GoogleFonts.mateSc, T.__ToTextStyleL());
    },
    get C565() {
      return C[565] = dart.fn(google_fonts.GoogleFonts.mavenPro, T.__ToTextStyleL());
    },
    get C566() {
      return C[566] = dart.fn(google_fonts.GoogleFonts.mcLaren, T.__ToTextStyleL());
    },
    get C567() {
      return C[567] = dart.fn(google_fonts.GoogleFonts.meddon, T.__ToTextStyleL());
    },
    get C568() {
      return C[568] = dart.fn(google_fonts.GoogleFonts.medievalSharp, T.__ToTextStyleL());
    },
    get C569() {
      return C[569] = dart.fn(google_fonts.GoogleFonts.medulaOne, T.__ToTextStyleL());
    },
    get C570() {
      return C[570] = dart.fn(google_fonts.GoogleFonts.meeraInimai, T.__ToTextStyleL());
    },
    get C571() {
      return C[571] = dart.fn(google_fonts.GoogleFonts.megrim, T.__ToTextStyleL());
    },
    get C572() {
      return C[572] = dart.fn(google_fonts.GoogleFonts.meieScript, T.__ToTextStyleL());
    },
    get C573() {
      return C[573] = dart.fn(google_fonts.GoogleFonts.merienda, T.__ToTextStyleL());
    },
    get C574() {
      return C[574] = dart.fn(google_fonts.GoogleFonts.meriendaOne, T.__ToTextStyleL());
    },
    get C575() {
      return C[575] = dart.fn(google_fonts.GoogleFonts.merriweather, T.__ToTextStyleL());
    },
    get C576() {
      return C[576] = dart.fn(google_fonts.GoogleFonts.merriweatherSans, T.__ToTextStyleL());
    },
    get C577() {
      return C[577] = dart.fn(google_fonts.GoogleFonts.metalMania, T.__ToTextStyleL());
    },
    get C578() {
      return C[578] = dart.fn(google_fonts.GoogleFonts.metamorphous, T.__ToTextStyleL());
    },
    get C579() {
      return C[579] = dart.fn(google_fonts.GoogleFonts.metrophobic, T.__ToTextStyleL());
    },
    get C580() {
      return C[580] = dart.fn(google_fonts.GoogleFonts.michroma, T.__ToTextStyleL());
    },
    get C581() {
      return C[581] = dart.fn(google_fonts.GoogleFonts.milonga, T.__ToTextStyleL());
    },
    get C582() {
      return C[582] = dart.fn(google_fonts.GoogleFonts.miltonian, T.__ToTextStyleL());
    },
    get C583() {
      return C[583] = dart.fn(google_fonts.GoogleFonts.miltonianTattoo, T.__ToTextStyleL());
    },
    get C584() {
      return C[584] = dart.fn(google_fonts.GoogleFonts.mina, T.__ToTextStyleL());
    },
    get C585() {
      return C[585] = dart.fn(google_fonts.GoogleFonts.miniver, T.__ToTextStyleL());
    },
    get C586() {
      return C[586] = dart.fn(google_fonts.GoogleFonts.miriamLibre, T.__ToTextStyleL());
    },
    get C587() {
      return C[587] = dart.fn(google_fonts.GoogleFonts.mirza, T.__ToTextStyleL());
    },
    get C588() {
      return C[588] = dart.fn(google_fonts.GoogleFonts.missFajardose, T.__ToTextStyleL());
    },
    get C589() {
      return C[589] = dart.fn(google_fonts.GoogleFonts.mitr, T.__ToTextStyleL());
    },
    get C590() {
      return C[590] = dart.fn(google_fonts.GoogleFonts.modak, T.__ToTextStyleL());
    },
    get C591() {
      return C[591] = dart.fn(google_fonts.GoogleFonts.modernAntiqua, T.__ToTextStyleL());
    },
    get C592() {
      return C[592] = dart.fn(google_fonts.GoogleFonts.mogra, T.__ToTextStyleL());
    },
    get C593() {
      return C[593] = dart.fn(google_fonts.GoogleFonts.molengo, T.__ToTextStyleL());
    },
    get C594() {
      return C[594] = dart.fn(google_fonts.GoogleFonts.molle, T.__ToTextStyleL());
    },
    get C595() {
      return C[595] = dart.fn(google_fonts.GoogleFonts.monda, T.__ToTextStyleL());
    },
    get C596() {
      return C[596] = dart.fn(google_fonts.GoogleFonts.monofett, T.__ToTextStyleL());
    },
    get C597() {
      return C[597] = dart.fn(google_fonts.GoogleFonts.monoton, T.__ToTextStyleL());
    },
    get C598() {
      return C[598] = dart.fn(google_fonts.GoogleFonts.monsieurLaDoulaise, T.__ToTextStyleL());
    },
    get C599() {
      return C[599] = dart.fn(google_fonts.GoogleFonts.montaga, T.__ToTextStyleL());
    },
    get C600() {
      return C[600] = dart.fn(google_fonts.GoogleFonts.montez, T.__ToTextStyleL());
    },
    get C601() {
      return C[601] = dart.fn(google_fonts.GoogleFonts.montserrat, T.__ToTextStyleL());
    },
    get C602() {
      return C[602] = dart.fn(google_fonts.GoogleFonts.montserratAlternates, T.__ToTextStyleL());
    },
    get C603() {
      return C[603] = dart.fn(google_fonts.GoogleFonts.montserratSubrayada, T.__ToTextStyleL());
    },
    get C604() {
      return C[604] = dart.fn(google_fonts.GoogleFonts.mountainsOfChristmas, T.__ToTextStyleL());
    },
    get C605() {
      return C[605] = dart.fn(google_fonts.GoogleFonts.mouseMemoirs, T.__ToTextStyleL());
    },
    get C606() {
      return C[606] = dart.fn(google_fonts.GoogleFonts.mrBedfort, T.__ToTextStyleL());
    },
    get C607() {
      return C[607] = dart.fn(google_fonts.GoogleFonts.mrDafoe, T.__ToTextStyleL());
    },
    get C608() {
      return C[608] = dart.fn(google_fonts.GoogleFonts.mrDeHaviland, T.__ToTextStyleL());
    },
    get C609() {
      return C[609] = dart.fn(google_fonts.GoogleFonts.mrsSaintDelafield, T.__ToTextStyleL());
    },
    get C610() {
      return C[610] = dart.fn(google_fonts.GoogleFonts.mrsSheppards, T.__ToTextStyleL());
    },
    get C611() {
      return C[611] = dart.fn(google_fonts.GoogleFonts.mukta, T.__ToTextStyleL());
    },
    get C612() {
      return C[612] = dart.fn(google_fonts.GoogleFonts.muktaMahee, T.__ToTextStyleL());
    },
    get C613() {
      return C[613] = dart.fn(google_fonts.GoogleFonts.muktaMalar, T.__ToTextStyleL());
    },
    get C614() {
      return C[614] = dart.fn(google_fonts.GoogleFonts.muktaVaani, T.__ToTextStyleL());
    },
    get C615() {
      return C[615] = dart.fn(google_fonts.GoogleFonts.muli, T.__ToTextStyleL());
    },
    get C616() {
      return C[616] = dart.fn(google_fonts.GoogleFonts.mysteryQuest, T.__ToTextStyleL());
    },
    get C617() {
      return C[617] = dart.fn(google_fonts.GoogleFonts.ntr, T.__ToTextStyleL());
    },
    get C618() {
      return C[618] = dart.fn(google_fonts.GoogleFonts.nanumBrushScript, T.__ToTextStyleL());
    },
    get C619() {
      return C[619] = dart.fn(google_fonts.GoogleFonts.nanumGothic, T.__ToTextStyleL());
    },
    get C620() {
      return C[620] = dart.fn(google_fonts.GoogleFonts.nanumGothicCoding, T.__ToTextStyleL());
    },
    get C621() {
      return C[621] = dart.fn(google_fonts.GoogleFonts.nanumMyeongjo, T.__ToTextStyleL());
    },
    get C622() {
      return C[622] = dart.fn(google_fonts.GoogleFonts.nanumPenScript, T.__ToTextStyleL());
    },
    get C623() {
      return C[623] = dart.fn(google_fonts.GoogleFonts.neucha, T.__ToTextStyleL());
    },
    get C624() {
      return C[624] = dart.fn(google_fonts.GoogleFonts.neuton, T.__ToTextStyleL());
    },
    get C625() {
      return C[625] = dart.fn(google_fonts.GoogleFonts.newRocker, T.__ToTextStyleL());
    },
    get C626() {
      return C[626] = dart.fn(google_fonts.GoogleFonts.newsCycle, T.__ToTextStyleL());
    },
    get C627() {
      return C[627] = dart.fn(google_fonts.GoogleFonts.niconne, T.__ToTextStyleL());
    },
    get C628() {
      return C[628] = dart.fn(google_fonts.GoogleFonts.niramit, T.__ToTextStyleL());
    },
    get C629() {
      return C[629] = dart.fn(google_fonts.GoogleFonts.nixieOne, T.__ToTextStyleL());
    },
    get C630() {
      return C[630] = dart.fn(google_fonts.GoogleFonts.nobile, T.__ToTextStyleL());
    },
    get C631() {
      return C[631] = dart.fn(google_fonts.GoogleFonts.norican, T.__ToTextStyleL());
    },
    get C632() {
      return C[632] = dart.fn(google_fonts.GoogleFonts.nosifer, T.__ToTextStyleL());
    },
    get C633() {
      return C[633] = dart.fn(google_fonts.GoogleFonts.notable, T.__ToTextStyleL());
    },
    get C634() {
      return C[634] = dart.fn(google_fonts.GoogleFonts.nothingYouCouldDo, T.__ToTextStyleL());
    },
    get C635() {
      return C[635] = dart.fn(google_fonts.GoogleFonts.noticiaText, T.__ToTextStyleL());
    },
    get C636() {
      return C[636] = dart.fn(google_fonts.GoogleFonts.notoColorEmojiCompat, T.__ToTextStyleL());
    },
    get C637() {
      return C[637] = dart.fn(google_fonts.GoogleFonts.notoSans, T.__ToTextStyleL());
    },
    get C638() {
      return C[638] = dart.fn(google_fonts.GoogleFonts.notoSerif, T.__ToTextStyleL());
    },
    get C639() {
      return C[639] = dart.fn(google_fonts.GoogleFonts.novaCut, T.__ToTextStyleL());
    },
    get C640() {
      return C[640] = dart.fn(google_fonts.GoogleFonts.novaFlat, T.__ToTextStyleL());
    },
    get C641() {
      return C[641] = dart.fn(google_fonts.GoogleFonts.novaMono, T.__ToTextStyleL());
    },
    get C642() {
      return C[642] = dart.fn(google_fonts.GoogleFonts.novaOval, T.__ToTextStyleL());
    },
    get C643() {
      return C[643] = dart.fn(google_fonts.GoogleFonts.novaRound, T.__ToTextStyleL());
    },
    get C644() {
      return C[644] = dart.fn(google_fonts.GoogleFonts.novaScript, T.__ToTextStyleL());
    },
    get C645() {
      return C[645] = dart.fn(google_fonts.GoogleFonts.novaSlim, T.__ToTextStyleL());
    },
    get C646() {
      return C[646] = dart.fn(google_fonts.GoogleFonts.novaSquare, T.__ToTextStyleL());
    },
    get C647() {
      return C[647] = dart.fn(google_fonts.GoogleFonts.numans, T.__ToTextStyleL());
    },
    get C648() {
      return C[648] = dart.fn(google_fonts.GoogleFonts.nunito, T.__ToTextStyleL());
    },
    get C649() {
      return C[649] = dart.fn(google_fonts.GoogleFonts.nunitoSans, T.__ToTextStyleL());
    },
    get C650() {
      return C[650] = dart.fn(google_fonts.GoogleFonts.odibeeSans, T.__ToTextStyleL());
    },
    get C651() {
      return C[651] = dart.fn(google_fonts.GoogleFonts.odorMeanChey, T.__ToTextStyleL());
    },
    get C652() {
      return C[652] = dart.fn(google_fonts.GoogleFonts.offside, T.__ToTextStyleL());
    },
    get C653() {
      return C[653] = dart.fn(google_fonts.GoogleFonts.oldStandardTt, T.__ToTextStyleL());
    },
    get C654() {
      return C[654] = dart.fn(google_fonts.GoogleFonts.oldenburg, T.__ToTextStyleL());
    },
    get C655() {
      return C[655] = dart.fn(google_fonts.GoogleFonts.oleoScript, T.__ToTextStyleL());
    },
    get C656() {
      return C[656] = dart.fn(google_fonts.GoogleFonts.oleoScriptSwashCaps, T.__ToTextStyleL());
    },
    get C657() {
      return C[657] = dart.fn(google_fonts.GoogleFonts.openSans, T.__ToTextStyleL());
    },
    get C658() {
      return C[658] = dart.fn(google_fonts.GoogleFonts.openSansCondensed, T.__ToTextStyleL());
    },
    get C659() {
      return C[659] = dart.fn(google_fonts.GoogleFonts.oranienbaum, T.__ToTextStyleL());
    },
    get C660() {
      return C[660] = dart.fn(google_fonts.GoogleFonts.orbitron, T.__ToTextStyleL());
    },
    get C661() {
      return C[661] = dart.fn(google_fonts.GoogleFonts.oregano, T.__ToTextStyleL());
    },
    get C662() {
      return C[662] = dart.fn(google_fonts.GoogleFonts.orienta, T.__ToTextStyleL());
    },
    get C663() {
      return C[663] = dart.fn(google_fonts.GoogleFonts.originalSurfer, T.__ToTextStyleL());
    },
    get C664() {
      return C[664] = dart.fn(google_fonts.GoogleFonts.oswald, T.__ToTextStyleL());
    },
    get C665() {
      return C[665] = dart.fn(google_fonts.GoogleFonts.overTheRainbow, T.__ToTextStyleL());
    },
    get C666() {
      return C[666] = dart.fn(google_fonts.GoogleFonts.overlock, T.__ToTextStyleL());
    },
    get C667() {
      return C[667] = dart.fn(google_fonts.GoogleFonts.overlockSc, T.__ToTextStyleL());
    },
    get C668() {
      return C[668] = dart.fn(google_fonts.GoogleFonts.overpass, T.__ToTextStyleL());
    },
    get C669() {
      return C[669] = dart.fn(google_fonts.GoogleFonts.overpassMono, T.__ToTextStyleL());
    },
    get C670() {
      return C[670] = dart.fn(google_fonts.GoogleFonts.ovo, T.__ToTextStyleL());
    },
    get C671() {
      return C[671] = dart.fn(google_fonts.GoogleFonts.oxanium, T.__ToTextStyleL());
    },
    get C672() {
      return C[672] = dart.fn(google_fonts.GoogleFonts.oxygen, T.__ToTextStyleL());
    },
    get C673() {
      return C[673] = dart.fn(google_fonts.GoogleFonts.oxygenMono, T.__ToTextStyleL());
    },
    get C674() {
      return C[674] = dart.fn(google_fonts.GoogleFonts.ptMono, T.__ToTextStyleL());
    },
    get C675() {
      return C[675] = dart.fn(google_fonts.GoogleFonts.ptSans, T.__ToTextStyleL());
    },
    get C676() {
      return C[676] = dart.fn(google_fonts.GoogleFonts.ptSansCaption, T.__ToTextStyleL());
    },
    get C677() {
      return C[677] = dart.fn(google_fonts.GoogleFonts.ptSansNarrow, T.__ToTextStyleL());
    },
    get C678() {
      return C[678] = dart.fn(google_fonts.GoogleFonts.ptSerif, T.__ToTextStyleL());
    },
    get C679() {
      return C[679] = dart.fn(google_fonts.GoogleFonts.ptSerifCaption, T.__ToTextStyleL());
    },
    get C680() {
      return C[680] = dart.fn(google_fonts.GoogleFonts.pacifico, T.__ToTextStyleL());
    },
    get C681() {
      return C[681] = dart.fn(google_fonts.GoogleFonts.padauk, T.__ToTextStyleL());
    },
    get C682() {
      return C[682] = dart.fn(google_fonts.GoogleFonts.palanquin, T.__ToTextStyleL());
    },
    get C683() {
      return C[683] = dart.fn(google_fonts.GoogleFonts.palanquinDark, T.__ToTextStyleL());
    },
    get C684() {
      return C[684] = dart.fn(google_fonts.GoogleFonts.pangolin, T.__ToTextStyleL());
    },
    get C685() {
      return C[685] = dart.fn(google_fonts.GoogleFonts.paprika, T.__ToTextStyleL());
    },
    get C686() {
      return C[686] = dart.fn(google_fonts.GoogleFonts.parisienne, T.__ToTextStyleL());
    },
    get C687() {
      return C[687] = dart.fn(google_fonts.GoogleFonts.passeroOne, T.__ToTextStyleL());
    },
    get C688() {
      return C[688] = dart.fn(google_fonts.GoogleFonts.passionOne, T.__ToTextStyleL());
    },
    get C689() {
      return C[689] = dart.fn(google_fonts.GoogleFonts.pathwayGothicOne, T.__ToTextStyleL());
    },
    get C690() {
      return C[690] = dart.fn(google_fonts.GoogleFonts.patrickHand, T.__ToTextStyleL());
    },
    get C691() {
      return C[691] = dart.fn(google_fonts.GoogleFonts.patrickHandSc, T.__ToTextStyleL());
    },
    get C692() {
      return C[692] = dart.fn(google_fonts.GoogleFonts.pattaya, T.__ToTextStyleL());
    },
    get C693() {
      return C[693] = dart.fn(google_fonts.GoogleFonts.patuaOne, T.__ToTextStyleL());
    },
    get C694() {
      return C[694] = dart.fn(google_fonts.GoogleFonts.pavanam, T.__ToTextStyleL());
    },
    get C695() {
      return C[695] = dart.fn(google_fonts.GoogleFonts.paytoneOne, T.__ToTextStyleL());
    },
    get C696() {
      return C[696] = dart.fn(google_fonts.GoogleFonts.peddana, T.__ToTextStyleL());
    },
    get C697() {
      return C[697] = dart.fn(google_fonts.GoogleFonts.peralta, T.__ToTextStyleL());
    },
    get C698() {
      return C[698] = dart.fn(google_fonts.GoogleFonts.permanentMarker, T.__ToTextStyleL());
    },
    get C699() {
      return C[699] = dart.fn(google_fonts.GoogleFonts.petitFormalScript, T.__ToTextStyleL());
    },
    get C700() {
      return C[700] = dart.fn(google_fonts.GoogleFonts.petrona, T.__ToTextStyleL());
    },
    get C701() {
      return C[701] = dart.fn(google_fonts.GoogleFonts.philosopher, T.__ToTextStyleL());
    },
    get C702() {
      return C[702] = dart.fn(google_fonts.GoogleFonts.piedra, T.__ToTextStyleL());
    },
    get C703() {
      return C[703] = dart.fn(google_fonts.GoogleFonts.pinyonScript, T.__ToTextStyleL());
    },
    get C704() {
      return C[704] = dart.fn(google_fonts.GoogleFonts.pirataOne, T.__ToTextStyleL());
    },
    get C705() {
      return C[705] = dart.fn(google_fonts.GoogleFonts.plaster, T.__ToTextStyleL());
    },
    get C706() {
      return C[706] = dart.fn(google_fonts.GoogleFonts.play, T.__ToTextStyleL());
    },
    get C707() {
      return C[707] = dart.fn(google_fonts.GoogleFonts.playball, T.__ToTextStyleL());
    },
    get C708() {
      return C[708] = dart.fn(google_fonts.GoogleFonts.playfairDisplay, T.__ToTextStyleL());
    },
    get C709() {
      return C[709] = dart.fn(google_fonts.GoogleFonts.playfairDisplaySc, T.__ToTextStyleL());
    },
    get C710() {
      return C[710] = dart.fn(google_fonts.GoogleFonts.podkova, T.__ToTextStyleL());
    },
    get C711() {
      return C[711] = dart.fn(google_fonts.GoogleFonts.poiretOne, T.__ToTextStyleL());
    },
    get C712() {
      return C[712] = dart.fn(google_fonts.GoogleFonts.pollerOne, T.__ToTextStyleL());
    },
    get C713() {
      return C[713] = dart.fn(google_fonts.GoogleFonts.poly, T.__ToTextStyleL());
    },
    get C714() {
      return C[714] = dart.fn(google_fonts.GoogleFonts.pompiere, T.__ToTextStyleL());
    },
    get C715() {
      return C[715] = dart.fn(google_fonts.GoogleFonts.pontanoSans, T.__ToTextStyleL());
    },
    get C716() {
      return C[716] = dart.fn(google_fonts.GoogleFonts.poorStory, T.__ToTextStyleL());
    },
    get C717() {
      return C[717] = dart.fn(google_fonts.GoogleFonts.poppins, T.__ToTextStyleL());
    },
    get C718() {
      return C[718] = dart.fn(google_fonts.GoogleFonts.portLligatSans, T.__ToTextStyleL());
    },
    get C719() {
      return C[719] = dart.fn(google_fonts.GoogleFonts.portLligatSlab, T.__ToTextStyleL());
    },
    get C720() {
      return C[720] = dart.fn(google_fonts.GoogleFonts.pragatiNarrow, T.__ToTextStyleL());
    },
    get C721() {
      return C[721] = dart.fn(google_fonts.GoogleFonts.prata, T.__ToTextStyleL());
    },
    get C722() {
      return C[722] = dart.fn(google_fonts.GoogleFonts.pressStart2p, T.__ToTextStyleL());
    },
    get C723() {
      return C[723] = dart.fn(google_fonts.GoogleFonts.pridi, T.__ToTextStyleL());
    },
    get C724() {
      return C[724] = dart.fn(google_fonts.GoogleFonts.princessSofia, T.__ToTextStyleL());
    },
    get C725() {
      return C[725] = dart.fn(google_fonts.GoogleFonts.prociono, T.__ToTextStyleL());
    },
    get C726() {
      return C[726] = dart.fn(google_fonts.GoogleFonts.prompt, T.__ToTextStyleL());
    },
    get C727() {
      return C[727] = dart.fn(google_fonts.GoogleFonts.prostoOne, T.__ToTextStyleL());
    },
    get C728() {
      return C[728] = dart.fn(google_fonts.GoogleFonts.prozaLibre, T.__ToTextStyleL());
    },
    get C729() {
      return C[729] = dart.fn(google_fonts.GoogleFonts.publicSans, T.__ToTextStyleL());
    },
    get C730() {
      return C[730] = dart.fn(google_fonts.GoogleFonts.puritan, T.__ToTextStyleL());
    },
    get C731() {
      return C[731] = dart.fn(google_fonts.GoogleFonts.purplePurse, T.__ToTextStyleL());
    },
    get C732() {
      return C[732] = dart.fn(google_fonts.GoogleFonts.quando, T.__ToTextStyleL());
    },
    get C733() {
      return C[733] = dart.fn(google_fonts.GoogleFonts.quantico, T.__ToTextStyleL());
    },
    get C734() {
      return C[734] = dart.fn(google_fonts.GoogleFonts.quattrocento, T.__ToTextStyleL());
    },
    get C735() {
      return C[735] = dart.fn(google_fonts.GoogleFonts.quattrocentoSans, T.__ToTextStyleL());
    },
    get C736() {
      return C[736] = dart.fn(google_fonts.GoogleFonts.questrial, T.__ToTextStyleL());
    },
    get C737() {
      return C[737] = dart.fn(google_fonts.GoogleFonts.quicksand, T.__ToTextStyleL());
    },
    get C738() {
      return C[738] = dart.fn(google_fonts.GoogleFonts.quintessential, T.__ToTextStyleL());
    },
    get C739() {
      return C[739] = dart.fn(google_fonts.GoogleFonts.qwigley, T.__ToTextStyleL());
    },
    get C740() {
      return C[740] = dart.fn(google_fonts.GoogleFonts.racingSansOne, T.__ToTextStyleL());
    },
    get C741() {
      return C[741] = dart.fn(google_fonts.GoogleFonts.radley, T.__ToTextStyleL());
    },
    get C742() {
      return C[742] = dart.fn(google_fonts.GoogleFonts.rajdhani, T.__ToTextStyleL());
    },
    get C743() {
      return C[743] = dart.fn(google_fonts.GoogleFonts.rakkas, T.__ToTextStyleL());
    },
    get C744() {
      return C[744] = dart.fn(google_fonts.GoogleFonts.raleway, T.__ToTextStyleL());
    },
    get C745() {
      return C[745] = dart.fn(google_fonts.GoogleFonts.ralewayDots, T.__ToTextStyleL());
    },
    get C746() {
      return C[746] = dart.fn(google_fonts.GoogleFonts.ramabhadra, T.__ToTextStyleL());
    },
    get C747() {
      return C[747] = dart.fn(google_fonts.GoogleFonts.ramaraja, T.__ToTextStyleL());
    },
    get C748() {
      return C[748] = dart.fn(google_fonts.GoogleFonts.rambla, T.__ToTextStyleL());
    },
    get C749() {
      return C[749] = dart.fn(google_fonts.GoogleFonts.rammettoOne, T.__ToTextStyleL());
    },
    get C750() {
      return C[750] = dart.fn(google_fonts.GoogleFonts.ranchers, T.__ToTextStyleL());
    },
    get C751() {
      return C[751] = dart.fn(google_fonts.GoogleFonts.rancho, T.__ToTextStyleL());
    },
    get C752() {
      return C[752] = dart.fn(google_fonts.GoogleFonts.ranga, T.__ToTextStyleL());
    },
    get C753() {
      return C[753] = dart.fn(google_fonts.GoogleFonts.rasa, T.__ToTextStyleL());
    },
    get C754() {
      return C[754] = dart.fn(google_fonts.GoogleFonts.rationale, T.__ToTextStyleL());
    },
    get C755() {
      return C[755] = dart.fn(google_fonts.GoogleFonts.raviPrakash, T.__ToTextStyleL());
    },
    get C756() {
      return C[756] = dart.fn(google_fonts.GoogleFonts.redHatDisplay, T.__ToTextStyleL());
    },
    get C757() {
      return C[757] = dart.fn(google_fonts.GoogleFonts.redHatText, T.__ToTextStyleL());
    },
    get C758() {
      return C[758] = dart.fn(google_fonts.GoogleFonts.redressed, T.__ToTextStyleL());
    },
    get C759() {
      return C[759] = dart.fn(google_fonts.GoogleFonts.reemKufi, T.__ToTextStyleL());
    },
    get C760() {
      return C[760] = dart.fn(google_fonts.GoogleFonts.reenieBeanie, T.__ToTextStyleL());
    },
    get C761() {
      return C[761] = dart.fn(google_fonts.GoogleFonts.revalia, T.__ToTextStyleL());
    },
    get C762() {
      return C[762] = dart.fn(google_fonts.GoogleFonts.rhodiumLibre, T.__ToTextStyleL());
    },
    get C763() {
      return C[763] = dart.fn(google_fonts.GoogleFonts.ribeye, T.__ToTextStyleL());
    },
    get C764() {
      return C[764] = dart.fn(google_fonts.GoogleFonts.ribeyeMarrow, T.__ToTextStyleL());
    },
    get C765() {
      return C[765] = dart.fn(google_fonts.GoogleFonts.righteous, T.__ToTextStyleL());
    },
    get C766() {
      return C[766] = dart.fn(google_fonts.GoogleFonts.risque, T.__ToTextStyleL());
    },
    get C767() {
      return C[767] = dart.fn(google_fonts.GoogleFonts.roboto, T.__ToTextStyleL());
    },
    get C768() {
      return C[768] = dart.fn(google_fonts.GoogleFonts.robotoCondensed, T.__ToTextStyleL());
    },
    get C769() {
      return C[769] = dart.fn(google_fonts.GoogleFonts.robotoMono, T.__ToTextStyleL());
    },
    get C770() {
      return C[770] = dart.fn(google_fonts.GoogleFonts.robotoSlab, T.__ToTextStyleL());
    },
    get C771() {
      return C[771] = dart.fn(google_fonts.GoogleFonts.rochester, T.__ToTextStyleL());
    },
    get C772() {
      return C[772] = dart.fn(google_fonts.GoogleFonts.rockSalt, T.__ToTextStyleL());
    },
    get C773() {
      return C[773] = dart.fn(google_fonts.GoogleFonts.rokkitt, T.__ToTextStyleL());
    },
    get C774() {
      return C[774] = dart.fn(google_fonts.GoogleFonts.romanesco, T.__ToTextStyleL());
    },
    get C775() {
      return C[775] = dart.fn(google_fonts.GoogleFonts.ropaSans, T.__ToTextStyleL());
    },
    get C776() {
      return C[776] = dart.fn(google_fonts.GoogleFonts.rosario, T.__ToTextStyleL());
    },
    get C777() {
      return C[777] = dart.fn(google_fonts.GoogleFonts.rosarivo, T.__ToTextStyleL());
    },
    get C778() {
      return C[778] = dart.fn(google_fonts.GoogleFonts.rougeScript, T.__ToTextStyleL());
    },
    get C779() {
      return C[779] = dart.fn(google_fonts.GoogleFonts.rozhaOne, T.__ToTextStyleL());
    },
    get C780() {
      return C[780] = dart.fn(google_fonts.GoogleFonts.rubik, T.__ToTextStyleL());
    },
    get C781() {
      return C[781] = dart.fn(google_fonts.GoogleFonts.rubikMonoOne, T.__ToTextStyleL());
    },
    get C782() {
      return C[782] = dart.fn(google_fonts.GoogleFonts.ruda, T.__ToTextStyleL());
    },
    get C783() {
      return C[783] = dart.fn(google_fonts.GoogleFonts.rufina, T.__ToTextStyleL());
    },
    get C784() {
      return C[784] = dart.fn(google_fonts.GoogleFonts.rugeBoogie, T.__ToTextStyleL());
    },
    get C785() {
      return C[785] = dart.fn(google_fonts.GoogleFonts.ruluko, T.__ToTextStyleL());
    },
    get C786() {
      return C[786] = dart.fn(google_fonts.GoogleFonts.rumRaisin, T.__ToTextStyleL());
    },
    get C787() {
      return C[787] = dart.fn(google_fonts.GoogleFonts.ruslanDisplay, T.__ToTextStyleL());
    },
    get C788() {
      return C[788] = dart.fn(google_fonts.GoogleFonts.russoOne, T.__ToTextStyleL());
    },
    get C789() {
      return C[789] = dart.fn(google_fonts.GoogleFonts.ruthie, T.__ToTextStyleL());
    },
    get C790() {
      return C[790] = dart.fn(google_fonts.GoogleFonts.rye, T.__ToTextStyleL());
    },
    get C791() {
      return C[791] = dart.fn(google_fonts.GoogleFonts.sacramento, T.__ToTextStyleL());
    },
    get C792() {
      return C[792] = dart.fn(google_fonts.GoogleFonts.sahitya, T.__ToTextStyleL());
    },
    get C793() {
      return C[793] = dart.fn(google_fonts.GoogleFonts.sail, T.__ToTextStyleL());
    },
    get C794() {
      return C[794] = dart.fn(google_fonts.GoogleFonts.saira, T.__ToTextStyleL());
    },
    get C795() {
      return C[795] = dart.fn(google_fonts.GoogleFonts.sairaCondensed, T.__ToTextStyleL());
    },
    get C796() {
      return C[796] = dart.fn(google_fonts.GoogleFonts.sairaExtraCondensed, T.__ToTextStyleL());
    },
    get C797() {
      return C[797] = dart.fn(google_fonts.GoogleFonts.sairaSemiCondensed, T.__ToTextStyleL());
    },
    get C798() {
      return C[798] = dart.fn(google_fonts.GoogleFonts.sairaStencilOne, T.__ToTextStyleL());
    },
    get C799() {
      return C[799] = dart.fn(google_fonts.GoogleFonts.salsa, T.__ToTextStyleL());
    },
    get C800() {
      return C[800] = dart.fn(google_fonts.GoogleFonts.sanchez, T.__ToTextStyleL());
    },
    get C801() {
      return C[801] = dart.fn(google_fonts.GoogleFonts.sancreek, T.__ToTextStyleL());
    },
    get C802() {
      return C[802] = dart.fn(google_fonts.GoogleFonts.sansita, T.__ToTextStyleL());
    },
    get C803() {
      return C[803] = dart.fn(google_fonts.GoogleFonts.sarabun, T.__ToTextStyleL());
    },
    get C804() {
      return C[804] = dart.fn(google_fonts.GoogleFonts.sarala, T.__ToTextStyleL());
    },
    get C805() {
      return C[805] = dart.fn(google_fonts.GoogleFonts.sarina, T.__ToTextStyleL());
    },
    get C806() {
      return C[806] = dart.fn(google_fonts.GoogleFonts.sarpanch, T.__ToTextStyleL());
    },
    get C807() {
      return C[807] = dart.fn(google_fonts.GoogleFonts.satisfy, T.__ToTextStyleL());
    },
    get C808() {
      return C[808] = dart.fn(google_fonts.GoogleFonts.sawarabiGothic, T.__ToTextStyleL());
    },
    get C809() {
      return C[809] = dart.fn(google_fonts.GoogleFonts.sawarabiMincho, T.__ToTextStyleL());
    },
    get C810() {
      return C[810] = dart.fn(google_fonts.GoogleFonts.scada, T.__ToTextStyleL());
    },
    get C811() {
      return C[811] = dart.fn(google_fonts.GoogleFonts.scheherazade, T.__ToTextStyleL());
    },
    get C812() {
      return C[812] = dart.fn(google_fonts.GoogleFonts.schoolbell, T.__ToTextStyleL());
    },
    get C813() {
      return C[813] = dart.fn(google_fonts.GoogleFonts.scopeOne, T.__ToTextStyleL());
    },
    get C814() {
      return C[814] = dart.fn(google_fonts.GoogleFonts.seaweedScript, T.__ToTextStyleL());
    },
    get C815() {
      return C[815] = dart.fn(google_fonts.GoogleFonts.secularOne, T.__ToTextStyleL());
    },
    get C816() {
      return C[816] = dart.fn(google_fonts.GoogleFonts.sedgwickAve, T.__ToTextStyleL());
    },
    get C817() {
      return C[817] = dart.fn(google_fonts.GoogleFonts.sedgwickAveDisplay, T.__ToTextStyleL());
    },
    get C818() {
      return C[818] = dart.fn(google_fonts.GoogleFonts.sen, T.__ToTextStyleL());
    },
    get C819() {
      return C[819] = dart.fn(google_fonts.GoogleFonts.sevillana, T.__ToTextStyleL());
    },
    get C820() {
      return C[820] = dart.fn(google_fonts.GoogleFonts.seymourOne, T.__ToTextStyleL());
    },
    get C821() {
      return C[821] = dart.fn(google_fonts.GoogleFonts.shadowsIntoLight, T.__ToTextStyleL());
    },
    get C822() {
      return C[822] = dart.fn(google_fonts.GoogleFonts.shadowsIntoLightTwo, T.__ToTextStyleL());
    },
    get C823() {
      return C[823] = dart.fn(google_fonts.GoogleFonts.shanti, T.__ToTextStyleL());
    },
    get C824() {
      return C[824] = dart.fn(google_fonts.GoogleFonts.share, T.__ToTextStyleL());
    },
    get C825() {
      return C[825] = dart.fn(google_fonts.GoogleFonts.shareTech, T.__ToTextStyleL());
    },
    get C826() {
      return C[826] = dart.fn(google_fonts.GoogleFonts.shareTechMono, T.__ToTextStyleL());
    },
    get C827() {
      return C[827] = dart.fn(google_fonts.GoogleFonts.shojumaru, T.__ToTextStyleL());
    },
    get C828() {
      return C[828] = dart.fn(google_fonts.GoogleFonts.shortStack, T.__ToTextStyleL());
    },
    get C829() {
      return C[829] = dart.fn(google_fonts.GoogleFonts.shrikhand, T.__ToTextStyleL());
    },
    get C830() {
      return C[830] = dart.fn(google_fonts.GoogleFonts.sigmarOne, T.__ToTextStyleL());
    },
    get C831() {
      return C[831] = dart.fn(google_fonts.GoogleFonts.signika, T.__ToTextStyleL());
    },
    get C832() {
      return C[832] = dart.fn(google_fonts.GoogleFonts.signikaNegative, T.__ToTextStyleL());
    },
    get C833() {
      return C[833] = dart.fn(google_fonts.GoogleFonts.simonetta, T.__ToTextStyleL());
    },
    get C834() {
      return C[834] = dart.fn(google_fonts.GoogleFonts.singleDay, T.__ToTextStyleL());
    },
    get C835() {
      return C[835] = dart.fn(google_fonts.GoogleFonts.sintony, T.__ToTextStyleL());
    },
    get C836() {
      return C[836] = dart.fn(google_fonts.GoogleFonts.sirinStencil, T.__ToTextStyleL());
    },
    get C837() {
      return C[837] = dart.fn(google_fonts.GoogleFonts.sixCaps, T.__ToTextStyleL());
    },
    get C838() {
      return C[838] = dart.fn(google_fonts.GoogleFonts.skranji, T.__ToTextStyleL());
    },
    get C839() {
      return C[839] = dart.fn(google_fonts.GoogleFonts.slabo13px, T.__ToTextStyleL());
    },
    get C840() {
      return C[840] = dart.fn(google_fonts.GoogleFonts.slabo27px, T.__ToTextStyleL());
    },
    get C841() {
      return C[841] = dart.fn(google_fonts.GoogleFonts.slackey, T.__ToTextStyleL());
    },
    get C842() {
      return C[842] = dart.fn(google_fonts.GoogleFonts.smokum, T.__ToTextStyleL());
    },
    get C843() {
      return C[843] = dart.fn(google_fonts.GoogleFonts.smythe, T.__ToTextStyleL());
    },
    get C844() {
      return C[844] = dart.fn(google_fonts.GoogleFonts.sniglet, T.__ToTextStyleL());
    },
    get C845() {
      return C[845] = dart.fn(google_fonts.GoogleFonts.snippet, T.__ToTextStyleL());
    },
    get C846() {
      return C[846] = dart.fn(google_fonts.GoogleFonts.snowburstOne, T.__ToTextStyleL());
    },
    get C847() {
      return C[847] = dart.fn(google_fonts.GoogleFonts.sofadiOne, T.__ToTextStyleL());
    },
    get C848() {
      return C[848] = dart.fn(google_fonts.GoogleFonts.sofia, T.__ToTextStyleL());
    },
    get C849() {
      return C[849] = dart.fn(google_fonts.GoogleFonts.solway, T.__ToTextStyleL());
    },
    get C850() {
      return C[850] = dart.fn(google_fonts.GoogleFonts.songMyung, T.__ToTextStyleL());
    },
    get C851() {
      return C[851] = dart.fn(google_fonts.GoogleFonts.sonsieOne, T.__ToTextStyleL());
    },
    get C852() {
      return C[852] = dart.fn(google_fonts.GoogleFonts.sortsMillGoudy, T.__ToTextStyleL());
    },
    get C853() {
      return C[853] = dart.fn(google_fonts.GoogleFonts.sourceCodePro, T.__ToTextStyleL());
    },
    get C854() {
      return C[854] = dart.fn(google_fonts.GoogleFonts.sourceSansPro, T.__ToTextStyleL());
    },
    get C855() {
      return C[855] = dart.fn(google_fonts.GoogleFonts.sourceSerifPro, T.__ToTextStyleL());
    },
    get C856() {
      return C[856] = dart.fn(google_fonts.GoogleFonts.spaceMono, T.__ToTextStyleL());
    },
    get C857() {
      return C[857] = dart.fn(google_fonts.GoogleFonts.spartan, T.__ToTextStyleL());
    },
    get C858() {
      return C[858] = dart.fn(google_fonts.GoogleFonts.specialElite, T.__ToTextStyleL());
    },
    get C859() {
      return C[859] = dart.fn(google_fonts.GoogleFonts.spectral, T.__ToTextStyleL());
    },
    get C860() {
      return C[860] = dart.fn(google_fonts.GoogleFonts.spectralSc, T.__ToTextStyleL());
    },
    get C861() {
      return C[861] = dart.fn(google_fonts.GoogleFonts.spicyRice, T.__ToTextStyleL());
    },
    get C862() {
      return C[862] = dart.fn(google_fonts.GoogleFonts.spinnaker, T.__ToTextStyleL());
    },
    get C863() {
      return C[863] = dart.fn(google_fonts.GoogleFonts.spirax, T.__ToTextStyleL());
    },
    get C864() {
      return C[864] = dart.fn(google_fonts.GoogleFonts.squadaOne, T.__ToTextStyleL());
    },
    get C865() {
      return C[865] = dart.fn(google_fonts.GoogleFonts.sreeKrushnadevaraya, T.__ToTextStyleL());
    },
    get C866() {
      return C[866] = dart.fn(google_fonts.GoogleFonts.sriracha, T.__ToTextStyleL());
    },
    get C867() {
      return C[867] = dart.fn(google_fonts.GoogleFonts.srisakdi, T.__ToTextStyleL());
    },
    get C868() {
      return C[868] = dart.fn(google_fonts.GoogleFonts.staatliches, T.__ToTextStyleL());
    },
    get C869() {
      return C[869] = dart.fn(google_fonts.GoogleFonts.stalemate, T.__ToTextStyleL());
    },
    get C870() {
      return C[870] = dart.fn(google_fonts.GoogleFonts.stalinistOne, T.__ToTextStyleL());
    },
    get C871() {
      return C[871] = dart.fn(google_fonts.GoogleFonts.stardosStencil, T.__ToTextStyleL());
    },
    get C872() {
      return C[872] = dart.fn(google_fonts.GoogleFonts.stintUltraCondensed, T.__ToTextStyleL());
    },
    get C873() {
      return C[873] = dart.fn(google_fonts.GoogleFonts.stintUltraExpanded, T.__ToTextStyleL());
    },
    get C874() {
      return C[874] = dart.fn(google_fonts.GoogleFonts.stoke, T.__ToTextStyleL());
    },
    get C875() {
      return C[875] = dart.fn(google_fonts.GoogleFonts.strait, T.__ToTextStyleL());
    },
    get C876() {
      return C[876] = dart.fn(google_fonts.GoogleFonts.stylish, T.__ToTextStyleL());
    },
    get C877() {
      return C[877] = dart.fn(google_fonts.GoogleFonts.sueEllenFrancisco, T.__ToTextStyleL());
    },
    get C878() {
      return C[878] = dart.fn(google_fonts.GoogleFonts.suezOne, T.__ToTextStyleL());
    },
    get C879() {
      return C[879] = dart.fn(google_fonts.GoogleFonts.sulphurPoint, T.__ToTextStyleL());
    },
    get C880() {
      return C[880] = dart.fn(google_fonts.GoogleFonts.sumana, T.__ToTextStyleL());
    },
    get C881() {
      return C[881] = dart.fn(google_fonts.GoogleFonts.sunflower, T.__ToTextStyleL());
    },
    get C882() {
      return C[882] = dart.fn(google_fonts.GoogleFonts.sunshiney, T.__ToTextStyleL());
    },
    get C883() {
      return C[883] = dart.fn(google_fonts.GoogleFonts.supermercadoOne, T.__ToTextStyleL());
    },
    get C884() {
      return C[884] = dart.fn(google_fonts.GoogleFonts.sura, T.__ToTextStyleL());
    },
    get C885() {
      return C[885] = dart.fn(google_fonts.GoogleFonts.suranna, T.__ToTextStyleL());
    },
    get C886() {
      return C[886] = dart.fn(google_fonts.GoogleFonts.suravaram, T.__ToTextStyleL());
    },
    get C887() {
      return C[887] = dart.fn(google_fonts.GoogleFonts.swankyAndMooMoo, T.__ToTextStyleL());
    },
    get C888() {
      return C[888] = dart.fn(google_fonts.GoogleFonts.syncopate, T.__ToTextStyleL());
    },
    get C889() {
      return C[889] = dart.fn(google_fonts.GoogleFonts.tajawal, T.__ToTextStyleL());
    },
    get C890() {
      return C[890] = dart.fn(google_fonts.GoogleFonts.tangerine, T.__ToTextStyleL());
    },
    get C891() {
      return C[891] = dart.fn(google_fonts.GoogleFonts.tauri, T.__ToTextStyleL());
    },
    get C892() {
      return C[892] = dart.fn(google_fonts.GoogleFonts.taviraj, T.__ToTextStyleL());
    },
    get C893() {
      return C[893] = dart.fn(google_fonts.GoogleFonts.teko, T.__ToTextStyleL());
    },
    get C894() {
      return C[894] = dart.fn(google_fonts.GoogleFonts.telex, T.__ToTextStyleL());
    },
    get C895() {
      return C[895] = dart.fn(google_fonts.GoogleFonts.tenaliRamakrishna, T.__ToTextStyleL());
    },
    get C896() {
      return C[896] = dart.fn(google_fonts.GoogleFonts.tenorSans, T.__ToTextStyleL());
    },
    get C897() {
      return C[897] = dart.fn(google_fonts.GoogleFonts.textMeOne, T.__ToTextStyleL());
    },
    get C898() {
      return C[898] = dart.fn(google_fonts.GoogleFonts.thasadith, T.__ToTextStyleL());
    },
    get C899() {
      return C[899] = dart.fn(google_fonts.GoogleFonts.theGirlNextDoor, T.__ToTextStyleL());
    },
    get C900() {
      return C[900] = dart.fn(google_fonts.GoogleFonts.tienne, T.__ToTextStyleL());
    },
    get C901() {
      return C[901] = dart.fn(google_fonts.GoogleFonts.tillana, T.__ToTextStyleL());
    },
    get C902() {
      return C[902] = dart.fn(google_fonts.GoogleFonts.timmana, T.__ToTextStyleL());
    },
    get C903() {
      return C[903] = dart.fn(google_fonts.GoogleFonts.tinos, T.__ToTextStyleL());
    },
    get C904() {
      return C[904] = dart.fn(google_fonts.GoogleFonts.titanOne, T.__ToTextStyleL());
    },
    get C905() {
      return C[905] = dart.fn(google_fonts.GoogleFonts.titilliumWeb, T.__ToTextStyleL());
    },
    get C906() {
      return C[906] = dart.fn(google_fonts.GoogleFonts.tomorrow, T.__ToTextStyleL());
    },
    get C907() {
      return C[907] = dart.fn(google_fonts.GoogleFonts.tradeWinds, T.__ToTextStyleL());
    },
    get C908() {
      return C[908] = dart.fn(google_fonts.GoogleFonts.trirong, T.__ToTextStyleL());
    },
    get C909() {
      return C[909] = dart.fn(google_fonts.GoogleFonts.trocchi, T.__ToTextStyleL());
    },
    get C910() {
      return C[910] = dart.fn(google_fonts.GoogleFonts.trochut, T.__ToTextStyleL());
    },
    get C911() {
      return C[911] = dart.fn(google_fonts.GoogleFonts.trykker, T.__ToTextStyleL());
    },
    get C912() {
      return C[912] = dart.fn(google_fonts.GoogleFonts.tulpenOne, T.__ToTextStyleL());
    },
    get C913() {
      return C[913] = dart.fn(google_fonts.GoogleFonts.turretRoad, T.__ToTextStyleL());
    },
    get C914() {
      return C[914] = dart.fn(google_fonts.GoogleFonts.ubuntu, T.__ToTextStyleL());
    },
    get C915() {
      return C[915] = dart.fn(google_fonts.GoogleFonts.ubuntuCondensed, T.__ToTextStyleL());
    },
    get C916() {
      return C[916] = dart.fn(google_fonts.GoogleFonts.ubuntuMono, T.__ToTextStyleL());
    },
    get C917() {
      return C[917] = dart.fn(google_fonts.GoogleFonts.ultra, T.__ToTextStyleL());
    },
    get C918() {
      return C[918] = dart.fn(google_fonts.GoogleFonts.uncialAntiqua, T.__ToTextStyleL());
    },
    get C919() {
      return C[919] = dart.fn(google_fonts.GoogleFonts.underdog, T.__ToTextStyleL());
    },
    get C920() {
      return C[920] = dart.fn(google_fonts.GoogleFonts.unicaOne, T.__ToTextStyleL());
    },
    get C921() {
      return C[921] = dart.fn(google_fonts.GoogleFonts.unifrakturCook, T.__ToTextStyleL());
    },
    get C922() {
      return C[922] = dart.fn(google_fonts.GoogleFonts.unifrakturMaguntia, T.__ToTextStyleL());
    },
    get C923() {
      return C[923] = dart.fn(google_fonts.GoogleFonts.unkempt, T.__ToTextStyleL());
    },
    get C924() {
      return C[924] = dart.fn(google_fonts.GoogleFonts.unlock, T.__ToTextStyleL());
    },
    get C925() {
      return C[925] = dart.fn(google_fonts.GoogleFonts.unna, T.__ToTextStyleL());
    },
    get C926() {
      return C[926] = dart.fn(google_fonts.GoogleFonts.vt323, T.__ToTextStyleL());
    },
    get C927() {
      return C[927] = dart.fn(google_fonts.GoogleFonts.vampiroOne, T.__ToTextStyleL());
    },
    get C928() {
      return C[928] = dart.fn(google_fonts.GoogleFonts.varela, T.__ToTextStyleL());
    },
    get C929() {
      return C[929] = dart.fn(google_fonts.GoogleFonts.varelaRound, T.__ToTextStyleL());
    },
    get C930() {
      return C[930] = dart.fn(google_fonts.GoogleFonts.vastShadow, T.__ToTextStyleL());
    },
    get C931() {
      return C[931] = dart.fn(google_fonts.GoogleFonts.vesperLibre, T.__ToTextStyleL());
    },
    get C932() {
      return C[932] = dart.fn(google_fonts.GoogleFonts.viaodaLibre, T.__ToTextStyleL());
    },
    get C933() {
      return C[933] = dart.fn(google_fonts.GoogleFonts.vibes, T.__ToTextStyleL());
    },
    get C934() {
      return C[934] = dart.fn(google_fonts.GoogleFonts.vibur, T.__ToTextStyleL());
    },
    get C935() {
      return C[935] = dart.fn(google_fonts.GoogleFonts.vidaloka, T.__ToTextStyleL());
    },
    get C936() {
      return C[936] = dart.fn(google_fonts.GoogleFonts.viga, T.__ToTextStyleL());
    },
    get C937() {
      return C[937] = dart.fn(google_fonts.GoogleFonts.voces, T.__ToTextStyleL());
    },
    get C938() {
      return C[938] = dart.fn(google_fonts.GoogleFonts.volkhov, T.__ToTextStyleL());
    },
    get C939() {
      return C[939] = dart.fn(google_fonts.GoogleFonts.vollkorn, T.__ToTextStyleL());
    },
    get C940() {
      return C[940] = dart.fn(google_fonts.GoogleFonts.vollkornSc, T.__ToTextStyleL());
    },
    get C941() {
      return C[941] = dart.fn(google_fonts.GoogleFonts.voltaire, T.__ToTextStyleL());
    },
    get C942() {
      return C[942] = dart.fn(google_fonts.GoogleFonts.waitingForTheSunrise, T.__ToTextStyleL());
    },
    get C943() {
      return C[943] = dart.fn(google_fonts.GoogleFonts.wallpoet, T.__ToTextStyleL());
    },
    get C944() {
      return C[944] = dart.fn(google_fonts.GoogleFonts.walterTurncoat, T.__ToTextStyleL());
    },
    get C945() {
      return C[945] = dart.fn(google_fonts.GoogleFonts.warnes, T.__ToTextStyleL());
    },
    get C946() {
      return C[946] = dart.fn(google_fonts.GoogleFonts.wellfleet, T.__ToTextStyleL());
    },
    get C947() {
      return C[947] = dart.fn(google_fonts.GoogleFonts.wendyOne, T.__ToTextStyleL());
    },
    get C948() {
      return C[948] = dart.fn(google_fonts.GoogleFonts.wireOne, T.__ToTextStyleL());
    },
    get C949() {
      return C[949] = dart.fn(google_fonts.GoogleFonts.workSans, T.__ToTextStyleL());
    },
    get C950() {
      return C[950] = dart.fn(google_fonts.GoogleFonts.yanoneKaffeesatz, T.__ToTextStyleL());
    },
    get C951() {
      return C[951] = dart.fn(google_fonts.GoogleFonts.yantramanav, T.__ToTextStyleL());
    },
    get C952() {
      return C[952] = dart.fn(google_fonts.GoogleFonts.yatraOne, T.__ToTextStyleL());
    },
    get C953() {
      return C[953] = dart.fn(google_fonts.GoogleFonts.yellowtail, T.__ToTextStyleL());
    },
    get C954() {
      return C[954] = dart.fn(google_fonts.GoogleFonts.yeonSung, T.__ToTextStyleL());
    },
    get C955() {
      return C[955] = dart.fn(google_fonts.GoogleFonts.yesevaOne, T.__ToTextStyleL());
    },
    get C956() {
      return C[956] = dart.fn(google_fonts.GoogleFonts.yesteryear, T.__ToTextStyleL());
    },
    get C957() {
      return C[957] = dart.fn(google_fonts.GoogleFonts.yrsa, T.__ToTextStyleL());
    },
    get C958() {
      return C[958] = dart.fn(google_fonts.GoogleFonts.zcoolKuaiLe, T.__ToTextStyleL());
    },
    get C959() {
      return C[959] = dart.fn(google_fonts.GoogleFonts.zcoolQingKeHuangYou, T.__ToTextStyleL());
    },
    get C960() {
      return C[960] = dart.fn(google_fonts.GoogleFonts.zcoolXiaoWei, T.__ToTextStyleL());
    },
    get C961() {
      return C[961] = dart.fn(google_fonts.GoogleFonts.zeyada, T.__ToTextStyleL());
    },
    get C962() {
      return C[962] = dart.fn(google_fonts.GoogleFonts.zhiMangXing, T.__ToTextStyleL());
    },
    get C963() {
      return C[963] = dart.fn(google_fonts.GoogleFonts.zillaSlab, T.__ToTextStyleL());
    },
    get C964() {
      return C[964] = dart.fn(google_fonts.GoogleFonts.zillaSlabHighlight, T.__ToTextStyleL());
    },
    get C0() {
      return C[0] = dart.constMap(T.StringL(), T.__ToLTextStyleL(), ["ABeeZee", C[1] || CT.C1, "Abel", C[2] || CT.C2, "Abhaya Libre", C[3] || CT.C3, "Abril Fatface", C[4] || CT.C4, "Aclonica", C[5] || CT.C5, "Acme", C[6] || CT.C6, "Actor", C[7] || CT.C7, "Adamina", C[8] || CT.C8, "Advent Pro", C[9] || CT.C9, "Aguafina Script", C[10] || CT.C10, "Akronim", C[11] || CT.C11, "Aladin", C[12] || CT.C12, "Alata", C[13] || CT.C13, "Alatsi", C[14] || CT.C14, "Aldrich", C[15] || CT.C15, "Alef", C[16] || CT.C16, "Alegreya", C[17] || CT.C17, "Alegreya SC", C[18] || CT.C18, "Alegreya Sans", C[19] || CT.C19, "Alegreya Sans SC", C[20] || CT.C20, "Aleo", C[21] || CT.C21, "Alex Brush", C[22] || CT.C22, "Alfa Slab One", C[23] || CT.C23, "Alice", C[24] || CT.C24, "Alike", C[25] || CT.C25, "Alike Angular", C[26] || CT.C26, "Allan", C[27] || CT.C27, "Allerta", C[28] || CT.C28, "Allerta Stencil", C[29] || CT.C29, "Allura", C[30] || CT.C30, "Almarai", C[31] || CT.C31, "Almendra", C[32] || CT.C32, "Almendra Display", C[33] || CT.C33, "Almendra SC", C[34] || CT.C34, "Amarante", C[35] || CT.C35, "Amaranth", C[36] || CT.C36, "Amatic SC", C[37] || CT.C37, "Amatica SC", C[38] || CT.C38, "Amethysta", C[39] || CT.C39, "Amiko", C[40] || CT.C40, "Amiri", C[41] || CT.C41, "Amita", C[42] || CT.C42, "Anaheim", C[43] || CT.C43, "Andada", C[44] || CT.C44, "Andika", C[45] || CT.C45, "Annie Use Your Telescope", C[46] || CT.C46, "Anonymous Pro", C[47] || CT.C47, "Antic", C[48] || CT.C48, "Antic Didone", C[49] || CT.C49, "Antic Slab", C[50] || CT.C50, "Anton", C[51] || CT.C51, "Arapey", C[52] || CT.C52, "Arbutus", C[53] || CT.C53, "Arbutus Slab", C[54] || CT.C54, "Architects Daughter", C[55] || CT.C55, "Archivo", C[56] || CT.C56, "Archivo Black", C[57] || CT.C57, "Archivo Narrow", C[58] || CT.C58, "Aref Ruqaa", C[59] || CT.C59, "Arima Madurai", C[60] || CT.C60, "Arimo", C[61] || CT.C61, "Arizonia", C[62] || CT.C62, "Armata", C[63] || CT.C63, "Arsenal", C[64] || CT.C64, "Artifika", C[65] || CT.C65, "Arvo", C[66] || CT.C66, "Arya", C[67] || CT.C67, "Asap", C[68] || CT.C68, "Asar", C[69] || CT.C69, "Asset", C[70] || CT.C70, "Assistant", C[71] || CT.C71, "Astloch", C[72] || CT.C72, "Asul", C[73] || CT.C73, "Athiti", C[74] || CT.C74, "Atma", C[75] || CT.C75, "Atomic Age", C[76] || CT.C76, "Aubrey", C[77] || CT.C77, "Audiowide", C[78] || CT.C78, "Autour One", C[79] || CT.C79, "Average", C[80] || CT.C80, "Average Sans", C[81] || CT.C81, "Averia Gruesa Libre", C[82] || CT.C82, "Averia Libre", C[83] || CT.C83, "Averia Sans Libre", C[84] || CT.C84, "Averia Serif Libre", C[85] || CT.C85, "B612", C[86] || CT.C86, "B612 Mono", C[87] || CT.C87, "Bad Script", C[88] || CT.C88, "Bahiana", C[89] || CT.C89, "Bahianita", C[90] || CT.C90, "Bai Jamjuree", C[91] || CT.C91, "Baloo", C[92] || CT.C92, "Baloo Bhai", C[93] || CT.C93, "Baloo Bhaijaan", C[94] || CT.C94, "Baloo Bhaina", C[95] || CT.C95, "Baloo Chettan", C[96] || CT.C96, "Baloo Da", C[97] || CT.C97, "Baloo Paaji", C[98] || CT.C98, "Baloo Tamma", C[99] || CT.C99, "Baloo Tammudu", C[100] || CT.C100, "Baloo Thambi", C[101] || CT.C101, "Balthazar", C[102] || CT.C102, "Bangers", C[103] || CT.C103, "Barlow", C[104] || CT.C104, "Barlow Condensed", C[105] || CT.C105, "Barlow Semi Condensed", C[106] || CT.C106, "Barriecito", C[107] || CT.C107, "Barrio", C[108] || CT.C108, "Basic", C[109] || CT.C109, "Baskervville", C[110] || CT.C110, "Baumans", C[111] || CT.C111, "Be Vietnam", C[112] || CT.C112, "Bebas Neue", C[113] || CT.C113, "Belgrano", C[114] || CT.C114, "Bellefair", C[115] || CT.C115, "Belleza", C[116] || CT.C116, "Bellota", C[117] || CT.C117, "Bellota Text", C[118] || CT.C118, "BenchNine", C[119] || CT.C119, "Bentham", C[120] || CT.C120, "Berkshire Swash", C[121] || CT.C121, "Beth Ellen", C[122] || CT.C122, "Bevan", C[123] || CT.C123, "Big Shoulders Display", C[124] || CT.C124, "Big Shoulders Text", C[125] || CT.C125, "Bigelow Rules", C[126] || CT.C126, "Bigshot One", C[127] || CT.C127, "Bilbo", C[128] || CT.C128, "Bilbo Swash Caps", C[129] || CT.C129, "BioRhyme", C[130] || CT.C130, "BioRhyme Expanded", C[131] || CT.C131, "Biryani", C[132] || CT.C132, "Bitter", C[133] || CT.C133, "Black And White Picture", C[134] || CT.C134, "Black Han Sans", C[135] || CT.C135, "Black Ops One", C[136] || CT.C136, "Blinker", C[137] || CT.C137, "Bonbon", C[138] || CT.C138, "Boogaloo", C[139] || CT.C139, "Bowlby One", C[140] || CT.C140, "Bowlby One SC", C[141] || CT.C141, "Brawler", C[142] || CT.C142, "Bree Serif", C[143] || CT.C143, "Bubblegum Sans", C[144] || CT.C144, "Bubbler One", C[145] || CT.C145, "Buda", C[146] || CT.C146, "Buenard", C[147] || CT.C147, "Bungee", C[148] || CT.C148, "Bungee Hairline", C[149] || CT.C149, "Bungee Inline", C[150] || CT.C150, "Bungee Outline", C[151] || CT.C151, "Bungee Shade", C[152] || CT.C152, "Butcherman", C[153] || CT.C153, "Butterfly Kids", C[154] || CT.C154, "Cabin", C[155] || CT.C155, "Cabin Condensed", C[156] || CT.C156, "Cabin Sketch", C[157] || CT.C157, "Caesar Dressing", C[158] || CT.C158, "Cagliostro", C[159] || CT.C159, "Cairo", C[160] || CT.C160, "Caladea", C[161] || CT.C161, "Calistoga", C[162] || CT.C162, "Calligraffitti", C[163] || CT.C163, "Cambay", C[164] || CT.C164, "Cambo", C[165] || CT.C165, "Candal", C[166] || CT.C166, "Cantarell", C[167] || CT.C167, "Cantata One", C[168] || CT.C168, "Cantora One", C[169] || CT.C169, "Capriola", C[170] || CT.C170, "Cardo", C[171] || CT.C171, "Carme", C[172] || CT.C172, "Carrois Gothic", C[173] || CT.C173, "Carrois Gothic SC", C[174] || CT.C174, "Carter One", C[175] || CT.C175, "Catamaran", C[176] || CT.C176, "Caudex", C[177] || CT.C177, "Caveat", C[178] || CT.C178, "Caveat Brush", C[179] || CT.C179, "Cedarville Cursive", C[180] || CT.C180, "Ceviche One", C[181] || CT.C181, "Chakra Petch", C[182] || CT.C182, "Changa", C[183] || CT.C183, "Changa One", C[184] || CT.C184, "Chango", C[185] || CT.C185, "Charm", C[186] || CT.C186, "Charmonman", C[187] || CT.C187, "Chathura", C[188] || CT.C188, "Chau Philomene One", C[189] || CT.C189, "Chela One", C[190] || CT.C190, "Chelsea Market", C[191] || CT.C191, "Cherry Cream Soda", C[192] || CT.C192, "Cherry Swash", C[193] || CT.C193, "Chewy", C[194] || CT.C194, "Chicle", C[195] || CT.C195, "Chilanka", C[196] || CT.C196, "Chivo", C[197] || CT.C197, "Chonburi", C[198] || CT.C198, "Cinzel", C[199] || CT.C199, "Cinzel Decorative", C[200] || CT.C200, "Clicker Script", C[201] || CT.C201, "Coda", C[202] || CT.C202, "Coda Caption", C[203] || CT.C203, "Codystar", C[204] || CT.C204, "Coiny", C[205] || CT.C205, "Combo", C[206] || CT.C206, "Comfortaa", C[207] || CT.C207, "Comic Neue", C[208] || CT.C208, "Coming Soon", C[209] || CT.C209, "Concert One", C[210] || CT.C210, "Condiment", C[211] || CT.C211, "Contrail One", C[212] || CT.C212, "Convergence", C[213] || CT.C213, "Cookie", C[214] || CT.C214, "Copse", C[215] || CT.C215, "Corben", C[216] || CT.C216, "Cormorant", C[217] || CT.C217, "Cormorant Garamond", C[218] || CT.C218, "Cormorant Infant", C[219] || CT.C219, "Cormorant SC", C[220] || CT.C220, "Cormorant Unicase", C[221] || CT.C221, "Cormorant Upright", C[222] || CT.C222, "Courgette", C[223] || CT.C223, "Courier Prime", C[224] || CT.C224, "Cousine", C[225] || CT.C225, "Coustard", C[226] || CT.C226, "Covered By Your Grace", C[227] || CT.C227, "Crafty Girls", C[228] || CT.C228, "Creepster", C[229] || CT.C229, "Crete Round", C[230] || CT.C230, "Crimson Pro", C[231] || CT.C231, "Crimson Text", C[232] || CT.C232, "Croissant One", C[233] || CT.C233, "Crushed", C[234] || CT.C234, "Cuprum", C[235] || CT.C235, "Cute Font", C[236] || CT.C236, "Cutive", C[237] || CT.C237, "Cutive Mono", C[238] || CT.C238, "DM Sans", C[239] || CT.C239, "DM Serif Display", C[240] || CT.C240, "DM Serif Text", C[241] || CT.C241, "Damion", C[242] || CT.C242, "Dancing Script", C[243] || CT.C243, "Darker Grotesque", C[244] || CT.C244, "David Libre", C[245] || CT.C245, "Dawning of a New Day", C[246] || CT.C246, "Days One", C[247] || CT.C247, "Dekko", C[248] || CT.C248, "Delius", C[249] || CT.C249, "Delius Swash Caps", C[250] || CT.C250, "Delius Unicase", C[251] || CT.C251, "Della Respira", C[252] || CT.C252, "Denk One", C[253] || CT.C253, "Devonshire", C[254] || CT.C254, "Dhurjati", C[255] || CT.C255, "Didact Gothic", C[256] || CT.C256, "Diplomata", C[257] || CT.C257, "Diplomata SC", C[258] || CT.C258, "Do Hyeon", C[259] || CT.C259, "Dokdo", C[260] || CT.C260, "Domine", C[261] || CT.C261, "Donegal One", C[262] || CT.C262, "Doppio One", C[263] || CT.C263, "Dorsa", C[264] || CT.C264, "Dosis", C[265] || CT.C265, "Dr Sugiyama", C[266] || CT.C266, "Droid Sans", C[267] || CT.C267, "Droid Sans Mono", C[268] || CT.C268, "Droid Serif", C[269] || CT.C269, "Duru Sans", C[270] || CT.C270, "Dynalight", C[271] || CT.C271, "EB Garamond", C[272] || CT.C272, "Eagle Lake", C[273] || CT.C273, "East Sea Dokdo", C[274] || CT.C274, "Eater", C[275] || CT.C275, "Economica", C[276] || CT.C276, "Eczar", C[277] || CT.C277, "El Messiri", C[278] || CT.C278, "Electrolize", C[279] || CT.C279, "Elsie", C[280] || CT.C280, "Elsie Swash Caps", C[281] || CT.C281, "Emblema One", C[282] || CT.C282, "Emilys Candy", C[283] || CT.C283, "Encode Sans", C[284] || CT.C284, "Encode Sans Condensed", C[285] || CT.C285, "Encode Sans Expanded", C[286] || CT.C286, "Encode Sans Semi Condensed", C[287] || CT.C287, "Encode Sans Semi Expanded", C[288] || CT.C288, "Engagement", C[289] || CT.C289, "Englebert", C[290] || CT.C290, "Enriqueta", C[291] || CT.C291, "Erica One", C[292] || CT.C292, "Esteban", C[293] || CT.C293, "Euphoria Script", C[294] || CT.C294, "Ewert", C[295] || CT.C295, "Exo", C[296] || CT.C296, "Exo 2", C[297] || CT.C297, "Expletus Sans", C[298] || CT.C298, "Fahkwang", C[299] || CT.C299, "Fanwood Text", C[300] || CT.C300, "Farro", C[301] || CT.C301, "Farsan", C[302] || CT.C302, "Fascinate", C[303] || CT.C303, "Fascinate Inline", C[304] || CT.C304, "Faster One", C[305] || CT.C305, "Fauna One", C[306] || CT.C306, "Faustina", C[307] || CT.C307, "Federant", C[308] || CT.C308, "Federo", C[309] || CT.C309, "Felipa", C[310] || CT.C310, "Fenix", C[311] || CT.C311, "Finger Paint", C[312] || CT.C312, "Fira Code", C[313] || CT.C313, "Fira Mono", C[314] || CT.C314, "Fira Sans", C[315] || CT.C315, "Fira Sans Condensed", C[316] || CT.C316, "Fira Sans Extra Condensed", C[317] || CT.C317, "Fjalla One", C[318] || CT.C318, "Fjord One", C[319] || CT.C319, "Flamenco", C[320] || CT.C320, "Flavors", C[321] || CT.C321, "Fondamento", C[322] || CT.C322, "Fontdiner Swanky", C[323] || CT.C323, "Forum", C[324] || CT.C324, "Francois One", C[325] || CT.C325, "Frank Ruhl Libre", C[326] || CT.C326, "Freckle Face", C[327] || CT.C327, "Fredericka the Great", C[328] || CT.C328, "Fredoka One", C[329] || CT.C329, "Fresca", C[330] || CT.C330, "Frijole", C[331] || CT.C331, "Fruktur", C[332] || CT.C332, "Fugaz One", C[333] || CT.C333, "GFS Didot", C[334] || CT.C334, "GFS Neohellenic", C[335] || CT.C335, "Gabriela", C[336] || CT.C336, "Gaegu", C[337] || CT.C337, "Gafata", C[338] || CT.C338, "Galada", C[339] || CT.C339, "Galdeano", C[340] || CT.C340, "Galindo", C[341] || CT.C341, "Gamja Flower", C[342] || CT.C342, "Gayathri", C[343] || CT.C343, "Gelasio", C[344] || CT.C344, "Gentium Basic", C[345] || CT.C345, "Gentium Book Basic", C[346] || CT.C346, "Geo", C[347] || CT.C347, "Geostar", C[348] || CT.C348, "Geostar Fill", C[349] || CT.C349, "Germania One", C[350] || CT.C350, "Gidugu", C[351] || CT.C351, "Gilda Display", C[352] || CT.C352, "Girassol", C[353] || CT.C353, "Give You Glory", C[354] || CT.C354, "Glass Antiqua", C[355] || CT.C355, "Glegoo", C[356] || CT.C356, "Gloria Hallelujah", C[357] || CT.C357, "Goblin One", C[358] || CT.C358, "Gochi Hand", C[359] || CT.C359, "Gorditas", C[360] || CT.C360, "Gothic A1", C[361] || CT.C361, "Gotu", C[362] || CT.C362, "Goudy Bookletter 1911", C[363] || CT.C363, "Graduate", C[364] || CT.C364, "Grand Hotel", C[365] || CT.C365, "Gravitas One", C[366] || CT.C366, "Great Vibes", C[367] || CT.C367, "Grenze", C[368] || CT.C368, "Griffy", C[369] || CT.C369, "Gruppo", C[370] || CT.C370, "Gudea", C[371] || CT.C371, "Gugi", C[372] || CT.C372, "Gupter", C[373] || CT.C373, "Gurajada", C[374] || CT.C374, "Habibi", C[375] || CT.C375, "Halant", C[376] || CT.C376, "Hammersmith One", C[377] || CT.C377, "Hanalei", C[378] || CT.C378, "Hanalei Fill", C[379] || CT.C379, "Handlee", C[380] || CT.C380, "Happy Monkey", C[381] || CT.C381, "Harmattan", C[382] || CT.C382, "Headland One", C[383] || CT.C383, "Heebo", C[384] || CT.C384, "Henny Penny", C[385] || CT.C385, "Hepta Slab", C[386] || CT.C386, "Herr Von Muellerhoff", C[387] || CT.C387, "Hi Melody", C[388] || CT.C388, "Hind", C[389] || CT.C389, "Hind Guntur", C[390] || CT.C390, "Hind Madurai", C[391] || CT.C391, "Hind Siliguri", C[392] || CT.C392, "Hind Vadodara", C[393] || CT.C393, "Holtwood One SC", C[394] || CT.C394, "Homemade Apple", C[395] || CT.C395, "Homenaje", C[396] || CT.C396, "IBM Plex Mono", C[397] || CT.C397, "IBM Plex Sans", C[398] || CT.C398, "IBM Plex Sans Condensed", C[399] || CT.C399, "IBM Plex Serif", C[400] || CT.C400, "IM Fell DW Pica", C[401] || CT.C401, "IM Fell DW Pica SC", C[402] || CT.C402, "IM Fell Double Pica", C[403] || CT.C403, "IM Fell Double Pica SC", C[404] || CT.C404, "IM Fell English", C[405] || CT.C405, "IM Fell English SC", C[406] || CT.C406, "IM Fell French Canon", C[407] || CT.C407, "IM Fell French Canon SC", C[408] || CT.C408, "IM Fell Great Primer", C[409] || CT.C409, "IM Fell Great Primer SC", C[410] || CT.C410, "Ibarra Real Nova", C[411] || CT.C411, "Iceberg", C[412] || CT.C412, "Iceland", C[413] || CT.C413, "Imprima", C[414] || CT.C414, "Inconsolata", C[415] || CT.C415, "Inder", C[416] || CT.C416, "Indie Flower", C[417] || CT.C417, "Inika", C[418] || CT.C418, "Inknut Antiqua", C[419] || CT.C419, "Inria Sans", C[420] || CT.C420, "Inria Serif", C[421] || CT.C421, "Inter", C[422] || CT.C422, "Irish Grover", C[423] || CT.C423, "Istok Web", C[424] || CT.C424, "Italiana", C[425] || CT.C425, "Italianno", C[426] || CT.C426, "Itim", C[427] || CT.C427, "Jacques Francois", C[428] || CT.C428, "Jacques Francois Shadow", C[429] || CT.C429, "Jaldi", C[430] || CT.C430, "Jim Nightshade", C[431] || CT.C431, "Jockey One", C[432] || CT.C432, "Jolly Lodger", C[433] || CT.C433, "Jomhuria", C[434] || CT.C434, "Jomolhari", C[435] || CT.C435, "Josefin Sans", C[436] || CT.C436, "Josefin Slab", C[437] || CT.C437, "Joti One", C[438] || CT.C438, "Jua", C[439] || CT.C439, "Judson", C[440] || CT.C440, "Julee", C[441] || CT.C441, "Julius Sans One", C[442] || CT.C442, "Junge", C[443] || CT.C443, "Jura", C[444] || CT.C444, "Just Another Hand", C[445] || CT.C445, "Just Me Again Down Here", C[446] || CT.C446, "K2D", C[447] || CT.C447, "Kadwa", C[448] || CT.C448, "Kalam", C[449] || CT.C449, "Kameron", C[450] || CT.C450, "Kanit", C[451] || CT.C451, "Kantumruy", C[452] || CT.C452, "Karla", C[453] || CT.C453, "Karma", C[454] || CT.C454, "Katibeh", C[455] || CT.C455, "Kaushan Script", C[456] || CT.C456, "Kavivanar", C[457] || CT.C457, "Kavoon", C[458] || CT.C458, "Kdam Thmor", C[459] || CT.C459, "Keania One", C[460] || CT.C460, "Kelly Slab", C[461] || CT.C461, "Kenia", C[462] || CT.C462, "Khand", C[463] || CT.C463, "Khula", C[464] || CT.C464, "Kirang Haerang", C[465] || CT.C465, "Kite One", C[466] || CT.C466, "Knewave", C[467] || CT.C467, "KoHo", C[468] || CT.C468, "Kodchasan", C[469] || CT.C469, "Kosugi", C[470] || CT.C470, "Kosugi Maru", C[471] || CT.C471, "Kotta One", C[472] || CT.C472, "Kranky", C[473] || CT.C473, "Kreon", C[474] || CT.C474, "Kristi", C[475] || CT.C475, "Krona One", C[476] || CT.C476, "Krub", C[477] || CT.C477, "Kulim Park", C[478] || CT.C478, "Kumar One", C[479] || CT.C479, "Kumar One Outline", C[480] || CT.C480, "Kurale", C[481] || CT.C481, "La Belle Aurore", C[482] || CT.C482, "Lacquer", C[483] || CT.C483, "Laila", C[484] || CT.C484, "Lakki Reddy", C[485] || CT.C485, "Lalezar", C[486] || CT.C486, "Lancelot", C[487] || CT.C487, "Lateef", C[488] || CT.C488, "Lato", C[489] || CT.C489, "League Script", C[490] || CT.C490, "Leckerli One", C[491] || CT.C491, "Ledger", C[492] || CT.C492, "Lekton", C[493] || CT.C493, "Lemon", C[494] || CT.C494, "Lemonada", C[495] || CT.C495, "Lexend Deca", C[496] || CT.C496, "Lexend Exa", C[497] || CT.C497, "Lexend Giga", C[498] || CT.C498, "Lexend Mega", C[499] || CT.C499, "Lexend Peta", C[500] || CT.C500, "Lexend Tera", C[501] || CT.C501, "Lexend Zetta", C[502] || CT.C502, "Libre Barcode 128", C[503] || CT.C503, "Libre Barcode 128 Text", C[504] || CT.C504, "Libre Barcode 39", C[505] || CT.C505, "Libre Barcode 39 Extended", C[506] || CT.C506, "Libre Barcode 39 Extended Text", C[507] || CT.C507, "Libre Barcode 39 Text", C[508] || CT.C508, "Libre Baskerville", C[509] || CT.C509, "Libre Caslon Display", C[510] || CT.C510, "Libre Caslon Text", C[511] || CT.C511, "Libre Franklin", C[512] || CT.C512, "Life Savers", C[513] || CT.C513, "Lilita One", C[514] || CT.C514, "Lily Script One", C[515] || CT.C515, "Limelight", C[516] || CT.C516, "Linden Hill", C[517] || CT.C517, "Literata", C[518] || CT.C518, "Liu Jian Mao Cao", C[519] || CT.C519, "Livvic", C[520] || CT.C520, "Lobster", C[521] || CT.C521, "Lobster Two", C[522] || CT.C522, "Londrina Outline", C[523] || CT.C523, "Londrina Shadow", C[524] || CT.C524, "Londrina Sketch", C[525] || CT.C525, "Londrina Solid", C[526] || CT.C526, "Long Cang", C[527] || CT.C527, "Lora", C[528] || CT.C528, "Love Ya Like A Sister", C[529] || CT.C529, "Loved by the King", C[530] || CT.C530, "Lovers Quarrel", C[531] || CT.C531, "Luckiest Guy", C[532] || CT.C532, "Lusitana", C[533] || CT.C533, "Lustria", C[534] || CT.C534, "M PLUS 1p", C[535] || CT.C535, "M PLUS Rounded 1c", C[536] || CT.C536, "Ma Shan Zheng", C[537] || CT.C537, "Macondo", C[538] || CT.C538, "Macondo Swash Caps", C[539] || CT.C539, "Mada", C[540] || CT.C540, "Magra", C[541] || CT.C541, "Maiden Orange", C[542] || CT.C542, "Maitree", C[543] || CT.C543, "Major Mono Display", C[544] || CT.C544, "Mako", C[545] || CT.C545, "Mali", C[546] || CT.C546, "Mallanna", C[547] || CT.C547, "Mandali", C[548] || CT.C548, "Manjari", C[549] || CT.C549, "Manrope", C[550] || CT.C550, "Mansalva", C[551] || CT.C551, "Manuale", C[552] || CT.C552, "Marcellus", C[553] || CT.C553, "Marcellus SC", C[554] || CT.C554, "Marck Script", C[555] || CT.C555, "Margarine", C[556] || CT.C556, "Markazi Text", C[557] || CT.C557, "Marko One", C[558] || CT.C558, "Marmelad", C[559] || CT.C559, "Martel", C[560] || CT.C560, "Martel Sans", C[561] || CT.C561, "Marvel", C[562] || CT.C562, "Mate", C[563] || CT.C563, "Mate SC", C[564] || CT.C564, "Maven Pro", C[565] || CT.C565, "McLaren", C[566] || CT.C566, "Meddon", C[567] || CT.C567, "MedievalSharp", C[568] || CT.C568, "Medula One", C[569] || CT.C569, "Meera Inimai", C[570] || CT.C570, "Megrim", C[571] || CT.C571, "Meie Script", C[572] || CT.C572, "Merienda", C[573] || CT.C573, "Merienda One", C[574] || CT.C574, "Merriweather", C[575] || CT.C575, "Merriweather Sans", C[576] || CT.C576, "Metal Mania", C[577] || CT.C577, "Metamorphous", C[578] || CT.C578, "Metrophobic", C[579] || CT.C579, "Michroma", C[580] || CT.C580, "Milonga", C[581] || CT.C581, "Miltonian", C[582] || CT.C582, "Miltonian Tattoo", C[583] || CT.C583, "Mina", C[584] || CT.C584, "Miniver", C[585] || CT.C585, "Miriam Libre", C[586] || CT.C586, "Mirza", C[587] || CT.C587, "Miss Fajardose", C[588] || CT.C588, "Mitr", C[589] || CT.C589, "Modak", C[590] || CT.C590, "Modern Antiqua", C[591] || CT.C591, "Mogra", C[592] || CT.C592, "Molengo", C[593] || CT.C593, "Molle", C[594] || CT.C594, "Monda", C[595] || CT.C595, "Monofett", C[596] || CT.C596, "Monoton", C[597] || CT.C597, "Monsieur La Doulaise", C[598] || CT.C598, "Montaga", C[599] || CT.C599, "Montez", C[600] || CT.C600, "Montserrat", C[601] || CT.C601, "Montserrat Alternates", C[602] || CT.C602, "Montserrat Subrayada", C[603] || CT.C603, "Mountains of Christmas", C[604] || CT.C604, "Mouse Memoirs", C[605] || CT.C605, "Mr Bedfort", C[606] || CT.C606, "Mr Dafoe", C[607] || CT.C607, "Mr De Haviland", C[608] || CT.C608, "Mrs Saint Delafield", C[609] || CT.C609, "Mrs Sheppards", C[610] || CT.C610, "Mukta", C[611] || CT.C611, "Mukta Mahee", C[612] || CT.C612, "Mukta Malar", C[613] || CT.C613, "Mukta Vaani", C[614] || CT.C614, "Muli", C[615] || CT.C615, "Mystery Quest", C[616] || CT.C616, "NTR", C[617] || CT.C617, "Nanum Brush Script", C[618] || CT.C618, "Nanum Gothic", C[619] || CT.C619, "Nanum Gothic Coding", C[620] || CT.C620, "Nanum Myeongjo", C[621] || CT.C621, "Nanum Pen Script", C[622] || CT.C622, "Neucha", C[623] || CT.C623, "Neuton", C[624] || CT.C624, "New Rocker", C[625] || CT.C625, "News Cycle", C[626] || CT.C626, "Niconne", C[627] || CT.C627, "Niramit", C[628] || CT.C628, "Nixie One", C[629] || CT.C629, "Nobile", C[630] || CT.C630, "Norican", C[631] || CT.C631, "Nosifer", C[632] || CT.C632, "Notable", C[633] || CT.C633, "Nothing You Could Do", C[634] || CT.C634, "Noticia Text", C[635] || CT.C635, "Noto Color Emoji Compat", C[636] || CT.C636, "Noto Sans", C[637] || CT.C637, "Noto Serif", C[638] || CT.C638, "Nova Cut", C[639] || CT.C639, "Nova Flat", C[640] || CT.C640, "Nova Mono", C[641] || CT.C641, "Nova Oval", C[642] || CT.C642, "Nova Round", C[643] || CT.C643, "Nova Script", C[644] || CT.C644, "Nova Slim", C[645] || CT.C645, "Nova Square", C[646] || CT.C646, "Numans", C[647] || CT.C647, "Nunito", C[648] || CT.C648, "Nunito Sans", C[649] || CT.C649, "Odibee Sans", C[650] || CT.C650, "Odor Mean Chey", C[651] || CT.C651, "Offside", C[652] || CT.C652, "Old Standard TT", C[653] || CT.C653, "Oldenburg", C[654] || CT.C654, "Oleo Script", C[655] || CT.C655, "Oleo Script Swash Caps", C[656] || CT.C656, "Open Sans", C[657] || CT.C657, "Open Sans Condensed", C[658] || CT.C658, "Oranienbaum", C[659] || CT.C659, "Orbitron", C[660] || CT.C660, "Oregano", C[661] || CT.C661, "Orienta", C[662] || CT.C662, "Original Surfer", C[663] || CT.C663, "Oswald", C[664] || CT.C664, "Over the Rainbow", C[665] || CT.C665, "Overlock", C[666] || CT.C666, "Overlock SC", C[667] || CT.C667, "Overpass", C[668] || CT.C668, "Overpass Mono", C[669] || CT.C669, "Ovo", C[670] || CT.C670, "Oxanium", C[671] || CT.C671, "Oxygen", C[672] || CT.C672, "Oxygen Mono", C[673] || CT.C673, "PT Mono", C[674] || CT.C674, "PT Sans", C[675] || CT.C675, "PT Sans Caption", C[676] || CT.C676, "PT Sans Narrow", C[677] || CT.C677, "PT Serif", C[678] || CT.C678, "PT Serif Caption", C[679] || CT.C679, "Pacifico", C[680] || CT.C680, "Padauk", C[681] || CT.C681, "Palanquin", C[682] || CT.C682, "Palanquin Dark", C[683] || CT.C683, "Pangolin", C[684] || CT.C684, "Paprika", C[685] || CT.C685, "Parisienne", C[686] || CT.C686, "Passero One", C[687] || CT.C687, "Passion One", C[688] || CT.C688, "Pathway Gothic One", C[689] || CT.C689, "Patrick Hand", C[690] || CT.C690, "Patrick Hand SC", C[691] || CT.C691, "Pattaya", C[692] || CT.C692, "Patua One", C[693] || CT.C693, "Pavanam", C[694] || CT.C694, "Paytone One", C[695] || CT.C695, "Peddana", C[696] || CT.C696, "Peralta", C[697] || CT.C697, "Permanent Marker", C[698] || CT.C698, "Petit Formal Script", C[699] || CT.C699, "Petrona", C[700] || CT.C700, "Philosopher", C[701] || CT.C701, "Piedra", C[702] || CT.C702, "Pinyon Script", C[703] || CT.C703, "Pirata One", C[704] || CT.C704, "Plaster", C[705] || CT.C705, "Play", C[706] || CT.C706, "Playball", C[707] || CT.C707, "Playfair Display", C[708] || CT.C708, "Playfair Display SC", C[709] || CT.C709, "Podkova", C[710] || CT.C710, "Poiret One", C[711] || CT.C711, "Poller One", C[712] || CT.C712, "Poly", C[713] || CT.C713, "Pompiere", C[714] || CT.C714, "Pontano Sans", C[715] || CT.C715, "Poor Story", C[716] || CT.C716, "Poppins", C[717] || CT.C717, "Port Lligat Sans", C[718] || CT.C718, "Port Lligat Slab", C[719] || CT.C719, "Pragati Narrow", C[720] || CT.C720, "Prata", C[721] || CT.C721, "Press Start 2P", C[722] || CT.C722, "Pridi", C[723] || CT.C723, "Princess Sofia", C[724] || CT.C724, "Prociono", C[725] || CT.C725, "Prompt", C[726] || CT.C726, "Prosto One", C[727] || CT.C727, "Proza Libre", C[728] || CT.C728, "Public Sans", C[729] || CT.C729, "Puritan", C[730] || CT.C730, "Purple Purse", C[731] || CT.C731, "Quando", C[732] || CT.C732, "Quantico", C[733] || CT.C733, "Quattrocento", C[734] || CT.C734, "Quattrocento Sans", C[735] || CT.C735, "Questrial", C[736] || CT.C736, "Quicksand", C[737] || CT.C737, "Quintessential", C[738] || CT.C738, "Qwigley", C[739] || CT.C739, "Racing Sans One", C[740] || CT.C740, "Radley", C[741] || CT.C741, "Rajdhani", C[742] || CT.C742, "Rakkas", C[743] || CT.C743, "Raleway", C[744] || CT.C744, "Raleway Dots", C[745] || CT.C745, "Ramabhadra", C[746] || CT.C746, "Ramaraja", C[747] || CT.C747, "Rambla", C[748] || CT.C748, "Rammetto One", C[749] || CT.C749, "Ranchers", C[750] || CT.C750, "Rancho", C[751] || CT.C751, "Ranga", C[752] || CT.C752, "Rasa", C[753] || CT.C753, "Rationale", C[754] || CT.C754, "Ravi Prakash", C[755] || CT.C755, "Red Hat Display", C[756] || CT.C756, "Red Hat Text", C[757] || CT.C757, "Redressed", C[758] || CT.C758, "Reem Kufi", C[759] || CT.C759, "Reenie Beanie", C[760] || CT.C760, "Revalia", C[761] || CT.C761, "Rhodium Libre", C[762] || CT.C762, "Ribeye", C[763] || CT.C763, "Ribeye Marrow", C[764] || CT.C764, "Righteous", C[765] || CT.C765, "Risque", C[766] || CT.C766, "Roboto", C[767] || CT.C767, "Roboto Condensed", C[768] || CT.C768, "Roboto Mono", C[769] || CT.C769, "Roboto Slab", C[770] || CT.C770, "Rochester", C[771] || CT.C771, "Rock Salt", C[772] || CT.C772, "Rokkitt", C[773] || CT.C773, "Romanesco", C[774] || CT.C774, "Ropa Sans", C[775] || CT.C775, "Rosario", C[776] || CT.C776, "Rosarivo", C[777] || CT.C777, "Rouge Script", C[778] || CT.C778, "Rozha One", C[779] || CT.C779, "Rubik", C[780] || CT.C780, "Rubik Mono One", C[781] || CT.C781, "Ruda", C[782] || CT.C782, "Rufina", C[783] || CT.C783, "Ruge Boogie", C[784] || CT.C784, "Ruluko", C[785] || CT.C785, "Rum Raisin", C[786] || CT.C786, "Ruslan Display", C[787] || CT.C787, "Russo One", C[788] || CT.C788, "Ruthie", C[789] || CT.C789, "Rye", C[790] || CT.C790, "Sacramento", C[791] || CT.C791, "Sahitya", C[792] || CT.C792, "Sail", C[793] || CT.C793, "Saira", C[794] || CT.C794, "Saira Condensed", C[795] || CT.C795, "Saira Extra Condensed", C[796] || CT.C796, "Saira Semi Condensed", C[797] || CT.C797, "Saira Stencil One", C[798] || CT.C798, "Salsa", C[799] || CT.C799, "Sanchez", C[800] || CT.C800, "Sancreek", C[801] || CT.C801, "Sansita", C[802] || CT.C802, "Sarabun", C[803] || CT.C803, "Sarala", C[804] || CT.C804, "Sarina", C[805] || CT.C805, "Sarpanch", C[806] || CT.C806, "Satisfy", C[807] || CT.C807, "Sawarabi Gothic", C[808] || CT.C808, "Sawarabi Mincho", C[809] || CT.C809, "Scada", C[810] || CT.C810, "Scheherazade", C[811] || CT.C811, "Schoolbell", C[812] || CT.C812, "Scope One", C[813] || CT.C813, "Seaweed Script", C[814] || CT.C814, "Secular One", C[815] || CT.C815, "Sedgwick Ave", C[816] || CT.C816, "Sedgwick Ave Display", C[817] || CT.C817, "Sen", C[818] || CT.C818, "Sevillana", C[819] || CT.C819, "Seymour One", C[820] || CT.C820, "Shadows Into Light", C[821] || CT.C821, "Shadows Into Light Two", C[822] || CT.C822, "Shanti", C[823] || CT.C823, "Share", C[824] || CT.C824, "Share Tech", C[825] || CT.C825, "Share Tech Mono", C[826] || CT.C826, "Shojumaru", C[827] || CT.C827, "Short Stack", C[828] || CT.C828, "Shrikhand", C[829] || CT.C829, "Sigmar One", C[830] || CT.C830, "Signika", C[831] || CT.C831, "Signika Negative", C[832] || CT.C832, "Simonetta", C[833] || CT.C833, "Single Day", C[834] || CT.C834, "Sintony", C[835] || CT.C835, "Sirin Stencil", C[836] || CT.C836, "Six Caps", C[837] || CT.C837, "Skranji", C[838] || CT.C838, "Slabo 13px", C[839] || CT.C839, "Slabo 27px", C[840] || CT.C840, "Slackey", C[841] || CT.C841, "Smokum", C[842] || CT.C842, "Smythe", C[843] || CT.C843, "Sniglet", C[844] || CT.C844, "Snippet", C[845] || CT.C845, "Snowburst One", C[846] || CT.C846, "Sofadi One", C[847] || CT.C847, "Sofia", C[848] || CT.C848, "Solway", C[849] || CT.C849, "Song Myung", C[850] || CT.C850, "Sonsie One", C[851] || CT.C851, "Sorts Mill Goudy", C[852] || CT.C852, "Source Code Pro", C[853] || CT.C853, "Source Sans Pro", C[854] || CT.C854, "Source Serif Pro", C[855] || CT.C855, "Space Mono", C[856] || CT.C856, "Spartan", C[857] || CT.C857, "Special Elite", C[858] || CT.C858, "Spectral", C[859] || CT.C859, "Spectral SC", C[860] || CT.C860, "Spicy Rice", C[861] || CT.C861, "Spinnaker", C[862] || CT.C862, "Spirax", C[863] || CT.C863, "Squada One", C[864] || CT.C864, "Sree Krushnadevaraya", C[865] || CT.C865, "Sriracha", C[866] || CT.C866, "Srisakdi", C[867] || CT.C867, "Staatliches", C[868] || CT.C868, "Stalemate", C[869] || CT.C869, "Stalinist One", C[870] || CT.C870, "Stardos Stencil", C[871] || CT.C871, "Stint Ultra Condensed", C[872] || CT.C872, "Stint Ultra Expanded", C[873] || CT.C873, "Stoke", C[874] || CT.C874, "Strait", C[875] || CT.C875, "Stylish", C[876] || CT.C876, "Sue Ellen Francisco", C[877] || CT.C877, "Suez One", C[878] || CT.C878, "Sulphur Point", C[879] || CT.C879, "Sumana", C[880] || CT.C880, "Sunflower", C[881] || CT.C881, "Sunshiney", C[882] || CT.C882, "Supermercado One", C[883] || CT.C883, "Sura", C[884] || CT.C884, "Suranna", C[885] || CT.C885, "Suravaram", C[886] || CT.C886, "Swanky and Moo Moo", C[887] || CT.C887, "Syncopate", C[888] || CT.C888, "Tajawal", C[889] || CT.C889, "Tangerine", C[890] || CT.C890, "Tauri", C[891] || CT.C891, "Taviraj", C[892] || CT.C892, "Teko", C[893] || CT.C893, "Telex", C[894] || CT.C894, "Tenali Ramakrishna", C[895] || CT.C895, "Tenor Sans", C[896] || CT.C896, "Text Me One", C[897] || CT.C897, "Thasadith", C[898] || CT.C898, "The Girl Next Door", C[899] || CT.C899, "Tienne", C[900] || CT.C900, "Tillana", C[901] || CT.C901, "Timmana", C[902] || CT.C902, "Tinos", C[903] || CT.C903, "Titan One", C[904] || CT.C904, "Titillium Web", C[905] || CT.C905, "Tomorrow", C[906] || CT.C906, "Trade Winds", C[907] || CT.C907, "Trirong", C[908] || CT.C908, "Trocchi", C[909] || CT.C909, "Trochut", C[910] || CT.C910, "Trykker", C[911] || CT.C911, "Tulpen One", C[912] || CT.C912, "Turret Road", C[913] || CT.C913, "Ubuntu", C[914] || CT.C914, "Ubuntu Condensed", C[915] || CT.C915, "Ubuntu Mono", C[916] || CT.C916, "Ultra", C[917] || CT.C917, "Uncial Antiqua", C[918] || CT.C918, "Underdog", C[919] || CT.C919, "Unica One", C[920] || CT.C920, "UnifrakturCook", C[921] || CT.C921, "UnifrakturMaguntia", C[922] || CT.C922, "Unkempt", C[923] || CT.C923, "Unlock", C[924] || CT.C924, "Unna", C[925] || CT.C925, "VT323", C[926] || CT.C926, "Vampiro One", C[927] || CT.C927, "Varela", C[928] || CT.C928, "Varela Round", C[929] || CT.C929, "Vast Shadow", C[930] || CT.C930, "Vesper Libre", C[931] || CT.C931, "Viaoda Libre", C[932] || CT.C932, "Vibes", C[933] || CT.C933, "Vibur", C[934] || CT.C934, "Vidaloka", C[935] || CT.C935, "Viga", C[936] || CT.C936, "Voces", C[937] || CT.C937, "Volkhov", C[938] || CT.C938, "Vollkorn", C[939] || CT.C939, "Vollkorn SC", C[940] || CT.C940, "Voltaire", C[941] || CT.C941, "Waiting for the Sunrise", C[942] || CT.C942, "Wallpoet", C[943] || CT.C943, "Walter Turncoat", C[944] || CT.C944, "Warnes", C[945] || CT.C945, "Wellfleet", C[946] || CT.C946, "Wendy One", C[947] || CT.C947, "Wire One", C[948] || CT.C948, "Work Sans", C[949] || CT.C949, "Yanone Kaffeesatz", C[950] || CT.C950, "Yantramanav", C[951] || CT.C951, "Yatra One", C[952] || CT.C952, "Yellowtail", C[953] || CT.C953, "Yeon Sung", C[954] || CT.C954, "Yeseva One", C[955] || CT.C955, "Yesteryear", C[956] || CT.C956, "Yrsa", C[957] || CT.C957, "ZCOOL KuaiLe", C[958] || CT.C958, "ZCOOL QingKe HuangYou", C[959] || CT.C959, "ZCOOL XiaoWei", C[960] || CT.C960, "Zeyada", C[961] || CT.C961, "Zhi Mang Xing", C[962] || CT.C962, "Zilla Slab", C[963] || CT.C963, "Zilla Slab Highlight", C[964] || CT.C964]);
    },
    get C966() {
      return C[966] = dart.fn(google_fonts.GoogleFonts.aBeeZeeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C967() {
      return C[967] = dart.fn(google_fonts.GoogleFonts.abelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C968() {
      return C[968] = dart.fn(google_fonts.GoogleFonts.abhayaLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C969() {
      return C[969] = dart.fn(google_fonts.GoogleFonts.abrilFatfaceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C970() {
      return C[970] = dart.fn(google_fonts.GoogleFonts.aclonicaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C971() {
      return C[971] = dart.fn(google_fonts.GoogleFonts.acmeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C972() {
      return C[972] = dart.fn(google_fonts.GoogleFonts.actorTextTheme, T.TextThemeLToTextThemeL());
    },
    get C973() {
      return C[973] = dart.fn(google_fonts.GoogleFonts.adaminaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C974() {
      return C[974] = dart.fn(google_fonts.GoogleFonts.adventProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C975() {
      return C[975] = dart.fn(google_fonts.GoogleFonts.aguafinaScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C976() {
      return C[976] = dart.fn(google_fonts.GoogleFonts.akronimTextTheme, T.TextThemeLToTextThemeL());
    },
    get C977() {
      return C[977] = dart.fn(google_fonts.GoogleFonts.aladinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C978() {
      return C[978] = dart.fn(google_fonts.GoogleFonts.alataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C979() {
      return C[979] = dart.fn(google_fonts.GoogleFonts.alatsiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C980() {
      return C[980] = dart.fn(google_fonts.GoogleFonts.aldrichTextTheme, T.TextThemeLToTextThemeL());
    },
    get C981() {
      return C[981] = dart.fn(google_fonts.GoogleFonts.alefTextTheme, T.TextThemeLToTextThemeL());
    },
    get C982() {
      return C[982] = dart.fn(google_fonts.GoogleFonts.alegreyaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C983() {
      return C[983] = dart.fn(google_fonts.GoogleFonts.alegreyaScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C984() {
      return C[984] = dart.fn(google_fonts.GoogleFonts.alegreyaSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C985() {
      return C[985] = dart.fn(google_fonts.GoogleFonts.alegreyaSansScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C986() {
      return C[986] = dart.fn(google_fonts.GoogleFonts.aleoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C987() {
      return C[987] = dart.fn(google_fonts.GoogleFonts.alexBrushTextTheme, T.TextThemeLToTextThemeL());
    },
    get C988() {
      return C[988] = dart.fn(google_fonts.GoogleFonts.alfaSlabOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C989() {
      return C[989] = dart.fn(google_fonts.GoogleFonts.aliceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C990() {
      return C[990] = dart.fn(google_fonts.GoogleFonts.alikeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C991() {
      return C[991] = dart.fn(google_fonts.GoogleFonts.alikeAngularTextTheme, T.TextThemeLToTextThemeL());
    },
    get C992() {
      return C[992] = dart.fn(google_fonts.GoogleFonts.allanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C993() {
      return C[993] = dart.fn(google_fonts.GoogleFonts.allertaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C994() {
      return C[994] = dart.fn(google_fonts.GoogleFonts.allertaStencilTextTheme, T.TextThemeLToTextThemeL());
    },
    get C995() {
      return C[995] = dart.fn(google_fonts.GoogleFonts.alluraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C996() {
      return C[996] = dart.fn(google_fonts.GoogleFonts.almaraiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C997() {
      return C[997] = dart.fn(google_fonts.GoogleFonts.almendraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C998() {
      return C[998] = dart.fn(google_fonts.GoogleFonts.almendraDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C999() {
      return C[999] = dart.fn(google_fonts.GoogleFonts.almendraScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1000() {
      return C[1000] = dart.fn(google_fonts.GoogleFonts.amaranteTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1001() {
      return C[1001] = dart.fn(google_fonts.GoogleFonts.amaranthTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1002() {
      return C[1002] = dart.fn(google_fonts.GoogleFonts.amaticScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1003() {
      return C[1003] = dart.fn(google_fonts.GoogleFonts.amaticaScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1004() {
      return C[1004] = dart.fn(google_fonts.GoogleFonts.amethystaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1005() {
      return C[1005] = dart.fn(google_fonts.GoogleFonts.amikoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1006() {
      return C[1006] = dart.fn(google_fonts.GoogleFonts.amiriTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1007() {
      return C[1007] = dart.fn(google_fonts.GoogleFonts.amitaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1008() {
      return C[1008] = dart.fn(google_fonts.GoogleFonts.anaheimTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1009() {
      return C[1009] = dart.fn(google_fonts.GoogleFonts.andadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1010() {
      return C[1010] = dart.fn(google_fonts.GoogleFonts.andikaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1011() {
      return C[1011] = dart.fn(google_fonts.GoogleFonts.annieUseYourTelescopeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1012() {
      return C[1012] = dart.fn(google_fonts.GoogleFonts.anonymousProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1013() {
      return C[1013] = dart.fn(google_fonts.GoogleFonts.anticTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1014() {
      return C[1014] = dart.fn(google_fonts.GoogleFonts.anticDidoneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1015() {
      return C[1015] = dart.fn(google_fonts.GoogleFonts.anticSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1016() {
      return C[1016] = dart.fn(google_fonts.GoogleFonts.antonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1017() {
      return C[1017] = dart.fn(google_fonts.GoogleFonts.arapeyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1018() {
      return C[1018] = dart.fn(google_fonts.GoogleFonts.arbutusTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1019() {
      return C[1019] = dart.fn(google_fonts.GoogleFonts.arbutusSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1020() {
      return C[1020] = dart.fn(google_fonts.GoogleFonts.architectsDaughterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1021() {
      return C[1021] = dart.fn(google_fonts.GoogleFonts.archivoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1022() {
      return C[1022] = dart.fn(google_fonts.GoogleFonts.archivoBlackTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1023() {
      return C[1023] = dart.fn(google_fonts.GoogleFonts.archivoNarrowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1024() {
      return C[1024] = dart.fn(google_fonts.GoogleFonts.arefRuqaaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1025() {
      return C[1025] = dart.fn(google_fonts.GoogleFonts.arimaMaduraiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1026() {
      return C[1026] = dart.fn(google_fonts.GoogleFonts.arimoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1027() {
      return C[1027] = dart.fn(google_fonts.GoogleFonts.arizoniaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1028() {
      return C[1028] = dart.fn(google_fonts.GoogleFonts.armataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1029() {
      return C[1029] = dart.fn(google_fonts.GoogleFonts.arsenalTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1030() {
      return C[1030] = dart.fn(google_fonts.GoogleFonts.artifikaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1031() {
      return C[1031] = dart.fn(google_fonts.GoogleFonts.arvoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1032() {
      return C[1032] = dart.fn(google_fonts.GoogleFonts.aryaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1033() {
      return C[1033] = dart.fn(google_fonts.GoogleFonts.asapTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1034() {
      return C[1034] = dart.fn(google_fonts.GoogleFonts.asarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1035() {
      return C[1035] = dart.fn(google_fonts.GoogleFonts.assetTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1036() {
      return C[1036] = dart.fn(google_fonts.GoogleFonts.assistantTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1037() {
      return C[1037] = dart.fn(google_fonts.GoogleFonts.astlochTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1038() {
      return C[1038] = dart.fn(google_fonts.GoogleFonts.asulTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1039() {
      return C[1039] = dart.fn(google_fonts.GoogleFonts.athitiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1040() {
      return C[1040] = dart.fn(google_fonts.GoogleFonts.atmaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1041() {
      return C[1041] = dart.fn(google_fonts.GoogleFonts.atomicAgeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1042() {
      return C[1042] = dart.fn(google_fonts.GoogleFonts.aubreyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1043() {
      return C[1043] = dart.fn(google_fonts.GoogleFonts.audiowideTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1044() {
      return C[1044] = dart.fn(google_fonts.GoogleFonts.autourOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1045() {
      return C[1045] = dart.fn(google_fonts.GoogleFonts.averageTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1046() {
      return C[1046] = dart.fn(google_fonts.GoogleFonts.averageSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1047() {
      return C[1047] = dart.fn(google_fonts.GoogleFonts.averiaGruesaLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1048() {
      return C[1048] = dart.fn(google_fonts.GoogleFonts.averiaLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1049() {
      return C[1049] = dart.fn(google_fonts.GoogleFonts.averiaSansLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1050() {
      return C[1050] = dart.fn(google_fonts.GoogleFonts.averiaSerifLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1051() {
      return C[1051] = dart.fn(google_fonts.GoogleFonts.b612TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1052() {
      return C[1052] = dart.fn(google_fonts.GoogleFonts.b612MonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1053() {
      return C[1053] = dart.fn(google_fonts.GoogleFonts.badScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1054() {
      return C[1054] = dart.fn(google_fonts.GoogleFonts.bahianaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1055() {
      return C[1055] = dart.fn(google_fonts.GoogleFonts.bahianitaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1056() {
      return C[1056] = dart.fn(google_fonts.GoogleFonts.baiJamjureeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1057() {
      return C[1057] = dart.fn(google_fonts.GoogleFonts.balooTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1058() {
      return C[1058] = dart.fn(google_fonts.GoogleFonts.balooBhaiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1059() {
      return C[1059] = dart.fn(google_fonts.GoogleFonts.balooBhaijaanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1060() {
      return C[1060] = dart.fn(google_fonts.GoogleFonts.balooBhainaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1061() {
      return C[1061] = dart.fn(google_fonts.GoogleFonts.balooChettanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1062() {
      return C[1062] = dart.fn(google_fonts.GoogleFonts.balooDaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1063() {
      return C[1063] = dart.fn(google_fonts.GoogleFonts.balooPaajiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1064() {
      return C[1064] = dart.fn(google_fonts.GoogleFonts.balooTammaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1065() {
      return C[1065] = dart.fn(google_fonts.GoogleFonts.balooTammuduTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1066() {
      return C[1066] = dart.fn(google_fonts.GoogleFonts.balooThambiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1067() {
      return C[1067] = dart.fn(google_fonts.GoogleFonts.balthazarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1068() {
      return C[1068] = dart.fn(google_fonts.GoogleFonts.bangersTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1069() {
      return C[1069] = dart.fn(google_fonts.GoogleFonts.barlowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1070() {
      return C[1070] = dart.fn(google_fonts.GoogleFonts.barlowCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1071() {
      return C[1071] = dart.fn(google_fonts.GoogleFonts.barlowSemiCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1072() {
      return C[1072] = dart.fn(google_fonts.GoogleFonts.barriecitoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1073() {
      return C[1073] = dart.fn(google_fonts.GoogleFonts.barrioTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1074() {
      return C[1074] = dart.fn(google_fonts.GoogleFonts.basicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1075() {
      return C[1075] = dart.fn(google_fonts.GoogleFonts.baskervvilleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1076() {
      return C[1076] = dart.fn(google_fonts.GoogleFonts.baumansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1077() {
      return C[1077] = dart.fn(google_fonts.GoogleFonts.beVietnamTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1078() {
      return C[1078] = dart.fn(google_fonts.GoogleFonts.bebasNeueTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1079() {
      return C[1079] = dart.fn(google_fonts.GoogleFonts.belgranoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1080() {
      return C[1080] = dart.fn(google_fonts.GoogleFonts.bellefairTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1081() {
      return C[1081] = dart.fn(google_fonts.GoogleFonts.bellezaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1082() {
      return C[1082] = dart.fn(google_fonts.GoogleFonts.bellotaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1083() {
      return C[1083] = dart.fn(google_fonts.GoogleFonts.bellotaTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1084() {
      return C[1084] = dart.fn(google_fonts.GoogleFonts.benchNineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1085() {
      return C[1085] = dart.fn(google_fonts.GoogleFonts.benthamTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1086() {
      return C[1086] = dart.fn(google_fonts.GoogleFonts.berkshireSwashTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1087() {
      return C[1087] = dart.fn(google_fonts.GoogleFonts.bethEllenTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1088() {
      return C[1088] = dart.fn(google_fonts.GoogleFonts.bevanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1089() {
      return C[1089] = dart.fn(google_fonts.GoogleFonts.bigShouldersDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1090() {
      return C[1090] = dart.fn(google_fonts.GoogleFonts.bigShouldersTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1091() {
      return C[1091] = dart.fn(google_fonts.GoogleFonts.bigelowRulesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1092() {
      return C[1092] = dart.fn(google_fonts.GoogleFonts.bigshotOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1093() {
      return C[1093] = dart.fn(google_fonts.GoogleFonts.bilboTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1094() {
      return C[1094] = dart.fn(google_fonts.GoogleFonts.bilboSwashCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1095() {
      return C[1095] = dart.fn(google_fonts.GoogleFonts.bioRhymeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1096() {
      return C[1096] = dart.fn(google_fonts.GoogleFonts.bioRhymeExpandedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1097() {
      return C[1097] = dart.fn(google_fonts.GoogleFonts.biryaniTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1098() {
      return C[1098] = dart.fn(google_fonts.GoogleFonts.bitterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1099() {
      return C[1099] = dart.fn(google_fonts.GoogleFonts.blackAndWhitePictureTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1100() {
      return C[1100] = dart.fn(google_fonts.GoogleFonts.blackHanSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1101() {
      return C[1101] = dart.fn(google_fonts.GoogleFonts.blackOpsOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1102() {
      return C[1102] = dart.fn(google_fonts.GoogleFonts.blinkerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1103() {
      return C[1103] = dart.fn(google_fonts.GoogleFonts.bonbonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1104() {
      return C[1104] = dart.fn(google_fonts.GoogleFonts.boogalooTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1105() {
      return C[1105] = dart.fn(google_fonts.GoogleFonts.bowlbyOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1106() {
      return C[1106] = dart.fn(google_fonts.GoogleFonts.bowlbyOneScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1107() {
      return C[1107] = dart.fn(google_fonts.GoogleFonts.brawlerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1108() {
      return C[1108] = dart.fn(google_fonts.GoogleFonts.breeSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1109() {
      return C[1109] = dart.fn(google_fonts.GoogleFonts.bubblegumSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1110() {
      return C[1110] = dart.fn(google_fonts.GoogleFonts.bubblerOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1111() {
      return C[1111] = dart.fn(google_fonts.GoogleFonts.budaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1112() {
      return C[1112] = dart.fn(google_fonts.GoogleFonts.buenardTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1113() {
      return C[1113] = dart.fn(google_fonts.GoogleFonts.bungeeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1114() {
      return C[1114] = dart.fn(google_fonts.GoogleFonts.bungeeHairlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1115() {
      return C[1115] = dart.fn(google_fonts.GoogleFonts.bungeeInlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1116() {
      return C[1116] = dart.fn(google_fonts.GoogleFonts.bungeeOutlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1117() {
      return C[1117] = dart.fn(google_fonts.GoogleFonts.bungeeShadeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1118() {
      return C[1118] = dart.fn(google_fonts.GoogleFonts.butchermanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1119() {
      return C[1119] = dart.fn(google_fonts.GoogleFonts.butterflyKidsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1120() {
      return C[1120] = dart.fn(google_fonts.GoogleFonts.cabinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1121() {
      return C[1121] = dart.fn(google_fonts.GoogleFonts.cabinCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1122() {
      return C[1122] = dart.fn(google_fonts.GoogleFonts.cabinSketchTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1123() {
      return C[1123] = dart.fn(google_fonts.GoogleFonts.caesarDressingTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1124() {
      return C[1124] = dart.fn(google_fonts.GoogleFonts.cagliostroTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1125() {
      return C[1125] = dart.fn(google_fonts.GoogleFonts.cairoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1126() {
      return C[1126] = dart.fn(google_fonts.GoogleFonts.caladeaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1127() {
      return C[1127] = dart.fn(google_fonts.GoogleFonts.calistogaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1128() {
      return C[1128] = dart.fn(google_fonts.GoogleFonts.calligraffittiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1129() {
      return C[1129] = dart.fn(google_fonts.GoogleFonts.cambayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1130() {
      return C[1130] = dart.fn(google_fonts.GoogleFonts.camboTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1131() {
      return C[1131] = dart.fn(google_fonts.GoogleFonts.candalTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1132() {
      return C[1132] = dart.fn(google_fonts.GoogleFonts.cantarellTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1133() {
      return C[1133] = dart.fn(google_fonts.GoogleFonts.cantataOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1134() {
      return C[1134] = dart.fn(google_fonts.GoogleFonts.cantoraOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1135() {
      return C[1135] = dart.fn(google_fonts.GoogleFonts.capriolaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1136() {
      return C[1136] = dart.fn(google_fonts.GoogleFonts.cardoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1137() {
      return C[1137] = dart.fn(google_fonts.GoogleFonts.carmeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1138() {
      return C[1138] = dart.fn(google_fonts.GoogleFonts.carroisGothicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1139() {
      return C[1139] = dart.fn(google_fonts.GoogleFonts.carroisGothicScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1140() {
      return C[1140] = dart.fn(google_fonts.GoogleFonts.carterOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1141() {
      return C[1141] = dart.fn(google_fonts.GoogleFonts.catamaranTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1142() {
      return C[1142] = dart.fn(google_fonts.GoogleFonts.caudexTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1143() {
      return C[1143] = dart.fn(google_fonts.GoogleFonts.caveatTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1144() {
      return C[1144] = dart.fn(google_fonts.GoogleFonts.caveatBrushTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1145() {
      return C[1145] = dart.fn(google_fonts.GoogleFonts.cedarvilleCursiveTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1146() {
      return C[1146] = dart.fn(google_fonts.GoogleFonts.cevicheOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1147() {
      return C[1147] = dart.fn(google_fonts.GoogleFonts.chakraPetchTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1148() {
      return C[1148] = dart.fn(google_fonts.GoogleFonts.changaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1149() {
      return C[1149] = dart.fn(google_fonts.GoogleFonts.changaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1150() {
      return C[1150] = dart.fn(google_fonts.GoogleFonts.changoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1151() {
      return C[1151] = dart.fn(google_fonts.GoogleFonts.charmTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1152() {
      return C[1152] = dart.fn(google_fonts.GoogleFonts.charmonmanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1153() {
      return C[1153] = dart.fn(google_fonts.GoogleFonts.chathuraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1154() {
      return C[1154] = dart.fn(google_fonts.GoogleFonts.chauPhilomeneOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1155() {
      return C[1155] = dart.fn(google_fonts.GoogleFonts.chelaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1156() {
      return C[1156] = dart.fn(google_fonts.GoogleFonts.chelseaMarketTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1157() {
      return C[1157] = dart.fn(google_fonts.GoogleFonts.cherryCreamSodaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1158() {
      return C[1158] = dart.fn(google_fonts.GoogleFonts.cherrySwashTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1159() {
      return C[1159] = dart.fn(google_fonts.GoogleFonts.chewyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1160() {
      return C[1160] = dart.fn(google_fonts.GoogleFonts.chicleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1161() {
      return C[1161] = dart.fn(google_fonts.GoogleFonts.chilankaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1162() {
      return C[1162] = dart.fn(google_fonts.GoogleFonts.chivoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1163() {
      return C[1163] = dart.fn(google_fonts.GoogleFonts.chonburiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1164() {
      return C[1164] = dart.fn(google_fonts.GoogleFonts.cinzelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1165() {
      return C[1165] = dart.fn(google_fonts.GoogleFonts.cinzelDecorativeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1166() {
      return C[1166] = dart.fn(google_fonts.GoogleFonts.clickerScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1167() {
      return C[1167] = dart.fn(google_fonts.GoogleFonts.codaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1168() {
      return C[1168] = dart.fn(google_fonts.GoogleFonts.codaCaptionTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1169() {
      return C[1169] = dart.fn(google_fonts.GoogleFonts.codystarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1170() {
      return C[1170] = dart.fn(google_fonts.GoogleFonts.coinyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1171() {
      return C[1171] = dart.fn(google_fonts.GoogleFonts.comboTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1172() {
      return C[1172] = dart.fn(google_fonts.GoogleFonts.comfortaaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1173() {
      return C[1173] = dart.fn(google_fonts.GoogleFonts.comicNeueTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1174() {
      return C[1174] = dart.fn(google_fonts.GoogleFonts.comingSoonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1175() {
      return C[1175] = dart.fn(google_fonts.GoogleFonts.concertOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1176() {
      return C[1176] = dart.fn(google_fonts.GoogleFonts.condimentTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1177() {
      return C[1177] = dart.fn(google_fonts.GoogleFonts.contrailOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1178() {
      return C[1178] = dart.fn(google_fonts.GoogleFonts.convergenceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1179() {
      return C[1179] = dart.fn(google_fonts.GoogleFonts.cookieTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1180() {
      return C[1180] = dart.fn(google_fonts.GoogleFonts.copseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1181() {
      return C[1181] = dart.fn(google_fonts.GoogleFonts.corbenTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1182() {
      return C[1182] = dart.fn(google_fonts.GoogleFonts.cormorantTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1183() {
      return C[1183] = dart.fn(google_fonts.GoogleFonts.cormorantGaramondTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1184() {
      return C[1184] = dart.fn(google_fonts.GoogleFonts.cormorantInfantTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1185() {
      return C[1185] = dart.fn(google_fonts.GoogleFonts.cormorantScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1186() {
      return C[1186] = dart.fn(google_fonts.GoogleFonts.cormorantUnicaseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1187() {
      return C[1187] = dart.fn(google_fonts.GoogleFonts.cormorantUprightTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1188() {
      return C[1188] = dart.fn(google_fonts.GoogleFonts.courgetteTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1189() {
      return C[1189] = dart.fn(google_fonts.GoogleFonts.courierPrimeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1190() {
      return C[1190] = dart.fn(google_fonts.GoogleFonts.cousineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1191() {
      return C[1191] = dart.fn(google_fonts.GoogleFonts.coustardTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1192() {
      return C[1192] = dart.fn(google_fonts.GoogleFonts.coveredByYourGraceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1193() {
      return C[1193] = dart.fn(google_fonts.GoogleFonts.craftyGirlsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1194() {
      return C[1194] = dart.fn(google_fonts.GoogleFonts.creepsterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1195() {
      return C[1195] = dart.fn(google_fonts.GoogleFonts.creteRoundTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1196() {
      return C[1196] = dart.fn(google_fonts.GoogleFonts.crimsonProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1197() {
      return C[1197] = dart.fn(google_fonts.GoogleFonts.crimsonTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1198() {
      return C[1198] = dart.fn(google_fonts.GoogleFonts.croissantOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1199() {
      return C[1199] = dart.fn(google_fonts.GoogleFonts.crushedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1200() {
      return C[1200] = dart.fn(google_fonts.GoogleFonts.cuprumTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1201() {
      return C[1201] = dart.fn(google_fonts.GoogleFonts.cuteFontTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1202() {
      return C[1202] = dart.fn(google_fonts.GoogleFonts.cutiveTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1203() {
      return C[1203] = dart.fn(google_fonts.GoogleFonts.cutiveMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1204() {
      return C[1204] = dart.fn(google_fonts.GoogleFonts.dmSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1205() {
      return C[1205] = dart.fn(google_fonts.GoogleFonts.dmSerifDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1206() {
      return C[1206] = dart.fn(google_fonts.GoogleFonts.dmSerifTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1207() {
      return C[1207] = dart.fn(google_fonts.GoogleFonts.damionTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1208() {
      return C[1208] = dart.fn(google_fonts.GoogleFonts.dancingScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1209() {
      return C[1209] = dart.fn(google_fonts.GoogleFonts.darkerGrotesqueTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1210() {
      return C[1210] = dart.fn(google_fonts.GoogleFonts.davidLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1211() {
      return C[1211] = dart.fn(google_fonts.GoogleFonts.dawningOfANewDayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1212() {
      return C[1212] = dart.fn(google_fonts.GoogleFonts.daysOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1213() {
      return C[1213] = dart.fn(google_fonts.GoogleFonts.dekkoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1214() {
      return C[1214] = dart.fn(google_fonts.GoogleFonts.deliusTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1215() {
      return C[1215] = dart.fn(google_fonts.GoogleFonts.deliusSwashCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1216() {
      return C[1216] = dart.fn(google_fonts.GoogleFonts.deliusUnicaseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1217() {
      return C[1217] = dart.fn(google_fonts.GoogleFonts.dellaRespiraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1218() {
      return C[1218] = dart.fn(google_fonts.GoogleFonts.denkOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1219() {
      return C[1219] = dart.fn(google_fonts.GoogleFonts.devonshireTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1220() {
      return C[1220] = dart.fn(google_fonts.GoogleFonts.dhurjatiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1221() {
      return C[1221] = dart.fn(google_fonts.GoogleFonts.didactGothicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1222() {
      return C[1222] = dart.fn(google_fonts.GoogleFonts.diplomataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1223() {
      return C[1223] = dart.fn(google_fonts.GoogleFonts.diplomataScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1224() {
      return C[1224] = dart.fn(google_fonts.GoogleFonts.doHyeonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1225() {
      return C[1225] = dart.fn(google_fonts.GoogleFonts.dokdoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1226() {
      return C[1226] = dart.fn(google_fonts.GoogleFonts.domineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1227() {
      return C[1227] = dart.fn(google_fonts.GoogleFonts.donegalOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1228() {
      return C[1228] = dart.fn(google_fonts.GoogleFonts.doppioOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1229() {
      return C[1229] = dart.fn(google_fonts.GoogleFonts.dorsaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1230() {
      return C[1230] = dart.fn(google_fonts.GoogleFonts.dosisTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1231() {
      return C[1231] = dart.fn(google_fonts.GoogleFonts.drSugiyamaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1232() {
      return C[1232] = dart.fn(google_fonts.GoogleFonts.droidSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1233() {
      return C[1233] = dart.fn(google_fonts.GoogleFonts.droidSansMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1234() {
      return C[1234] = dart.fn(google_fonts.GoogleFonts.droidSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1235() {
      return C[1235] = dart.fn(google_fonts.GoogleFonts.duruSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1236() {
      return C[1236] = dart.fn(google_fonts.GoogleFonts.dynalightTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1237() {
      return C[1237] = dart.fn(google_fonts.GoogleFonts.ebGaramondTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1238() {
      return C[1238] = dart.fn(google_fonts.GoogleFonts.eagleLakeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1239() {
      return C[1239] = dart.fn(google_fonts.GoogleFonts.eastSeaDokdoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1240() {
      return C[1240] = dart.fn(google_fonts.GoogleFonts.eaterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1241() {
      return C[1241] = dart.fn(google_fonts.GoogleFonts.economicaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1242() {
      return C[1242] = dart.fn(google_fonts.GoogleFonts.eczarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1243() {
      return C[1243] = dart.fn(google_fonts.GoogleFonts.elMessiriTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1244() {
      return C[1244] = dart.fn(google_fonts.GoogleFonts.electrolizeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1245() {
      return C[1245] = dart.fn(google_fonts.GoogleFonts.elsieTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1246() {
      return C[1246] = dart.fn(google_fonts.GoogleFonts.elsieSwashCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1247() {
      return C[1247] = dart.fn(google_fonts.GoogleFonts.emblemaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1248() {
      return C[1248] = dart.fn(google_fonts.GoogleFonts.emilysCandyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1249() {
      return C[1249] = dart.fn(google_fonts.GoogleFonts.encodeSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1250() {
      return C[1250] = dart.fn(google_fonts.GoogleFonts.encodeSansCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1251() {
      return C[1251] = dart.fn(google_fonts.GoogleFonts.encodeSansExpandedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1252() {
      return C[1252] = dart.fn(google_fonts.GoogleFonts.encodeSansSemiCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1253() {
      return C[1253] = dart.fn(google_fonts.GoogleFonts.encodeSansSemiExpandedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1254() {
      return C[1254] = dart.fn(google_fonts.GoogleFonts.engagementTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1255() {
      return C[1255] = dart.fn(google_fonts.GoogleFonts.englebertTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1256() {
      return C[1256] = dart.fn(google_fonts.GoogleFonts.enriquetaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1257() {
      return C[1257] = dart.fn(google_fonts.GoogleFonts.ericaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1258() {
      return C[1258] = dart.fn(google_fonts.GoogleFonts.estebanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1259() {
      return C[1259] = dart.fn(google_fonts.GoogleFonts.euphoriaScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1260() {
      return C[1260] = dart.fn(google_fonts.GoogleFonts.ewertTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1261() {
      return C[1261] = dart.fn(google_fonts.GoogleFonts.exoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1262() {
      return C[1262] = dart.fn(google_fonts.GoogleFonts.exo2TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1263() {
      return C[1263] = dart.fn(google_fonts.GoogleFonts.expletusSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1264() {
      return C[1264] = dart.fn(google_fonts.GoogleFonts.fahkwangTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1265() {
      return C[1265] = dart.fn(google_fonts.GoogleFonts.fanwoodTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1266() {
      return C[1266] = dart.fn(google_fonts.GoogleFonts.farroTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1267() {
      return C[1267] = dart.fn(google_fonts.GoogleFonts.farsanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1268() {
      return C[1268] = dart.fn(google_fonts.GoogleFonts.fascinateTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1269() {
      return C[1269] = dart.fn(google_fonts.GoogleFonts.fascinateInlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1270() {
      return C[1270] = dart.fn(google_fonts.GoogleFonts.fasterOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1271() {
      return C[1271] = dart.fn(google_fonts.GoogleFonts.faunaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1272() {
      return C[1272] = dart.fn(google_fonts.GoogleFonts.faustinaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1273() {
      return C[1273] = dart.fn(google_fonts.GoogleFonts.federantTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1274() {
      return C[1274] = dart.fn(google_fonts.GoogleFonts.federoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1275() {
      return C[1275] = dart.fn(google_fonts.GoogleFonts.felipaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1276() {
      return C[1276] = dart.fn(google_fonts.GoogleFonts.fenixTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1277() {
      return C[1277] = dart.fn(google_fonts.GoogleFonts.fingerPaintTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1278() {
      return C[1278] = dart.fn(google_fonts.GoogleFonts.firaCodeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1279() {
      return C[1279] = dart.fn(google_fonts.GoogleFonts.firaMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1280() {
      return C[1280] = dart.fn(google_fonts.GoogleFonts.firaSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1281() {
      return C[1281] = dart.fn(google_fonts.GoogleFonts.firaSansCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1282() {
      return C[1282] = dart.fn(google_fonts.GoogleFonts.firaSansExtraCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1283() {
      return C[1283] = dart.fn(google_fonts.GoogleFonts.fjallaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1284() {
      return C[1284] = dart.fn(google_fonts.GoogleFonts.fjordOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1285() {
      return C[1285] = dart.fn(google_fonts.GoogleFonts.flamencoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1286() {
      return C[1286] = dart.fn(google_fonts.GoogleFonts.flavorsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1287() {
      return C[1287] = dart.fn(google_fonts.GoogleFonts.fondamentoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1288() {
      return C[1288] = dart.fn(google_fonts.GoogleFonts.fontdinerSwankyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1289() {
      return C[1289] = dart.fn(google_fonts.GoogleFonts.forumTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1290() {
      return C[1290] = dart.fn(google_fonts.GoogleFonts.francoisOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1291() {
      return C[1291] = dart.fn(google_fonts.GoogleFonts.frankRuhlLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1292() {
      return C[1292] = dart.fn(google_fonts.GoogleFonts.freckleFaceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1293() {
      return C[1293] = dart.fn(google_fonts.GoogleFonts.frederickaTheGreatTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1294() {
      return C[1294] = dart.fn(google_fonts.GoogleFonts.fredokaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1295() {
      return C[1295] = dart.fn(google_fonts.GoogleFonts.frescaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1296() {
      return C[1296] = dart.fn(google_fonts.GoogleFonts.frijoleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1297() {
      return C[1297] = dart.fn(google_fonts.GoogleFonts.frukturTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1298() {
      return C[1298] = dart.fn(google_fonts.GoogleFonts.fugazOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1299() {
      return C[1299] = dart.fn(google_fonts.GoogleFonts.gfsDidotTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1300() {
      return C[1300] = dart.fn(google_fonts.GoogleFonts.gfsNeohellenicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1301() {
      return C[1301] = dart.fn(google_fonts.GoogleFonts.gabrielaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1302() {
      return C[1302] = dart.fn(google_fonts.GoogleFonts.gaeguTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1303() {
      return C[1303] = dart.fn(google_fonts.GoogleFonts.gafataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1304() {
      return C[1304] = dart.fn(google_fonts.GoogleFonts.galadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1305() {
      return C[1305] = dart.fn(google_fonts.GoogleFonts.galdeanoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1306() {
      return C[1306] = dart.fn(google_fonts.GoogleFonts.galindoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1307() {
      return C[1307] = dart.fn(google_fonts.GoogleFonts.gamjaFlowerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1308() {
      return C[1308] = dart.fn(google_fonts.GoogleFonts.gayathriTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1309() {
      return C[1309] = dart.fn(google_fonts.GoogleFonts.gelasioTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1310() {
      return C[1310] = dart.fn(google_fonts.GoogleFonts.gentiumBasicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1311() {
      return C[1311] = dart.fn(google_fonts.GoogleFonts.gentiumBookBasicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1312() {
      return C[1312] = dart.fn(google_fonts.GoogleFonts.geoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1313() {
      return C[1313] = dart.fn(google_fonts.GoogleFonts.geostarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1314() {
      return C[1314] = dart.fn(google_fonts.GoogleFonts.geostarFillTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1315() {
      return C[1315] = dart.fn(google_fonts.GoogleFonts.germaniaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1316() {
      return C[1316] = dart.fn(google_fonts.GoogleFonts.giduguTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1317() {
      return C[1317] = dart.fn(google_fonts.GoogleFonts.gildaDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1318() {
      return C[1318] = dart.fn(google_fonts.GoogleFonts.girassolTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1319() {
      return C[1319] = dart.fn(google_fonts.GoogleFonts.giveYouGloryTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1320() {
      return C[1320] = dart.fn(google_fonts.GoogleFonts.glassAntiquaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1321() {
      return C[1321] = dart.fn(google_fonts.GoogleFonts.glegooTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1322() {
      return C[1322] = dart.fn(google_fonts.GoogleFonts.gloriaHallelujahTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1323() {
      return C[1323] = dart.fn(google_fonts.GoogleFonts.goblinOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1324() {
      return C[1324] = dart.fn(google_fonts.GoogleFonts.gochiHandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1325() {
      return C[1325] = dart.fn(google_fonts.GoogleFonts.gorditasTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1326() {
      return C[1326] = dart.fn(google_fonts.GoogleFonts.gothicA1TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1327() {
      return C[1327] = dart.fn(google_fonts.GoogleFonts.gotuTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1328() {
      return C[1328] = dart.fn(google_fonts.GoogleFonts.goudyBookletter1911TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1329() {
      return C[1329] = dart.fn(google_fonts.GoogleFonts.graduateTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1330() {
      return C[1330] = dart.fn(google_fonts.GoogleFonts.grandHotelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1331() {
      return C[1331] = dart.fn(google_fonts.GoogleFonts.gravitasOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1332() {
      return C[1332] = dart.fn(google_fonts.GoogleFonts.greatVibesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1333() {
      return C[1333] = dart.fn(google_fonts.GoogleFonts.grenzeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1334() {
      return C[1334] = dart.fn(google_fonts.GoogleFonts.griffyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1335() {
      return C[1335] = dart.fn(google_fonts.GoogleFonts.gruppoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1336() {
      return C[1336] = dart.fn(google_fonts.GoogleFonts.gudeaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1337() {
      return C[1337] = dart.fn(google_fonts.GoogleFonts.gugiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1338() {
      return C[1338] = dart.fn(google_fonts.GoogleFonts.gupterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1339() {
      return C[1339] = dart.fn(google_fonts.GoogleFonts.gurajadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1340() {
      return C[1340] = dart.fn(google_fonts.GoogleFonts.habibiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1341() {
      return C[1341] = dart.fn(google_fonts.GoogleFonts.halantTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1342() {
      return C[1342] = dart.fn(google_fonts.GoogleFonts.hammersmithOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1343() {
      return C[1343] = dart.fn(google_fonts.GoogleFonts.hanaleiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1344() {
      return C[1344] = dart.fn(google_fonts.GoogleFonts.hanaleiFillTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1345() {
      return C[1345] = dart.fn(google_fonts.GoogleFonts.handleeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1346() {
      return C[1346] = dart.fn(google_fonts.GoogleFonts.happyMonkeyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1347() {
      return C[1347] = dart.fn(google_fonts.GoogleFonts.harmattanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1348() {
      return C[1348] = dart.fn(google_fonts.GoogleFonts.headlandOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1349() {
      return C[1349] = dart.fn(google_fonts.GoogleFonts.heeboTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1350() {
      return C[1350] = dart.fn(google_fonts.GoogleFonts.hennyPennyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1351() {
      return C[1351] = dart.fn(google_fonts.GoogleFonts.heptaSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1352() {
      return C[1352] = dart.fn(google_fonts.GoogleFonts.herrVonMuellerhoffTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1353() {
      return C[1353] = dart.fn(google_fonts.GoogleFonts.hiMelodyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1354() {
      return C[1354] = dart.fn(google_fonts.GoogleFonts.hindTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1355() {
      return C[1355] = dart.fn(google_fonts.GoogleFonts.hindGunturTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1356() {
      return C[1356] = dart.fn(google_fonts.GoogleFonts.hindMaduraiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1357() {
      return C[1357] = dart.fn(google_fonts.GoogleFonts.hindSiliguriTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1358() {
      return C[1358] = dart.fn(google_fonts.GoogleFonts.hindVadodaraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1359() {
      return C[1359] = dart.fn(google_fonts.GoogleFonts.holtwoodOneScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1360() {
      return C[1360] = dart.fn(google_fonts.GoogleFonts.homemadeAppleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1361() {
      return C[1361] = dart.fn(google_fonts.GoogleFonts.homenajeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1362() {
      return C[1362] = dart.fn(google_fonts.GoogleFonts.ibmPlexMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1363() {
      return C[1363] = dart.fn(google_fonts.GoogleFonts.ibmPlexSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1364() {
      return C[1364] = dart.fn(google_fonts.GoogleFonts.ibmPlexSansCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1365() {
      return C[1365] = dart.fn(google_fonts.GoogleFonts.ibmPlexSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1366() {
      return C[1366] = dart.fn(google_fonts.GoogleFonts.imFellDwPicaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1367() {
      return C[1367] = dart.fn(google_fonts.GoogleFonts.imFellDwPicaScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1368() {
      return C[1368] = dart.fn(google_fonts.GoogleFonts.imFellDoublePicaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1369() {
      return C[1369] = dart.fn(google_fonts.GoogleFonts.imFellDoublePicaScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1370() {
      return C[1370] = dart.fn(google_fonts.GoogleFonts.imFellEnglishTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1371() {
      return C[1371] = dart.fn(google_fonts.GoogleFonts.imFellEnglishScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1372() {
      return C[1372] = dart.fn(google_fonts.GoogleFonts.imFellFrenchCanonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1373() {
      return C[1373] = dart.fn(google_fonts.GoogleFonts.imFellFrenchCanonScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1374() {
      return C[1374] = dart.fn(google_fonts.GoogleFonts.imFellGreatPrimerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1375() {
      return C[1375] = dart.fn(google_fonts.GoogleFonts.imFellGreatPrimerScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1376() {
      return C[1376] = dart.fn(google_fonts.GoogleFonts.ibarraRealNovaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1377() {
      return C[1377] = dart.fn(google_fonts.GoogleFonts.icebergTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1378() {
      return C[1378] = dart.fn(google_fonts.GoogleFonts.icelandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1379() {
      return C[1379] = dart.fn(google_fonts.GoogleFonts.imprimaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1380() {
      return C[1380] = dart.fn(google_fonts.GoogleFonts.inconsolataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1381() {
      return C[1381] = dart.fn(google_fonts.GoogleFonts.inderTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1382() {
      return C[1382] = dart.fn(google_fonts.GoogleFonts.indieFlowerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1383() {
      return C[1383] = dart.fn(google_fonts.GoogleFonts.inikaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1384() {
      return C[1384] = dart.fn(google_fonts.GoogleFonts.inknutAntiquaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1385() {
      return C[1385] = dart.fn(google_fonts.GoogleFonts.inriaSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1386() {
      return C[1386] = dart.fn(google_fonts.GoogleFonts.inriaSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1387() {
      return C[1387] = dart.fn(google_fonts.GoogleFonts.interTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1388() {
      return C[1388] = dart.fn(google_fonts.GoogleFonts.irishGroverTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1389() {
      return C[1389] = dart.fn(google_fonts.GoogleFonts.istokWebTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1390() {
      return C[1390] = dart.fn(google_fonts.GoogleFonts.italianaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1391() {
      return C[1391] = dart.fn(google_fonts.GoogleFonts.italiannoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1392() {
      return C[1392] = dart.fn(google_fonts.GoogleFonts.itimTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1393() {
      return C[1393] = dart.fn(google_fonts.GoogleFonts.jacquesFrancoisTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1394() {
      return C[1394] = dart.fn(google_fonts.GoogleFonts.jacquesFrancoisShadowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1395() {
      return C[1395] = dart.fn(google_fonts.GoogleFonts.jaldiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1396() {
      return C[1396] = dart.fn(google_fonts.GoogleFonts.jimNightshadeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1397() {
      return C[1397] = dart.fn(google_fonts.GoogleFonts.jockeyOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1398() {
      return C[1398] = dart.fn(google_fonts.GoogleFonts.jollyLodgerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1399() {
      return C[1399] = dart.fn(google_fonts.GoogleFonts.jomhuriaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1400() {
      return C[1400] = dart.fn(google_fonts.GoogleFonts.jomolhariTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1401() {
      return C[1401] = dart.fn(google_fonts.GoogleFonts.josefinSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1402() {
      return C[1402] = dart.fn(google_fonts.GoogleFonts.josefinSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1403() {
      return C[1403] = dart.fn(google_fonts.GoogleFonts.jotiOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1404() {
      return C[1404] = dart.fn(google_fonts.GoogleFonts.juaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1405() {
      return C[1405] = dart.fn(google_fonts.GoogleFonts.judsonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1406() {
      return C[1406] = dart.fn(google_fonts.GoogleFonts.juleeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1407() {
      return C[1407] = dart.fn(google_fonts.GoogleFonts.juliusSansOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1408() {
      return C[1408] = dart.fn(google_fonts.GoogleFonts.jungeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1409() {
      return C[1409] = dart.fn(google_fonts.GoogleFonts.juraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1410() {
      return C[1410] = dart.fn(google_fonts.GoogleFonts.justAnotherHandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1411() {
      return C[1411] = dart.fn(google_fonts.GoogleFonts.justMeAgainDownHereTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1412() {
      return C[1412] = dart.fn(google_fonts.GoogleFonts.k2dTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1413() {
      return C[1413] = dart.fn(google_fonts.GoogleFonts.kadwaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1414() {
      return C[1414] = dart.fn(google_fonts.GoogleFonts.kalamTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1415() {
      return C[1415] = dart.fn(google_fonts.GoogleFonts.kameronTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1416() {
      return C[1416] = dart.fn(google_fonts.GoogleFonts.kanitTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1417() {
      return C[1417] = dart.fn(google_fonts.GoogleFonts.kantumruyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1418() {
      return C[1418] = dart.fn(google_fonts.GoogleFonts.karlaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1419() {
      return C[1419] = dart.fn(google_fonts.GoogleFonts.karmaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1420() {
      return C[1420] = dart.fn(google_fonts.GoogleFonts.katibehTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1421() {
      return C[1421] = dart.fn(google_fonts.GoogleFonts.kaushanScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1422() {
      return C[1422] = dart.fn(google_fonts.GoogleFonts.kavivanarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1423() {
      return C[1423] = dart.fn(google_fonts.GoogleFonts.kavoonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1424() {
      return C[1424] = dart.fn(google_fonts.GoogleFonts.kdamThmorTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1425() {
      return C[1425] = dart.fn(google_fonts.GoogleFonts.keaniaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1426() {
      return C[1426] = dart.fn(google_fonts.GoogleFonts.kellySlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1427() {
      return C[1427] = dart.fn(google_fonts.GoogleFonts.keniaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1428() {
      return C[1428] = dart.fn(google_fonts.GoogleFonts.khandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1429() {
      return C[1429] = dart.fn(google_fonts.GoogleFonts.khulaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1430() {
      return C[1430] = dart.fn(google_fonts.GoogleFonts.kirangHaerangTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1431() {
      return C[1431] = dart.fn(google_fonts.GoogleFonts.kiteOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1432() {
      return C[1432] = dart.fn(google_fonts.GoogleFonts.knewaveTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1433() {
      return C[1433] = dart.fn(google_fonts.GoogleFonts.koHoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1434() {
      return C[1434] = dart.fn(google_fonts.GoogleFonts.kodchasanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1435() {
      return C[1435] = dart.fn(google_fonts.GoogleFonts.kosugiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1436() {
      return C[1436] = dart.fn(google_fonts.GoogleFonts.kosugiMaruTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1437() {
      return C[1437] = dart.fn(google_fonts.GoogleFonts.kottaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1438() {
      return C[1438] = dart.fn(google_fonts.GoogleFonts.krankyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1439() {
      return C[1439] = dart.fn(google_fonts.GoogleFonts.kreonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1440() {
      return C[1440] = dart.fn(google_fonts.GoogleFonts.kristiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1441() {
      return C[1441] = dart.fn(google_fonts.GoogleFonts.kronaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1442() {
      return C[1442] = dart.fn(google_fonts.GoogleFonts.krubTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1443() {
      return C[1443] = dart.fn(google_fonts.GoogleFonts.kulimParkTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1444() {
      return C[1444] = dart.fn(google_fonts.GoogleFonts.kumarOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1445() {
      return C[1445] = dart.fn(google_fonts.GoogleFonts.kumarOneOutlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1446() {
      return C[1446] = dart.fn(google_fonts.GoogleFonts.kuraleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1447() {
      return C[1447] = dart.fn(google_fonts.GoogleFonts.laBelleAuroreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1448() {
      return C[1448] = dart.fn(google_fonts.GoogleFonts.lacquerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1449() {
      return C[1449] = dart.fn(google_fonts.GoogleFonts.lailaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1450() {
      return C[1450] = dart.fn(google_fonts.GoogleFonts.lakkiReddyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1451() {
      return C[1451] = dart.fn(google_fonts.GoogleFonts.lalezarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1452() {
      return C[1452] = dart.fn(google_fonts.GoogleFonts.lancelotTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1453() {
      return C[1453] = dart.fn(google_fonts.GoogleFonts.lateefTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1454() {
      return C[1454] = dart.fn(google_fonts.GoogleFonts.latoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1455() {
      return C[1455] = dart.fn(google_fonts.GoogleFonts.leagueScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1456() {
      return C[1456] = dart.fn(google_fonts.GoogleFonts.leckerliOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1457() {
      return C[1457] = dart.fn(google_fonts.GoogleFonts.ledgerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1458() {
      return C[1458] = dart.fn(google_fonts.GoogleFonts.lektonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1459() {
      return C[1459] = dart.fn(google_fonts.GoogleFonts.lemonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1460() {
      return C[1460] = dart.fn(google_fonts.GoogleFonts.lemonadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1461() {
      return C[1461] = dart.fn(google_fonts.GoogleFonts.lexendDecaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1462() {
      return C[1462] = dart.fn(google_fonts.GoogleFonts.lexendExaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1463() {
      return C[1463] = dart.fn(google_fonts.GoogleFonts.lexendGigaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1464() {
      return C[1464] = dart.fn(google_fonts.GoogleFonts.lexendMegaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1465() {
      return C[1465] = dart.fn(google_fonts.GoogleFonts.lexendPetaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1466() {
      return C[1466] = dart.fn(google_fonts.GoogleFonts.lexendTeraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1467() {
      return C[1467] = dart.fn(google_fonts.GoogleFonts.lexendZettaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1468() {
      return C[1468] = dart.fn(google_fonts.GoogleFonts.libreBarcode128TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1469() {
      return C[1469] = dart.fn(google_fonts.GoogleFonts.libreBarcode128TextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1470() {
      return C[1470] = dart.fn(google_fonts.GoogleFonts.libreBarcode39TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1471() {
      return C[1471] = dart.fn(google_fonts.GoogleFonts.libreBarcode39ExtendedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1472() {
      return C[1472] = dart.fn(google_fonts.GoogleFonts.libreBarcode39ExtendedTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1473() {
      return C[1473] = dart.fn(google_fonts.GoogleFonts.libreBarcode39TextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1474() {
      return C[1474] = dart.fn(google_fonts.GoogleFonts.libreBaskervilleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1475() {
      return C[1475] = dart.fn(google_fonts.GoogleFonts.libreCaslonDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1476() {
      return C[1476] = dart.fn(google_fonts.GoogleFonts.libreCaslonTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1477() {
      return C[1477] = dart.fn(google_fonts.GoogleFonts.libreFranklinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1478() {
      return C[1478] = dart.fn(google_fonts.GoogleFonts.lifeSaversTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1479() {
      return C[1479] = dart.fn(google_fonts.GoogleFonts.lilitaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1480() {
      return C[1480] = dart.fn(google_fonts.GoogleFonts.lilyScriptOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1481() {
      return C[1481] = dart.fn(google_fonts.GoogleFonts.limelightTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1482() {
      return C[1482] = dart.fn(google_fonts.GoogleFonts.lindenHillTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1483() {
      return C[1483] = dart.fn(google_fonts.GoogleFonts.literataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1484() {
      return C[1484] = dart.fn(google_fonts.GoogleFonts.liuJianMaoCaoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1485() {
      return C[1485] = dart.fn(google_fonts.GoogleFonts.livvicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1486() {
      return C[1486] = dart.fn(google_fonts.GoogleFonts.lobsterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1487() {
      return C[1487] = dart.fn(google_fonts.GoogleFonts.lobsterTwoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1488() {
      return C[1488] = dart.fn(google_fonts.GoogleFonts.londrinaOutlineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1489() {
      return C[1489] = dart.fn(google_fonts.GoogleFonts.londrinaShadowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1490() {
      return C[1490] = dart.fn(google_fonts.GoogleFonts.londrinaSketchTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1491() {
      return C[1491] = dart.fn(google_fonts.GoogleFonts.londrinaSolidTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1492() {
      return C[1492] = dart.fn(google_fonts.GoogleFonts.longCangTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1493() {
      return C[1493] = dart.fn(google_fonts.GoogleFonts.loraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1494() {
      return C[1494] = dart.fn(google_fonts.GoogleFonts.loveYaLikeASisterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1495() {
      return C[1495] = dart.fn(google_fonts.GoogleFonts.lovedByTheKingTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1496() {
      return C[1496] = dart.fn(google_fonts.GoogleFonts.loversQuarrelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1497() {
      return C[1497] = dart.fn(google_fonts.GoogleFonts.luckiestGuyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1498() {
      return C[1498] = dart.fn(google_fonts.GoogleFonts.lusitanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1499() {
      return C[1499] = dart.fn(google_fonts.GoogleFonts.lustriaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1500() {
      return C[1500] = dart.fn(google_fonts.GoogleFonts.mPlus1pTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1501() {
      return C[1501] = dart.fn(google_fonts.GoogleFonts.mPlusRounded1cTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1502() {
      return C[1502] = dart.fn(google_fonts.GoogleFonts.maShanZhengTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1503() {
      return C[1503] = dart.fn(google_fonts.GoogleFonts.macondoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1504() {
      return C[1504] = dart.fn(google_fonts.GoogleFonts.macondoSwashCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1505() {
      return C[1505] = dart.fn(google_fonts.GoogleFonts.madaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1506() {
      return C[1506] = dart.fn(google_fonts.GoogleFonts.magraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1507() {
      return C[1507] = dart.fn(google_fonts.GoogleFonts.maidenOrangeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1508() {
      return C[1508] = dart.fn(google_fonts.GoogleFonts.maitreeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1509() {
      return C[1509] = dart.fn(google_fonts.GoogleFonts.majorMonoDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1510() {
      return C[1510] = dart.fn(google_fonts.GoogleFonts.makoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1511() {
      return C[1511] = dart.fn(google_fonts.GoogleFonts.maliTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1512() {
      return C[1512] = dart.fn(google_fonts.GoogleFonts.mallannaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1513() {
      return C[1513] = dart.fn(google_fonts.GoogleFonts.mandaliTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1514() {
      return C[1514] = dart.fn(google_fonts.GoogleFonts.manjariTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1515() {
      return C[1515] = dart.fn(google_fonts.GoogleFonts.manropeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1516() {
      return C[1516] = dart.fn(google_fonts.GoogleFonts.mansalvaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1517() {
      return C[1517] = dart.fn(google_fonts.GoogleFonts.manualeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1518() {
      return C[1518] = dart.fn(google_fonts.GoogleFonts.marcellusTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1519() {
      return C[1519] = dart.fn(google_fonts.GoogleFonts.marcellusScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1520() {
      return C[1520] = dart.fn(google_fonts.GoogleFonts.marckScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1521() {
      return C[1521] = dart.fn(google_fonts.GoogleFonts.margarineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1522() {
      return C[1522] = dart.fn(google_fonts.GoogleFonts.markaziTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1523() {
      return C[1523] = dart.fn(google_fonts.GoogleFonts.markoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1524() {
      return C[1524] = dart.fn(google_fonts.GoogleFonts.marmeladTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1525() {
      return C[1525] = dart.fn(google_fonts.GoogleFonts.martelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1526() {
      return C[1526] = dart.fn(google_fonts.GoogleFonts.martelSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1527() {
      return C[1527] = dart.fn(google_fonts.GoogleFonts.marvelTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1528() {
      return C[1528] = dart.fn(google_fonts.GoogleFonts.mateTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1529() {
      return C[1529] = dart.fn(google_fonts.GoogleFonts.mateScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1530() {
      return C[1530] = dart.fn(google_fonts.GoogleFonts.mavenProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1531() {
      return C[1531] = dart.fn(google_fonts.GoogleFonts.mcLarenTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1532() {
      return C[1532] = dart.fn(google_fonts.GoogleFonts.meddonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1533() {
      return C[1533] = dart.fn(google_fonts.GoogleFonts.medievalSharpTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1534() {
      return C[1534] = dart.fn(google_fonts.GoogleFonts.medulaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1535() {
      return C[1535] = dart.fn(google_fonts.GoogleFonts.meeraInimaiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1536() {
      return C[1536] = dart.fn(google_fonts.GoogleFonts.megrimTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1537() {
      return C[1537] = dart.fn(google_fonts.GoogleFonts.meieScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1538() {
      return C[1538] = dart.fn(google_fonts.GoogleFonts.meriendaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1539() {
      return C[1539] = dart.fn(google_fonts.GoogleFonts.meriendaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1540() {
      return C[1540] = dart.fn(google_fonts.GoogleFonts.merriweatherTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1541() {
      return C[1541] = dart.fn(google_fonts.GoogleFonts.merriweatherSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1542() {
      return C[1542] = dart.fn(google_fonts.GoogleFonts.metalManiaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1543() {
      return C[1543] = dart.fn(google_fonts.GoogleFonts.metamorphousTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1544() {
      return C[1544] = dart.fn(google_fonts.GoogleFonts.metrophobicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1545() {
      return C[1545] = dart.fn(google_fonts.GoogleFonts.michromaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1546() {
      return C[1546] = dart.fn(google_fonts.GoogleFonts.milongaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1547() {
      return C[1547] = dart.fn(google_fonts.GoogleFonts.miltonianTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1548() {
      return C[1548] = dart.fn(google_fonts.GoogleFonts.miltonianTattooTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1549() {
      return C[1549] = dart.fn(google_fonts.GoogleFonts.minaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1550() {
      return C[1550] = dart.fn(google_fonts.GoogleFonts.miniverTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1551() {
      return C[1551] = dart.fn(google_fonts.GoogleFonts.miriamLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1552() {
      return C[1552] = dart.fn(google_fonts.GoogleFonts.mirzaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1553() {
      return C[1553] = dart.fn(google_fonts.GoogleFonts.missFajardoseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1554() {
      return C[1554] = dart.fn(google_fonts.GoogleFonts.mitrTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1555() {
      return C[1555] = dart.fn(google_fonts.GoogleFonts.modakTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1556() {
      return C[1556] = dart.fn(google_fonts.GoogleFonts.modernAntiquaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1557() {
      return C[1557] = dart.fn(google_fonts.GoogleFonts.mograTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1558() {
      return C[1558] = dart.fn(google_fonts.GoogleFonts.molengoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1559() {
      return C[1559] = dart.fn(google_fonts.GoogleFonts.molleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1560() {
      return C[1560] = dart.fn(google_fonts.GoogleFonts.mondaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1561() {
      return C[1561] = dart.fn(google_fonts.GoogleFonts.monofettTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1562() {
      return C[1562] = dart.fn(google_fonts.GoogleFonts.monotonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1563() {
      return C[1563] = dart.fn(google_fonts.GoogleFonts.monsieurLaDoulaiseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1564() {
      return C[1564] = dart.fn(google_fonts.GoogleFonts.montagaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1565() {
      return C[1565] = dart.fn(google_fonts.GoogleFonts.montezTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1566() {
      return C[1566] = dart.fn(google_fonts.GoogleFonts.montserratTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1567() {
      return C[1567] = dart.fn(google_fonts.GoogleFonts.montserratAlternatesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1568() {
      return C[1568] = dart.fn(google_fonts.GoogleFonts.montserratSubrayadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1569() {
      return C[1569] = dart.fn(google_fonts.GoogleFonts.mountainsOfChristmasTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1570() {
      return C[1570] = dart.fn(google_fonts.GoogleFonts.mouseMemoirsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1571() {
      return C[1571] = dart.fn(google_fonts.GoogleFonts.mrBedfortTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1572() {
      return C[1572] = dart.fn(google_fonts.GoogleFonts.mrDafoeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1573() {
      return C[1573] = dart.fn(google_fonts.GoogleFonts.mrDeHavilandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1574() {
      return C[1574] = dart.fn(google_fonts.GoogleFonts.mrsSaintDelafieldTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1575() {
      return C[1575] = dart.fn(google_fonts.GoogleFonts.mrsSheppardsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1576() {
      return C[1576] = dart.fn(google_fonts.GoogleFonts.muktaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1577() {
      return C[1577] = dart.fn(google_fonts.GoogleFonts.muktaMaheeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1578() {
      return C[1578] = dart.fn(google_fonts.GoogleFonts.muktaMalarTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1579() {
      return C[1579] = dart.fn(google_fonts.GoogleFonts.muktaVaaniTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1580() {
      return C[1580] = dart.fn(google_fonts.GoogleFonts.muliTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1581() {
      return C[1581] = dart.fn(google_fonts.GoogleFonts.mysteryQuestTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1582() {
      return C[1582] = dart.fn(google_fonts.GoogleFonts.ntrTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1583() {
      return C[1583] = dart.fn(google_fonts.GoogleFonts.nanumBrushScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1584() {
      return C[1584] = dart.fn(google_fonts.GoogleFonts.nanumGothicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1585() {
      return C[1585] = dart.fn(google_fonts.GoogleFonts.nanumGothicCodingTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1586() {
      return C[1586] = dart.fn(google_fonts.GoogleFonts.nanumMyeongjoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1587() {
      return C[1587] = dart.fn(google_fonts.GoogleFonts.nanumPenScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1588() {
      return C[1588] = dart.fn(google_fonts.GoogleFonts.neuchaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1589() {
      return C[1589] = dart.fn(google_fonts.GoogleFonts.neutonTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1590() {
      return C[1590] = dart.fn(google_fonts.GoogleFonts.newRockerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1591() {
      return C[1591] = dart.fn(google_fonts.GoogleFonts.newsCycleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1592() {
      return C[1592] = dart.fn(google_fonts.GoogleFonts.niconneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1593() {
      return C[1593] = dart.fn(google_fonts.GoogleFonts.niramitTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1594() {
      return C[1594] = dart.fn(google_fonts.GoogleFonts.nixieOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1595() {
      return C[1595] = dart.fn(google_fonts.GoogleFonts.nobileTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1596() {
      return C[1596] = dart.fn(google_fonts.GoogleFonts.noricanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1597() {
      return C[1597] = dart.fn(google_fonts.GoogleFonts.nosiferTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1598() {
      return C[1598] = dart.fn(google_fonts.GoogleFonts.notableTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1599() {
      return C[1599] = dart.fn(google_fonts.GoogleFonts.nothingYouCouldDoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1600() {
      return C[1600] = dart.fn(google_fonts.GoogleFonts.noticiaTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1601() {
      return C[1601] = dart.fn(google_fonts.GoogleFonts.notoColorEmojiCompatTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1602() {
      return C[1602] = dart.fn(google_fonts.GoogleFonts.notoSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1603() {
      return C[1603] = dart.fn(google_fonts.GoogleFonts.notoSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1604() {
      return C[1604] = dart.fn(google_fonts.GoogleFonts.novaCutTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1605() {
      return C[1605] = dart.fn(google_fonts.GoogleFonts.novaFlatTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1606() {
      return C[1606] = dart.fn(google_fonts.GoogleFonts.novaMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1607() {
      return C[1607] = dart.fn(google_fonts.GoogleFonts.novaOvalTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1608() {
      return C[1608] = dart.fn(google_fonts.GoogleFonts.novaRoundTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1609() {
      return C[1609] = dart.fn(google_fonts.GoogleFonts.novaScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1610() {
      return C[1610] = dart.fn(google_fonts.GoogleFonts.novaSlimTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1611() {
      return C[1611] = dart.fn(google_fonts.GoogleFonts.novaSquareTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1612() {
      return C[1612] = dart.fn(google_fonts.GoogleFonts.numansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1613() {
      return C[1613] = dart.fn(google_fonts.GoogleFonts.nunitoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1614() {
      return C[1614] = dart.fn(google_fonts.GoogleFonts.nunitoSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1615() {
      return C[1615] = dart.fn(google_fonts.GoogleFonts.odibeeSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1616() {
      return C[1616] = dart.fn(google_fonts.GoogleFonts.odorMeanCheyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1617() {
      return C[1617] = dart.fn(google_fonts.GoogleFonts.offsideTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1618() {
      return C[1618] = dart.fn(google_fonts.GoogleFonts.oldStandardTtTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1619() {
      return C[1619] = dart.fn(google_fonts.GoogleFonts.oldenburgTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1620() {
      return C[1620] = dart.fn(google_fonts.GoogleFonts.oleoScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1621() {
      return C[1621] = dart.fn(google_fonts.GoogleFonts.oleoScriptSwashCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1622() {
      return C[1622] = dart.fn(google_fonts.GoogleFonts.openSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1623() {
      return C[1623] = dart.fn(google_fonts.GoogleFonts.openSansCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1624() {
      return C[1624] = dart.fn(google_fonts.GoogleFonts.oranienbaumTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1625() {
      return C[1625] = dart.fn(google_fonts.GoogleFonts.orbitronTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1626() {
      return C[1626] = dart.fn(google_fonts.GoogleFonts.oreganoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1627() {
      return C[1627] = dart.fn(google_fonts.GoogleFonts.orientaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1628() {
      return C[1628] = dart.fn(google_fonts.GoogleFonts.originalSurferTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1629() {
      return C[1629] = dart.fn(google_fonts.GoogleFonts.oswaldTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1630() {
      return C[1630] = dart.fn(google_fonts.GoogleFonts.overTheRainbowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1631() {
      return C[1631] = dart.fn(google_fonts.GoogleFonts.overlockTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1632() {
      return C[1632] = dart.fn(google_fonts.GoogleFonts.overlockScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1633() {
      return C[1633] = dart.fn(google_fonts.GoogleFonts.overpassTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1634() {
      return C[1634] = dart.fn(google_fonts.GoogleFonts.overpassMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1635() {
      return C[1635] = dart.fn(google_fonts.GoogleFonts.ovoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1636() {
      return C[1636] = dart.fn(google_fonts.GoogleFonts.oxaniumTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1637() {
      return C[1637] = dart.fn(google_fonts.GoogleFonts.oxygenTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1638() {
      return C[1638] = dart.fn(google_fonts.GoogleFonts.oxygenMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1639() {
      return C[1639] = dart.fn(google_fonts.GoogleFonts.ptMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1640() {
      return C[1640] = dart.fn(google_fonts.GoogleFonts.ptSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1641() {
      return C[1641] = dart.fn(google_fonts.GoogleFonts.ptSansCaptionTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1642() {
      return C[1642] = dart.fn(google_fonts.GoogleFonts.ptSansNarrowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1643() {
      return C[1643] = dart.fn(google_fonts.GoogleFonts.ptSerifTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1644() {
      return C[1644] = dart.fn(google_fonts.GoogleFonts.ptSerifCaptionTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1645() {
      return C[1645] = dart.fn(google_fonts.GoogleFonts.pacificoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1646() {
      return C[1646] = dart.fn(google_fonts.GoogleFonts.padaukTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1647() {
      return C[1647] = dart.fn(google_fonts.GoogleFonts.palanquinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1648() {
      return C[1648] = dart.fn(google_fonts.GoogleFonts.palanquinDarkTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1649() {
      return C[1649] = dart.fn(google_fonts.GoogleFonts.pangolinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1650() {
      return C[1650] = dart.fn(google_fonts.GoogleFonts.paprikaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1651() {
      return C[1651] = dart.fn(google_fonts.GoogleFonts.parisienneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1652() {
      return C[1652] = dart.fn(google_fonts.GoogleFonts.passeroOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1653() {
      return C[1653] = dart.fn(google_fonts.GoogleFonts.passionOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1654() {
      return C[1654] = dart.fn(google_fonts.GoogleFonts.pathwayGothicOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1655() {
      return C[1655] = dart.fn(google_fonts.GoogleFonts.patrickHandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1656() {
      return C[1656] = dart.fn(google_fonts.GoogleFonts.patrickHandScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1657() {
      return C[1657] = dart.fn(google_fonts.GoogleFonts.pattayaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1658() {
      return C[1658] = dart.fn(google_fonts.GoogleFonts.patuaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1659() {
      return C[1659] = dart.fn(google_fonts.GoogleFonts.pavanamTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1660() {
      return C[1660] = dart.fn(google_fonts.GoogleFonts.paytoneOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1661() {
      return C[1661] = dart.fn(google_fonts.GoogleFonts.peddanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1662() {
      return C[1662] = dart.fn(google_fonts.GoogleFonts.peraltaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1663() {
      return C[1663] = dart.fn(google_fonts.GoogleFonts.permanentMarkerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1664() {
      return C[1664] = dart.fn(google_fonts.GoogleFonts.petitFormalScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1665() {
      return C[1665] = dart.fn(google_fonts.GoogleFonts.petronaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1666() {
      return C[1666] = dart.fn(google_fonts.GoogleFonts.philosopherTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1667() {
      return C[1667] = dart.fn(google_fonts.GoogleFonts.piedraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1668() {
      return C[1668] = dart.fn(google_fonts.GoogleFonts.pinyonScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1669() {
      return C[1669] = dart.fn(google_fonts.GoogleFonts.pirataOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1670() {
      return C[1670] = dart.fn(google_fonts.GoogleFonts.plasterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1671() {
      return C[1671] = dart.fn(google_fonts.GoogleFonts.playTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1672() {
      return C[1672] = dart.fn(google_fonts.GoogleFonts.playballTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1673() {
      return C[1673] = dart.fn(google_fonts.GoogleFonts.playfairDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1674() {
      return C[1674] = dart.fn(google_fonts.GoogleFonts.playfairDisplayScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1675() {
      return C[1675] = dart.fn(google_fonts.GoogleFonts.podkovaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1676() {
      return C[1676] = dart.fn(google_fonts.GoogleFonts.poiretOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1677() {
      return C[1677] = dart.fn(google_fonts.GoogleFonts.pollerOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1678() {
      return C[1678] = dart.fn(google_fonts.GoogleFonts.polyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1679() {
      return C[1679] = dart.fn(google_fonts.GoogleFonts.pompiereTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1680() {
      return C[1680] = dart.fn(google_fonts.GoogleFonts.pontanoSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1681() {
      return C[1681] = dart.fn(google_fonts.GoogleFonts.poorStoryTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1682() {
      return C[1682] = dart.fn(google_fonts.GoogleFonts.poppinsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1683() {
      return C[1683] = dart.fn(google_fonts.GoogleFonts.portLligatSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1684() {
      return C[1684] = dart.fn(google_fonts.GoogleFonts.portLligatSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1685() {
      return C[1685] = dart.fn(google_fonts.GoogleFonts.pragatiNarrowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1686() {
      return C[1686] = dart.fn(google_fonts.GoogleFonts.prataTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1687() {
      return C[1687] = dart.fn(google_fonts.GoogleFonts.pressStart2pTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1688() {
      return C[1688] = dart.fn(google_fonts.GoogleFonts.pridiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1689() {
      return C[1689] = dart.fn(google_fonts.GoogleFonts.princessSofiaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1690() {
      return C[1690] = dart.fn(google_fonts.GoogleFonts.procionoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1691() {
      return C[1691] = dart.fn(google_fonts.GoogleFonts.promptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1692() {
      return C[1692] = dart.fn(google_fonts.GoogleFonts.prostoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1693() {
      return C[1693] = dart.fn(google_fonts.GoogleFonts.prozaLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1694() {
      return C[1694] = dart.fn(google_fonts.GoogleFonts.publicSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1695() {
      return C[1695] = dart.fn(google_fonts.GoogleFonts.puritanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1696() {
      return C[1696] = dart.fn(google_fonts.GoogleFonts.purplePurseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1697() {
      return C[1697] = dart.fn(google_fonts.GoogleFonts.quandoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1698() {
      return C[1698] = dart.fn(google_fonts.GoogleFonts.quanticoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1699() {
      return C[1699] = dart.fn(google_fonts.GoogleFonts.quattrocentoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1700() {
      return C[1700] = dart.fn(google_fonts.GoogleFonts.quattrocentoSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1701() {
      return C[1701] = dart.fn(google_fonts.GoogleFonts.questrialTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1702() {
      return C[1702] = dart.fn(google_fonts.GoogleFonts.quicksandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1703() {
      return C[1703] = dart.fn(google_fonts.GoogleFonts.quintessentialTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1704() {
      return C[1704] = dart.fn(google_fonts.GoogleFonts.qwigleyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1705() {
      return C[1705] = dart.fn(google_fonts.GoogleFonts.racingSansOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1706() {
      return C[1706] = dart.fn(google_fonts.GoogleFonts.radleyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1707() {
      return C[1707] = dart.fn(google_fonts.GoogleFonts.rajdhaniTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1708() {
      return C[1708] = dart.fn(google_fonts.GoogleFonts.rakkasTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1709() {
      return C[1709] = dart.fn(google_fonts.GoogleFonts.ralewayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1710() {
      return C[1710] = dart.fn(google_fonts.GoogleFonts.ralewayDotsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1711() {
      return C[1711] = dart.fn(google_fonts.GoogleFonts.ramabhadraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1712() {
      return C[1712] = dart.fn(google_fonts.GoogleFonts.ramarajaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1713() {
      return C[1713] = dart.fn(google_fonts.GoogleFonts.ramblaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1714() {
      return C[1714] = dart.fn(google_fonts.GoogleFonts.rammettoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1715() {
      return C[1715] = dart.fn(google_fonts.GoogleFonts.ranchersTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1716() {
      return C[1716] = dart.fn(google_fonts.GoogleFonts.ranchoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1717() {
      return C[1717] = dart.fn(google_fonts.GoogleFonts.rangaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1718() {
      return C[1718] = dart.fn(google_fonts.GoogleFonts.rasaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1719() {
      return C[1719] = dart.fn(google_fonts.GoogleFonts.rationaleTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1720() {
      return C[1720] = dart.fn(google_fonts.GoogleFonts.raviPrakashTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1721() {
      return C[1721] = dart.fn(google_fonts.GoogleFonts.redHatDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1722() {
      return C[1722] = dart.fn(google_fonts.GoogleFonts.redHatTextTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1723() {
      return C[1723] = dart.fn(google_fonts.GoogleFonts.redressedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1724() {
      return C[1724] = dart.fn(google_fonts.GoogleFonts.reemKufiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1725() {
      return C[1725] = dart.fn(google_fonts.GoogleFonts.reenieBeanieTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1726() {
      return C[1726] = dart.fn(google_fonts.GoogleFonts.revaliaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1727() {
      return C[1727] = dart.fn(google_fonts.GoogleFonts.rhodiumLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1728() {
      return C[1728] = dart.fn(google_fonts.GoogleFonts.ribeyeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1729() {
      return C[1729] = dart.fn(google_fonts.GoogleFonts.ribeyeMarrowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1730() {
      return C[1730] = dart.fn(google_fonts.GoogleFonts.righteousTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1731() {
      return C[1731] = dart.fn(google_fonts.GoogleFonts.risqueTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1732() {
      return C[1732] = dart.fn(google_fonts.GoogleFonts.robotoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1733() {
      return C[1733] = dart.fn(google_fonts.GoogleFonts.robotoCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1734() {
      return C[1734] = dart.fn(google_fonts.GoogleFonts.robotoMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1735() {
      return C[1735] = dart.fn(google_fonts.GoogleFonts.robotoSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1736() {
      return C[1736] = dart.fn(google_fonts.GoogleFonts.rochesterTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1737() {
      return C[1737] = dart.fn(google_fonts.GoogleFonts.rockSaltTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1738() {
      return C[1738] = dart.fn(google_fonts.GoogleFonts.rokkittTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1739() {
      return C[1739] = dart.fn(google_fonts.GoogleFonts.romanescoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1740() {
      return C[1740] = dart.fn(google_fonts.GoogleFonts.ropaSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1741() {
      return C[1741] = dart.fn(google_fonts.GoogleFonts.rosarioTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1742() {
      return C[1742] = dart.fn(google_fonts.GoogleFonts.rosarivoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1743() {
      return C[1743] = dart.fn(google_fonts.GoogleFonts.rougeScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1744() {
      return C[1744] = dart.fn(google_fonts.GoogleFonts.rozhaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1745() {
      return C[1745] = dart.fn(google_fonts.GoogleFonts.rubikTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1746() {
      return C[1746] = dart.fn(google_fonts.GoogleFonts.rubikMonoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1747() {
      return C[1747] = dart.fn(google_fonts.GoogleFonts.rudaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1748() {
      return C[1748] = dart.fn(google_fonts.GoogleFonts.rufinaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1749() {
      return C[1749] = dart.fn(google_fonts.GoogleFonts.rugeBoogieTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1750() {
      return C[1750] = dart.fn(google_fonts.GoogleFonts.rulukoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1751() {
      return C[1751] = dart.fn(google_fonts.GoogleFonts.rumRaisinTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1752() {
      return C[1752] = dart.fn(google_fonts.GoogleFonts.ruslanDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1753() {
      return C[1753] = dart.fn(google_fonts.GoogleFonts.russoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1754() {
      return C[1754] = dart.fn(google_fonts.GoogleFonts.ruthieTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1755() {
      return C[1755] = dart.fn(google_fonts.GoogleFonts.ryeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1756() {
      return C[1756] = dart.fn(google_fonts.GoogleFonts.sacramentoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1757() {
      return C[1757] = dart.fn(google_fonts.GoogleFonts.sahityaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1758() {
      return C[1758] = dart.fn(google_fonts.GoogleFonts.sailTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1759() {
      return C[1759] = dart.fn(google_fonts.GoogleFonts.sairaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1760() {
      return C[1760] = dart.fn(google_fonts.GoogleFonts.sairaCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1761() {
      return C[1761] = dart.fn(google_fonts.GoogleFonts.sairaExtraCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1762() {
      return C[1762] = dart.fn(google_fonts.GoogleFonts.sairaSemiCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1763() {
      return C[1763] = dart.fn(google_fonts.GoogleFonts.sairaStencilOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1764() {
      return C[1764] = dart.fn(google_fonts.GoogleFonts.salsaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1765() {
      return C[1765] = dart.fn(google_fonts.GoogleFonts.sanchezTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1766() {
      return C[1766] = dart.fn(google_fonts.GoogleFonts.sancreekTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1767() {
      return C[1767] = dart.fn(google_fonts.GoogleFonts.sansitaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1768() {
      return C[1768] = dart.fn(google_fonts.GoogleFonts.sarabunTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1769() {
      return C[1769] = dart.fn(google_fonts.GoogleFonts.saralaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1770() {
      return C[1770] = dart.fn(google_fonts.GoogleFonts.sarinaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1771() {
      return C[1771] = dart.fn(google_fonts.GoogleFonts.sarpanchTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1772() {
      return C[1772] = dart.fn(google_fonts.GoogleFonts.satisfyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1773() {
      return C[1773] = dart.fn(google_fonts.GoogleFonts.sawarabiGothicTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1774() {
      return C[1774] = dart.fn(google_fonts.GoogleFonts.sawarabiMinchoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1775() {
      return C[1775] = dart.fn(google_fonts.GoogleFonts.scadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1776() {
      return C[1776] = dart.fn(google_fonts.GoogleFonts.scheherazadeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1777() {
      return C[1777] = dart.fn(google_fonts.GoogleFonts.schoolbellTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1778() {
      return C[1778] = dart.fn(google_fonts.GoogleFonts.scopeOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1779() {
      return C[1779] = dart.fn(google_fonts.GoogleFonts.seaweedScriptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1780() {
      return C[1780] = dart.fn(google_fonts.GoogleFonts.secularOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1781() {
      return C[1781] = dart.fn(google_fonts.GoogleFonts.sedgwickAveTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1782() {
      return C[1782] = dart.fn(google_fonts.GoogleFonts.sedgwickAveDisplayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1783() {
      return C[1783] = dart.fn(google_fonts.GoogleFonts.senTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1784() {
      return C[1784] = dart.fn(google_fonts.GoogleFonts.sevillanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1785() {
      return C[1785] = dart.fn(google_fonts.GoogleFonts.seymourOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1786() {
      return C[1786] = dart.fn(google_fonts.GoogleFonts.shadowsIntoLightTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1787() {
      return C[1787] = dart.fn(google_fonts.GoogleFonts.shadowsIntoLightTwoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1788() {
      return C[1788] = dart.fn(google_fonts.GoogleFonts.shantiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1789() {
      return C[1789] = dart.fn(google_fonts.GoogleFonts.shareTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1790() {
      return C[1790] = dart.fn(google_fonts.GoogleFonts.shareTechTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1791() {
      return C[1791] = dart.fn(google_fonts.GoogleFonts.shareTechMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1792() {
      return C[1792] = dart.fn(google_fonts.GoogleFonts.shojumaruTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1793() {
      return C[1793] = dart.fn(google_fonts.GoogleFonts.shortStackTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1794() {
      return C[1794] = dart.fn(google_fonts.GoogleFonts.shrikhandTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1795() {
      return C[1795] = dart.fn(google_fonts.GoogleFonts.sigmarOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1796() {
      return C[1796] = dart.fn(google_fonts.GoogleFonts.signikaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1797() {
      return C[1797] = dart.fn(google_fonts.GoogleFonts.signikaNegativeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1798() {
      return C[1798] = dart.fn(google_fonts.GoogleFonts.simonettaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1799() {
      return C[1799] = dart.fn(google_fonts.GoogleFonts.singleDayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1800() {
      return C[1800] = dart.fn(google_fonts.GoogleFonts.sintonyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1801() {
      return C[1801] = dart.fn(google_fonts.GoogleFonts.sirinStencilTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1802() {
      return C[1802] = dart.fn(google_fonts.GoogleFonts.sixCapsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1803() {
      return C[1803] = dart.fn(google_fonts.GoogleFonts.skranjiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1804() {
      return C[1804] = dart.fn(google_fonts.GoogleFonts.slabo13pxTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1805() {
      return C[1805] = dart.fn(google_fonts.GoogleFonts.slabo27pxTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1806() {
      return C[1806] = dart.fn(google_fonts.GoogleFonts.slackeyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1807() {
      return C[1807] = dart.fn(google_fonts.GoogleFonts.smokumTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1808() {
      return C[1808] = dart.fn(google_fonts.GoogleFonts.smytheTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1809() {
      return C[1809] = dart.fn(google_fonts.GoogleFonts.snigletTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1810() {
      return C[1810] = dart.fn(google_fonts.GoogleFonts.snippetTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1811() {
      return C[1811] = dart.fn(google_fonts.GoogleFonts.snowburstOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1812() {
      return C[1812] = dart.fn(google_fonts.GoogleFonts.sofadiOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1813() {
      return C[1813] = dart.fn(google_fonts.GoogleFonts.sofiaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1814() {
      return C[1814] = dart.fn(google_fonts.GoogleFonts.solwayTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1815() {
      return C[1815] = dart.fn(google_fonts.GoogleFonts.songMyungTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1816() {
      return C[1816] = dart.fn(google_fonts.GoogleFonts.sonsieOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1817() {
      return C[1817] = dart.fn(google_fonts.GoogleFonts.sortsMillGoudyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1818() {
      return C[1818] = dart.fn(google_fonts.GoogleFonts.sourceCodeProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1819() {
      return C[1819] = dart.fn(google_fonts.GoogleFonts.sourceSansProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1820() {
      return C[1820] = dart.fn(google_fonts.GoogleFonts.sourceSerifProTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1821() {
      return C[1821] = dart.fn(google_fonts.GoogleFonts.spaceMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1822() {
      return C[1822] = dart.fn(google_fonts.GoogleFonts.spartanTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1823() {
      return C[1823] = dart.fn(google_fonts.GoogleFonts.specialEliteTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1824() {
      return C[1824] = dart.fn(google_fonts.GoogleFonts.spectralTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1825() {
      return C[1825] = dart.fn(google_fonts.GoogleFonts.spectralScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1826() {
      return C[1826] = dart.fn(google_fonts.GoogleFonts.spicyRiceTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1827() {
      return C[1827] = dart.fn(google_fonts.GoogleFonts.spinnakerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1828() {
      return C[1828] = dart.fn(google_fonts.GoogleFonts.spiraxTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1829() {
      return C[1829] = dart.fn(google_fonts.GoogleFonts.squadaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1830() {
      return C[1830] = dart.fn(google_fonts.GoogleFonts.sreeKrushnadevarayaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1831() {
      return C[1831] = dart.fn(google_fonts.GoogleFonts.srirachaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1832() {
      return C[1832] = dart.fn(google_fonts.GoogleFonts.srisakdiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1833() {
      return C[1833] = dart.fn(google_fonts.GoogleFonts.staatlichesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1834() {
      return C[1834] = dart.fn(google_fonts.GoogleFonts.stalemateTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1835() {
      return C[1835] = dart.fn(google_fonts.GoogleFonts.stalinistOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1836() {
      return C[1836] = dart.fn(google_fonts.GoogleFonts.stardosStencilTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1837() {
      return C[1837] = dart.fn(google_fonts.GoogleFonts.stintUltraCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1838() {
      return C[1838] = dart.fn(google_fonts.GoogleFonts.stintUltraExpandedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1839() {
      return C[1839] = dart.fn(google_fonts.GoogleFonts.stokeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1840() {
      return C[1840] = dart.fn(google_fonts.GoogleFonts.straitTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1841() {
      return C[1841] = dart.fn(google_fonts.GoogleFonts.stylishTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1842() {
      return C[1842] = dart.fn(google_fonts.GoogleFonts.sueEllenFranciscoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1843() {
      return C[1843] = dart.fn(google_fonts.GoogleFonts.suezOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1844() {
      return C[1844] = dart.fn(google_fonts.GoogleFonts.sulphurPointTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1845() {
      return C[1845] = dart.fn(google_fonts.GoogleFonts.sumanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1846() {
      return C[1846] = dart.fn(google_fonts.GoogleFonts.sunflowerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1847() {
      return C[1847] = dart.fn(google_fonts.GoogleFonts.sunshineyTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1848() {
      return C[1848] = dart.fn(google_fonts.GoogleFonts.supermercadoOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1849() {
      return C[1849] = dart.fn(google_fonts.GoogleFonts.suraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1850() {
      return C[1850] = dart.fn(google_fonts.GoogleFonts.surannaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1851() {
      return C[1851] = dart.fn(google_fonts.GoogleFonts.suravaramTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1852() {
      return C[1852] = dart.fn(google_fonts.GoogleFonts.swankyAndMooMooTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1853() {
      return C[1853] = dart.fn(google_fonts.GoogleFonts.syncopateTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1854() {
      return C[1854] = dart.fn(google_fonts.GoogleFonts.tajawalTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1855() {
      return C[1855] = dart.fn(google_fonts.GoogleFonts.tangerineTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1856() {
      return C[1856] = dart.fn(google_fonts.GoogleFonts.tauriTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1857() {
      return C[1857] = dart.fn(google_fonts.GoogleFonts.tavirajTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1858() {
      return C[1858] = dart.fn(google_fonts.GoogleFonts.tekoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1859() {
      return C[1859] = dart.fn(google_fonts.GoogleFonts.telexTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1860() {
      return C[1860] = dart.fn(google_fonts.GoogleFonts.tenaliRamakrishnaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1861() {
      return C[1861] = dart.fn(google_fonts.GoogleFonts.tenorSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1862() {
      return C[1862] = dart.fn(google_fonts.GoogleFonts.textMeOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1863() {
      return C[1863] = dart.fn(google_fonts.GoogleFonts.thasadithTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1864() {
      return C[1864] = dart.fn(google_fonts.GoogleFonts.theGirlNextDoorTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1865() {
      return C[1865] = dart.fn(google_fonts.GoogleFonts.tienneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1866() {
      return C[1866] = dart.fn(google_fonts.GoogleFonts.tillanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1867() {
      return C[1867] = dart.fn(google_fonts.GoogleFonts.timmanaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1868() {
      return C[1868] = dart.fn(google_fonts.GoogleFonts.tinosTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1869() {
      return C[1869] = dart.fn(google_fonts.GoogleFonts.titanOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1870() {
      return C[1870] = dart.fn(google_fonts.GoogleFonts.titilliumWebTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1871() {
      return C[1871] = dart.fn(google_fonts.GoogleFonts.tomorrowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1872() {
      return C[1872] = dart.fn(google_fonts.GoogleFonts.tradeWindsTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1873() {
      return C[1873] = dart.fn(google_fonts.GoogleFonts.trirongTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1874() {
      return C[1874] = dart.fn(google_fonts.GoogleFonts.trocchiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1875() {
      return C[1875] = dart.fn(google_fonts.GoogleFonts.trochutTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1876() {
      return C[1876] = dart.fn(google_fonts.GoogleFonts.trykkerTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1877() {
      return C[1877] = dart.fn(google_fonts.GoogleFonts.tulpenOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1878() {
      return C[1878] = dart.fn(google_fonts.GoogleFonts.turretRoadTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1879() {
      return C[1879] = dart.fn(google_fonts.GoogleFonts.ubuntuTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1880() {
      return C[1880] = dart.fn(google_fonts.GoogleFonts.ubuntuCondensedTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1881() {
      return C[1881] = dart.fn(google_fonts.GoogleFonts.ubuntuMonoTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1882() {
      return C[1882] = dart.fn(google_fonts.GoogleFonts.ultraTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1883() {
      return C[1883] = dart.fn(google_fonts.GoogleFonts.uncialAntiquaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1884() {
      return C[1884] = dart.fn(google_fonts.GoogleFonts.underdogTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1885() {
      return C[1885] = dart.fn(google_fonts.GoogleFonts.unicaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1886() {
      return C[1886] = dart.fn(google_fonts.GoogleFonts.unifrakturCookTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1887() {
      return C[1887] = dart.fn(google_fonts.GoogleFonts.unifrakturMaguntiaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1888() {
      return C[1888] = dart.fn(google_fonts.GoogleFonts.unkemptTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1889() {
      return C[1889] = dart.fn(google_fonts.GoogleFonts.unlockTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1890() {
      return C[1890] = dart.fn(google_fonts.GoogleFonts.unnaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1891() {
      return C[1891] = dart.fn(google_fonts.GoogleFonts.vt323TextTheme, T.TextThemeLToTextThemeL());
    },
    get C1892() {
      return C[1892] = dart.fn(google_fonts.GoogleFonts.vampiroOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1893() {
      return C[1893] = dart.fn(google_fonts.GoogleFonts.varelaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1894() {
      return C[1894] = dart.fn(google_fonts.GoogleFonts.varelaRoundTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1895() {
      return C[1895] = dart.fn(google_fonts.GoogleFonts.vastShadowTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1896() {
      return C[1896] = dart.fn(google_fonts.GoogleFonts.vesperLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1897() {
      return C[1897] = dart.fn(google_fonts.GoogleFonts.viaodaLibreTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1898() {
      return C[1898] = dart.fn(google_fonts.GoogleFonts.vibesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1899() {
      return C[1899] = dart.fn(google_fonts.GoogleFonts.viburTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1900() {
      return C[1900] = dart.fn(google_fonts.GoogleFonts.vidalokaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1901() {
      return C[1901] = dart.fn(google_fonts.GoogleFonts.vigaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1902() {
      return C[1902] = dart.fn(google_fonts.GoogleFonts.vocesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1903() {
      return C[1903] = dart.fn(google_fonts.GoogleFonts.volkhovTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1904() {
      return C[1904] = dart.fn(google_fonts.GoogleFonts.vollkornTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1905() {
      return C[1905] = dart.fn(google_fonts.GoogleFonts.vollkornScTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1906() {
      return C[1906] = dart.fn(google_fonts.GoogleFonts.voltaireTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1907() {
      return C[1907] = dart.fn(google_fonts.GoogleFonts.waitingForTheSunriseTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1908() {
      return C[1908] = dart.fn(google_fonts.GoogleFonts.wallpoetTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1909() {
      return C[1909] = dart.fn(google_fonts.GoogleFonts.walterTurncoatTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1910() {
      return C[1910] = dart.fn(google_fonts.GoogleFonts.warnesTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1911() {
      return C[1911] = dart.fn(google_fonts.GoogleFonts.wellfleetTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1912() {
      return C[1912] = dart.fn(google_fonts.GoogleFonts.wendyOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1913() {
      return C[1913] = dart.fn(google_fonts.GoogleFonts.wireOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1914() {
      return C[1914] = dart.fn(google_fonts.GoogleFonts.workSansTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1915() {
      return C[1915] = dart.fn(google_fonts.GoogleFonts.yanoneKaffeesatzTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1916() {
      return C[1916] = dart.fn(google_fonts.GoogleFonts.yantramanavTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1917() {
      return C[1917] = dart.fn(google_fonts.GoogleFonts.yatraOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1918() {
      return C[1918] = dart.fn(google_fonts.GoogleFonts.yellowtailTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1919() {
      return C[1919] = dart.fn(google_fonts.GoogleFonts.yeonSungTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1920() {
      return C[1920] = dart.fn(google_fonts.GoogleFonts.yesevaOneTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1921() {
      return C[1921] = dart.fn(google_fonts.GoogleFonts.yesteryearTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1922() {
      return C[1922] = dart.fn(google_fonts.GoogleFonts.yrsaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1923() {
      return C[1923] = dart.fn(google_fonts.GoogleFonts.zcoolKuaiLeTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1924() {
      return C[1924] = dart.fn(google_fonts.GoogleFonts.zcoolQingKeHuangYouTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1925() {
      return C[1925] = dart.fn(google_fonts.GoogleFonts.zcoolXiaoWeiTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1926() {
      return C[1926] = dart.fn(google_fonts.GoogleFonts.zeyadaTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1927() {
      return C[1927] = dart.fn(google_fonts.GoogleFonts.zhiMangXingTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1928() {
      return C[1928] = dart.fn(google_fonts.GoogleFonts.zillaSlabTextTheme, T.TextThemeLToTextThemeL());
    },
    get C1929() {
      return C[1929] = dart.fn(google_fonts.GoogleFonts.zillaSlabHighlightTextTheme, T.TextThemeLToTextThemeL());
    },
    get C965() {
      return C[965] = dart.constMap(T.StringL(), T.TextThemeLToLTextThemeL(), ["ABeeZee", C[966] || CT.C966, "Abel", C[967] || CT.C967, "Abhaya Libre", C[968] || CT.C968, "Abril Fatface", C[969] || CT.C969, "Aclonica", C[970] || CT.C970, "Acme", C[971] || CT.C971, "Actor", C[972] || CT.C972, "Adamina", C[973] || CT.C973, "Advent Pro", C[974] || CT.C974, "Aguafina Script", C[975] || CT.C975, "Akronim", C[976] || CT.C976, "Aladin", C[977] || CT.C977, "Alata", C[978] || CT.C978, "Alatsi", C[979] || CT.C979, "Aldrich", C[980] || CT.C980, "Alef", C[981] || CT.C981, "Alegreya", C[982] || CT.C982, "Alegreya SC", C[983] || CT.C983, "Alegreya Sans", C[984] || CT.C984, "Alegreya Sans SC", C[985] || CT.C985, "Aleo", C[986] || CT.C986, "Alex Brush", C[987] || CT.C987, "Alfa Slab One", C[988] || CT.C988, "Alice", C[989] || CT.C989, "Alike", C[990] || CT.C990, "Alike Angular", C[991] || CT.C991, "Allan", C[992] || CT.C992, "Allerta", C[993] || CT.C993, "Allerta Stencil", C[994] || CT.C994, "Allura", C[995] || CT.C995, "Almarai", C[996] || CT.C996, "Almendra", C[997] || CT.C997, "Almendra Display", C[998] || CT.C998, "Almendra SC", C[999] || CT.C999, "Amarante", C[1000] || CT.C1000, "Amaranth", C[1001] || CT.C1001, "Amatic SC", C[1002] || CT.C1002, "Amatica SC", C[1003] || CT.C1003, "Amethysta", C[1004] || CT.C1004, "Amiko", C[1005] || CT.C1005, "Amiri", C[1006] || CT.C1006, "Amita", C[1007] || CT.C1007, "Anaheim", C[1008] || CT.C1008, "Andada", C[1009] || CT.C1009, "Andika", C[1010] || CT.C1010, "Annie Use Your Telescope", C[1011] || CT.C1011, "Anonymous Pro", C[1012] || CT.C1012, "Antic", C[1013] || CT.C1013, "Antic Didone", C[1014] || CT.C1014, "Antic Slab", C[1015] || CT.C1015, "Anton", C[1016] || CT.C1016, "Arapey", C[1017] || CT.C1017, "Arbutus", C[1018] || CT.C1018, "Arbutus Slab", C[1019] || CT.C1019, "Architects Daughter", C[1020] || CT.C1020, "Archivo", C[1021] || CT.C1021, "Archivo Black", C[1022] || CT.C1022, "Archivo Narrow", C[1023] || CT.C1023, "Aref Ruqaa", C[1024] || CT.C1024, "Arima Madurai", C[1025] || CT.C1025, "Arimo", C[1026] || CT.C1026, "Arizonia", C[1027] || CT.C1027, "Armata", C[1028] || CT.C1028, "Arsenal", C[1029] || CT.C1029, "Artifika", C[1030] || CT.C1030, "Arvo", C[1031] || CT.C1031, "Arya", C[1032] || CT.C1032, "Asap", C[1033] || CT.C1033, "Asar", C[1034] || CT.C1034, "Asset", C[1035] || CT.C1035, "Assistant", C[1036] || CT.C1036, "Astloch", C[1037] || CT.C1037, "Asul", C[1038] || CT.C1038, "Athiti", C[1039] || CT.C1039, "Atma", C[1040] || CT.C1040, "Atomic Age", C[1041] || CT.C1041, "Aubrey", C[1042] || CT.C1042, "Audiowide", C[1043] || CT.C1043, "Autour One", C[1044] || CT.C1044, "Average", C[1045] || CT.C1045, "Average Sans", C[1046] || CT.C1046, "Averia Gruesa Libre", C[1047] || CT.C1047, "Averia Libre", C[1048] || CT.C1048, "Averia Sans Libre", C[1049] || CT.C1049, "Averia Serif Libre", C[1050] || CT.C1050, "B612", C[1051] || CT.C1051, "B612 Mono", C[1052] || CT.C1052, "Bad Script", C[1053] || CT.C1053, "Bahiana", C[1054] || CT.C1054, "Bahianita", C[1055] || CT.C1055, "Bai Jamjuree", C[1056] || CT.C1056, "Baloo", C[1057] || CT.C1057, "Baloo Bhai", C[1058] || CT.C1058, "Baloo Bhaijaan", C[1059] || CT.C1059, "Baloo Bhaina", C[1060] || CT.C1060, "Baloo Chettan", C[1061] || CT.C1061, "Baloo Da", C[1062] || CT.C1062, "Baloo Paaji", C[1063] || CT.C1063, "Baloo Tamma", C[1064] || CT.C1064, "Baloo Tammudu", C[1065] || CT.C1065, "Baloo Thambi", C[1066] || CT.C1066, "Balthazar", C[1067] || CT.C1067, "Bangers", C[1068] || CT.C1068, "Barlow", C[1069] || CT.C1069, "Barlow Condensed", C[1070] || CT.C1070, "Barlow Semi Condensed", C[1071] || CT.C1071, "Barriecito", C[1072] || CT.C1072, "Barrio", C[1073] || CT.C1073, "Basic", C[1074] || CT.C1074, "Baskervville", C[1075] || CT.C1075, "Baumans", C[1076] || CT.C1076, "Be Vietnam", C[1077] || CT.C1077, "Bebas Neue", C[1078] || CT.C1078, "Belgrano", C[1079] || CT.C1079, "Bellefair", C[1080] || CT.C1080, "Belleza", C[1081] || CT.C1081, "Bellota", C[1082] || CT.C1082, "Bellota Text", C[1083] || CT.C1083, "BenchNine", C[1084] || CT.C1084, "Bentham", C[1085] || CT.C1085, "Berkshire Swash", C[1086] || CT.C1086, "Beth Ellen", C[1087] || CT.C1087, "Bevan", C[1088] || CT.C1088, "Big Shoulders Display", C[1089] || CT.C1089, "Big Shoulders Text", C[1090] || CT.C1090, "Bigelow Rules", C[1091] || CT.C1091, "Bigshot One", C[1092] || CT.C1092, "Bilbo", C[1093] || CT.C1093, "Bilbo Swash Caps", C[1094] || CT.C1094, "BioRhyme", C[1095] || CT.C1095, "BioRhyme Expanded", C[1096] || CT.C1096, "Biryani", C[1097] || CT.C1097, "Bitter", C[1098] || CT.C1098, "Black And White Picture", C[1099] || CT.C1099, "Black Han Sans", C[1100] || CT.C1100, "Black Ops One", C[1101] || CT.C1101, "Blinker", C[1102] || CT.C1102, "Bonbon", C[1103] || CT.C1103, "Boogaloo", C[1104] || CT.C1104, "Bowlby One", C[1105] || CT.C1105, "Bowlby One SC", C[1106] || CT.C1106, "Brawler", C[1107] || CT.C1107, "Bree Serif", C[1108] || CT.C1108, "Bubblegum Sans", C[1109] || CT.C1109, "Bubbler One", C[1110] || CT.C1110, "Buda", C[1111] || CT.C1111, "Buenard", C[1112] || CT.C1112, "Bungee", C[1113] || CT.C1113, "Bungee Hairline", C[1114] || CT.C1114, "Bungee Inline", C[1115] || CT.C1115, "Bungee Outline", C[1116] || CT.C1116, "Bungee Shade", C[1117] || CT.C1117, "Butcherman", C[1118] || CT.C1118, "Butterfly Kids", C[1119] || CT.C1119, "Cabin", C[1120] || CT.C1120, "Cabin Condensed", C[1121] || CT.C1121, "Cabin Sketch", C[1122] || CT.C1122, "Caesar Dressing", C[1123] || CT.C1123, "Cagliostro", C[1124] || CT.C1124, "Cairo", C[1125] || CT.C1125, "Caladea", C[1126] || CT.C1126, "Calistoga", C[1127] || CT.C1127, "Calligraffitti", C[1128] || CT.C1128, "Cambay", C[1129] || CT.C1129, "Cambo", C[1130] || CT.C1130, "Candal", C[1131] || CT.C1131, "Cantarell", C[1132] || CT.C1132, "Cantata One", C[1133] || CT.C1133, "Cantora One", C[1134] || CT.C1134, "Capriola", C[1135] || CT.C1135, "Cardo", C[1136] || CT.C1136, "Carme", C[1137] || CT.C1137, "Carrois Gothic", C[1138] || CT.C1138, "Carrois Gothic SC", C[1139] || CT.C1139, "Carter One", C[1140] || CT.C1140, "Catamaran", C[1141] || CT.C1141, "Caudex", C[1142] || CT.C1142, "Caveat", C[1143] || CT.C1143, "Caveat Brush", C[1144] || CT.C1144, "Cedarville Cursive", C[1145] || CT.C1145, "Ceviche One", C[1146] || CT.C1146, "Chakra Petch", C[1147] || CT.C1147, "Changa", C[1148] || CT.C1148, "Changa One", C[1149] || CT.C1149, "Chango", C[1150] || CT.C1150, "Charm", C[1151] || CT.C1151, "Charmonman", C[1152] || CT.C1152, "Chathura", C[1153] || CT.C1153, "Chau Philomene One", C[1154] || CT.C1154, "Chela One", C[1155] || CT.C1155, "Chelsea Market", C[1156] || CT.C1156, "Cherry Cream Soda", C[1157] || CT.C1157, "Cherry Swash", C[1158] || CT.C1158, "Chewy", C[1159] || CT.C1159, "Chicle", C[1160] || CT.C1160, "Chilanka", C[1161] || CT.C1161, "Chivo", C[1162] || CT.C1162, "Chonburi", C[1163] || CT.C1163, "Cinzel", C[1164] || CT.C1164, "Cinzel Decorative", C[1165] || CT.C1165, "Clicker Script", C[1166] || CT.C1166, "Coda", C[1167] || CT.C1167, "Coda Caption", C[1168] || CT.C1168, "Codystar", C[1169] || CT.C1169, "Coiny", C[1170] || CT.C1170, "Combo", C[1171] || CT.C1171, "Comfortaa", C[1172] || CT.C1172, "Comic Neue", C[1173] || CT.C1173, "Coming Soon", C[1174] || CT.C1174, "Concert One", C[1175] || CT.C1175, "Condiment", C[1176] || CT.C1176, "Contrail One", C[1177] || CT.C1177, "Convergence", C[1178] || CT.C1178, "Cookie", C[1179] || CT.C1179, "Copse", C[1180] || CT.C1180, "Corben", C[1181] || CT.C1181, "Cormorant", C[1182] || CT.C1182, "Cormorant Garamond", C[1183] || CT.C1183, "Cormorant Infant", C[1184] || CT.C1184, "Cormorant SC", C[1185] || CT.C1185, "Cormorant Unicase", C[1186] || CT.C1186, "Cormorant Upright", C[1187] || CT.C1187, "Courgette", C[1188] || CT.C1188, "Courier Prime", C[1189] || CT.C1189, "Cousine", C[1190] || CT.C1190, "Coustard", C[1191] || CT.C1191, "Covered By Your Grace", C[1192] || CT.C1192, "Crafty Girls", C[1193] || CT.C1193, "Creepster", C[1194] || CT.C1194, "Crete Round", C[1195] || CT.C1195, "Crimson Pro", C[1196] || CT.C1196, "Crimson Text", C[1197] || CT.C1197, "Croissant One", C[1198] || CT.C1198, "Crushed", C[1199] || CT.C1199, "Cuprum", C[1200] || CT.C1200, "Cute Font", C[1201] || CT.C1201, "Cutive", C[1202] || CT.C1202, "Cutive Mono", C[1203] || CT.C1203, "DM Sans", C[1204] || CT.C1204, "DM Serif Display", C[1205] || CT.C1205, "DM Serif Text", C[1206] || CT.C1206, "Damion", C[1207] || CT.C1207, "Dancing Script", C[1208] || CT.C1208, "Darker Grotesque", C[1209] || CT.C1209, "David Libre", C[1210] || CT.C1210, "Dawning of a New Day", C[1211] || CT.C1211, "Days One", C[1212] || CT.C1212, "Dekko", C[1213] || CT.C1213, "Delius", C[1214] || CT.C1214, "Delius Swash Caps", C[1215] || CT.C1215, "Delius Unicase", C[1216] || CT.C1216, "Della Respira", C[1217] || CT.C1217, "Denk One", C[1218] || CT.C1218, "Devonshire", C[1219] || CT.C1219, "Dhurjati", C[1220] || CT.C1220, "Didact Gothic", C[1221] || CT.C1221, "Diplomata", C[1222] || CT.C1222, "Diplomata SC", C[1223] || CT.C1223, "Do Hyeon", C[1224] || CT.C1224, "Dokdo", C[1225] || CT.C1225, "Domine", C[1226] || CT.C1226, "Donegal One", C[1227] || CT.C1227, "Doppio One", C[1228] || CT.C1228, "Dorsa", C[1229] || CT.C1229, "Dosis", C[1230] || CT.C1230, "Dr Sugiyama", C[1231] || CT.C1231, "Droid Sans", C[1232] || CT.C1232, "Droid Sans Mono", C[1233] || CT.C1233, "Droid Serif", C[1234] || CT.C1234, "Duru Sans", C[1235] || CT.C1235, "Dynalight", C[1236] || CT.C1236, "EB Garamond", C[1237] || CT.C1237, "Eagle Lake", C[1238] || CT.C1238, "East Sea Dokdo", C[1239] || CT.C1239, "Eater", C[1240] || CT.C1240, "Economica", C[1241] || CT.C1241, "Eczar", C[1242] || CT.C1242, "El Messiri", C[1243] || CT.C1243, "Electrolize", C[1244] || CT.C1244, "Elsie", C[1245] || CT.C1245, "Elsie Swash Caps", C[1246] || CT.C1246, "Emblema One", C[1247] || CT.C1247, "Emilys Candy", C[1248] || CT.C1248, "Encode Sans", C[1249] || CT.C1249, "Encode Sans Condensed", C[1250] || CT.C1250, "Encode Sans Expanded", C[1251] || CT.C1251, "Encode Sans Semi Condensed", C[1252] || CT.C1252, "Encode Sans Semi Expanded", C[1253] || CT.C1253, "Engagement", C[1254] || CT.C1254, "Englebert", C[1255] || CT.C1255, "Enriqueta", C[1256] || CT.C1256, "Erica One", C[1257] || CT.C1257, "Esteban", C[1258] || CT.C1258, "Euphoria Script", C[1259] || CT.C1259, "Ewert", C[1260] || CT.C1260, "Exo", C[1261] || CT.C1261, "Exo 2", C[1262] || CT.C1262, "Expletus Sans", C[1263] || CT.C1263, "Fahkwang", C[1264] || CT.C1264, "Fanwood Text", C[1265] || CT.C1265, "Farro", C[1266] || CT.C1266, "Farsan", C[1267] || CT.C1267, "Fascinate", C[1268] || CT.C1268, "Fascinate Inline", C[1269] || CT.C1269, "Faster One", C[1270] || CT.C1270, "Fauna One", C[1271] || CT.C1271, "Faustina", C[1272] || CT.C1272, "Federant", C[1273] || CT.C1273, "Federo", C[1274] || CT.C1274, "Felipa", C[1275] || CT.C1275, "Fenix", C[1276] || CT.C1276, "Finger Paint", C[1277] || CT.C1277, "Fira Code", C[1278] || CT.C1278, "Fira Mono", C[1279] || CT.C1279, "Fira Sans", C[1280] || CT.C1280, "Fira Sans Condensed", C[1281] || CT.C1281, "Fira Sans Extra Condensed", C[1282] || CT.C1282, "Fjalla One", C[1283] || CT.C1283, "Fjord One", C[1284] || CT.C1284, "Flamenco", C[1285] || CT.C1285, "Flavors", C[1286] || CT.C1286, "Fondamento", C[1287] || CT.C1287, "Fontdiner Swanky", C[1288] || CT.C1288, "Forum", C[1289] || CT.C1289, "Francois One", C[1290] || CT.C1290, "Frank Ruhl Libre", C[1291] || CT.C1291, "Freckle Face", C[1292] || CT.C1292, "Fredericka the Great", C[1293] || CT.C1293, "Fredoka One", C[1294] || CT.C1294, "Fresca", C[1295] || CT.C1295, "Frijole", C[1296] || CT.C1296, "Fruktur", C[1297] || CT.C1297, "Fugaz One", C[1298] || CT.C1298, "GFS Didot", C[1299] || CT.C1299, "GFS Neohellenic", C[1300] || CT.C1300, "Gabriela", C[1301] || CT.C1301, "Gaegu", C[1302] || CT.C1302, "Gafata", C[1303] || CT.C1303, "Galada", C[1304] || CT.C1304, "Galdeano", C[1305] || CT.C1305, "Galindo", C[1306] || CT.C1306, "Gamja Flower", C[1307] || CT.C1307, "Gayathri", C[1308] || CT.C1308, "Gelasio", C[1309] || CT.C1309, "Gentium Basic", C[1310] || CT.C1310, "Gentium Book Basic", C[1311] || CT.C1311, "Geo", C[1312] || CT.C1312, "Geostar", C[1313] || CT.C1313, "Geostar Fill", C[1314] || CT.C1314, "Germania One", C[1315] || CT.C1315, "Gidugu", C[1316] || CT.C1316, "Gilda Display", C[1317] || CT.C1317, "Girassol", C[1318] || CT.C1318, "Give You Glory", C[1319] || CT.C1319, "Glass Antiqua", C[1320] || CT.C1320, "Glegoo", C[1321] || CT.C1321, "Gloria Hallelujah", C[1322] || CT.C1322, "Goblin One", C[1323] || CT.C1323, "Gochi Hand", C[1324] || CT.C1324, "Gorditas", C[1325] || CT.C1325, "Gothic A1", C[1326] || CT.C1326, "Gotu", C[1327] || CT.C1327, "Goudy Bookletter 1911", C[1328] || CT.C1328, "Graduate", C[1329] || CT.C1329, "Grand Hotel", C[1330] || CT.C1330, "Gravitas One", C[1331] || CT.C1331, "Great Vibes", C[1332] || CT.C1332, "Grenze", C[1333] || CT.C1333, "Griffy", C[1334] || CT.C1334, "Gruppo", C[1335] || CT.C1335, "Gudea", C[1336] || CT.C1336, "Gugi", C[1337] || CT.C1337, "Gupter", C[1338] || CT.C1338, "Gurajada", C[1339] || CT.C1339, "Habibi", C[1340] || CT.C1340, "Halant", C[1341] || CT.C1341, "Hammersmith One", C[1342] || CT.C1342, "Hanalei", C[1343] || CT.C1343, "Hanalei Fill", C[1344] || CT.C1344, "Handlee", C[1345] || CT.C1345, "Happy Monkey", C[1346] || CT.C1346, "Harmattan", C[1347] || CT.C1347, "Headland One", C[1348] || CT.C1348, "Heebo", C[1349] || CT.C1349, "Henny Penny", C[1350] || CT.C1350, "Hepta Slab", C[1351] || CT.C1351, "Herr Von Muellerhoff", C[1352] || CT.C1352, "Hi Melody", C[1353] || CT.C1353, "Hind", C[1354] || CT.C1354, "Hind Guntur", C[1355] || CT.C1355, "Hind Madurai", C[1356] || CT.C1356, "Hind Siliguri", C[1357] || CT.C1357, "Hind Vadodara", C[1358] || CT.C1358, "Holtwood One SC", C[1359] || CT.C1359, "Homemade Apple", C[1360] || CT.C1360, "Homenaje", C[1361] || CT.C1361, "IBM Plex Mono", C[1362] || CT.C1362, "IBM Plex Sans", C[1363] || CT.C1363, "IBM Plex Sans Condensed", C[1364] || CT.C1364, "IBM Plex Serif", C[1365] || CT.C1365, "IM Fell DW Pica", C[1366] || CT.C1366, "IM Fell DW Pica SC", C[1367] || CT.C1367, "IM Fell Double Pica", C[1368] || CT.C1368, "IM Fell Double Pica SC", C[1369] || CT.C1369, "IM Fell English", C[1370] || CT.C1370, "IM Fell English SC", C[1371] || CT.C1371, "IM Fell French Canon", C[1372] || CT.C1372, "IM Fell French Canon SC", C[1373] || CT.C1373, "IM Fell Great Primer", C[1374] || CT.C1374, "IM Fell Great Primer SC", C[1375] || CT.C1375, "Ibarra Real Nova", C[1376] || CT.C1376, "Iceberg", C[1377] || CT.C1377, "Iceland", C[1378] || CT.C1378, "Imprima", C[1379] || CT.C1379, "Inconsolata", C[1380] || CT.C1380, "Inder", C[1381] || CT.C1381, "Indie Flower", C[1382] || CT.C1382, "Inika", C[1383] || CT.C1383, "Inknut Antiqua", C[1384] || CT.C1384, "Inria Sans", C[1385] || CT.C1385, "Inria Serif", C[1386] || CT.C1386, "Inter", C[1387] || CT.C1387, "Irish Grover", C[1388] || CT.C1388, "Istok Web", C[1389] || CT.C1389, "Italiana", C[1390] || CT.C1390, "Italianno", C[1391] || CT.C1391, "Itim", C[1392] || CT.C1392, "Jacques Francois", C[1393] || CT.C1393, "Jacques Francois Shadow", C[1394] || CT.C1394, "Jaldi", C[1395] || CT.C1395, "Jim Nightshade", C[1396] || CT.C1396, "Jockey One", C[1397] || CT.C1397, "Jolly Lodger", C[1398] || CT.C1398, "Jomhuria", C[1399] || CT.C1399, "Jomolhari", C[1400] || CT.C1400, "Josefin Sans", C[1401] || CT.C1401, "Josefin Slab", C[1402] || CT.C1402, "Joti One", C[1403] || CT.C1403, "Jua", C[1404] || CT.C1404, "Judson", C[1405] || CT.C1405, "Julee", C[1406] || CT.C1406, "Julius Sans One", C[1407] || CT.C1407, "Junge", C[1408] || CT.C1408, "Jura", C[1409] || CT.C1409, "Just Another Hand", C[1410] || CT.C1410, "Just Me Again Down Here", C[1411] || CT.C1411, "K2D", C[1412] || CT.C1412, "Kadwa", C[1413] || CT.C1413, "Kalam", C[1414] || CT.C1414, "Kameron", C[1415] || CT.C1415, "Kanit", C[1416] || CT.C1416, "Kantumruy", C[1417] || CT.C1417, "Karla", C[1418] || CT.C1418, "Karma", C[1419] || CT.C1419, "Katibeh", C[1420] || CT.C1420, "Kaushan Script", C[1421] || CT.C1421, "Kavivanar", C[1422] || CT.C1422, "Kavoon", C[1423] || CT.C1423, "Kdam Thmor", C[1424] || CT.C1424, "Keania One", C[1425] || CT.C1425, "Kelly Slab", C[1426] || CT.C1426, "Kenia", C[1427] || CT.C1427, "Khand", C[1428] || CT.C1428, "Khula", C[1429] || CT.C1429, "Kirang Haerang", C[1430] || CT.C1430, "Kite One", C[1431] || CT.C1431, "Knewave", C[1432] || CT.C1432, "KoHo", C[1433] || CT.C1433, "Kodchasan", C[1434] || CT.C1434, "Kosugi", C[1435] || CT.C1435, "Kosugi Maru", C[1436] || CT.C1436, "Kotta One", C[1437] || CT.C1437, "Kranky", C[1438] || CT.C1438, "Kreon", C[1439] || CT.C1439, "Kristi", C[1440] || CT.C1440, "Krona One", C[1441] || CT.C1441, "Krub", C[1442] || CT.C1442, "Kulim Park", C[1443] || CT.C1443, "Kumar One", C[1444] || CT.C1444, "Kumar One Outline", C[1445] || CT.C1445, "Kurale", C[1446] || CT.C1446, "La Belle Aurore", C[1447] || CT.C1447, "Lacquer", C[1448] || CT.C1448, "Laila", C[1449] || CT.C1449, "Lakki Reddy", C[1450] || CT.C1450, "Lalezar", C[1451] || CT.C1451, "Lancelot", C[1452] || CT.C1452, "Lateef", C[1453] || CT.C1453, "Lato", C[1454] || CT.C1454, "League Script", C[1455] || CT.C1455, "Leckerli One", C[1456] || CT.C1456, "Ledger", C[1457] || CT.C1457, "Lekton", C[1458] || CT.C1458, "Lemon", C[1459] || CT.C1459, "Lemonada", C[1460] || CT.C1460, "Lexend Deca", C[1461] || CT.C1461, "Lexend Exa", C[1462] || CT.C1462, "Lexend Giga", C[1463] || CT.C1463, "Lexend Mega", C[1464] || CT.C1464, "Lexend Peta", C[1465] || CT.C1465, "Lexend Tera", C[1466] || CT.C1466, "Lexend Zetta", C[1467] || CT.C1467, "Libre Barcode 128", C[1468] || CT.C1468, "Libre Barcode 128 Text", C[1469] || CT.C1469, "Libre Barcode 39", C[1470] || CT.C1470, "Libre Barcode 39 Extended", C[1471] || CT.C1471, "Libre Barcode 39 Extended Text", C[1472] || CT.C1472, "Libre Barcode 39 Text", C[1473] || CT.C1473, "Libre Baskerville", C[1474] || CT.C1474, "Libre Caslon Display", C[1475] || CT.C1475, "Libre Caslon Text", C[1476] || CT.C1476, "Libre Franklin", C[1477] || CT.C1477, "Life Savers", C[1478] || CT.C1478, "Lilita One", C[1479] || CT.C1479, "Lily Script One", C[1480] || CT.C1480, "Limelight", C[1481] || CT.C1481, "Linden Hill", C[1482] || CT.C1482, "Literata", C[1483] || CT.C1483, "Liu Jian Mao Cao", C[1484] || CT.C1484, "Livvic", C[1485] || CT.C1485, "Lobster", C[1486] || CT.C1486, "Lobster Two", C[1487] || CT.C1487, "Londrina Outline", C[1488] || CT.C1488, "Londrina Shadow", C[1489] || CT.C1489, "Londrina Sketch", C[1490] || CT.C1490, "Londrina Solid", C[1491] || CT.C1491, "Long Cang", C[1492] || CT.C1492, "Lora", C[1493] || CT.C1493, "Love Ya Like A Sister", C[1494] || CT.C1494, "Loved by the King", C[1495] || CT.C1495, "Lovers Quarrel", C[1496] || CT.C1496, "Luckiest Guy", C[1497] || CT.C1497, "Lusitana", C[1498] || CT.C1498, "Lustria", C[1499] || CT.C1499, "M PLUS 1p", C[1500] || CT.C1500, "M PLUS Rounded 1c", C[1501] || CT.C1501, "Ma Shan Zheng", C[1502] || CT.C1502, "Macondo", C[1503] || CT.C1503, "Macondo Swash Caps", C[1504] || CT.C1504, "Mada", C[1505] || CT.C1505, "Magra", C[1506] || CT.C1506, "Maiden Orange", C[1507] || CT.C1507, "Maitree", C[1508] || CT.C1508, "Major Mono Display", C[1509] || CT.C1509, "Mako", C[1510] || CT.C1510, "Mali", C[1511] || CT.C1511, "Mallanna", C[1512] || CT.C1512, "Mandali", C[1513] || CT.C1513, "Manjari", C[1514] || CT.C1514, "Manrope", C[1515] || CT.C1515, "Mansalva", C[1516] || CT.C1516, "Manuale", C[1517] || CT.C1517, "Marcellus", C[1518] || CT.C1518, "Marcellus SC", C[1519] || CT.C1519, "Marck Script", C[1520] || CT.C1520, "Margarine", C[1521] || CT.C1521, "Markazi Text", C[1522] || CT.C1522, "Marko One", C[1523] || CT.C1523, "Marmelad", C[1524] || CT.C1524, "Martel", C[1525] || CT.C1525, "Martel Sans", C[1526] || CT.C1526, "Marvel", C[1527] || CT.C1527, "Mate", C[1528] || CT.C1528, "Mate SC", C[1529] || CT.C1529, "Maven Pro", C[1530] || CT.C1530, "McLaren", C[1531] || CT.C1531, "Meddon", C[1532] || CT.C1532, "MedievalSharp", C[1533] || CT.C1533, "Medula One", C[1534] || CT.C1534, "Meera Inimai", C[1535] || CT.C1535, "Megrim", C[1536] || CT.C1536, "Meie Script", C[1537] || CT.C1537, "Merienda", C[1538] || CT.C1538, "Merienda One", C[1539] || CT.C1539, "Merriweather", C[1540] || CT.C1540, "Merriweather Sans", C[1541] || CT.C1541, "Metal Mania", C[1542] || CT.C1542, "Metamorphous", C[1543] || CT.C1543, "Metrophobic", C[1544] || CT.C1544, "Michroma", C[1545] || CT.C1545, "Milonga", C[1546] || CT.C1546, "Miltonian", C[1547] || CT.C1547, "Miltonian Tattoo", C[1548] || CT.C1548, "Mina", C[1549] || CT.C1549, "Miniver", C[1550] || CT.C1550, "Miriam Libre", C[1551] || CT.C1551, "Mirza", C[1552] || CT.C1552, "Miss Fajardose", C[1553] || CT.C1553, "Mitr", C[1554] || CT.C1554, "Modak", C[1555] || CT.C1555, "Modern Antiqua", C[1556] || CT.C1556, "Mogra", C[1557] || CT.C1557, "Molengo", C[1558] || CT.C1558, "Molle", C[1559] || CT.C1559, "Monda", C[1560] || CT.C1560, "Monofett", C[1561] || CT.C1561, "Monoton", C[1562] || CT.C1562, "Monsieur La Doulaise", C[1563] || CT.C1563, "Montaga", C[1564] || CT.C1564, "Montez", C[1565] || CT.C1565, "Montserrat", C[1566] || CT.C1566, "Montserrat Alternates", C[1567] || CT.C1567, "Montserrat Subrayada", C[1568] || CT.C1568, "Mountains of Christmas", C[1569] || CT.C1569, "Mouse Memoirs", C[1570] || CT.C1570, "Mr Bedfort", C[1571] || CT.C1571, "Mr Dafoe", C[1572] || CT.C1572, "Mr De Haviland", C[1573] || CT.C1573, "Mrs Saint Delafield", C[1574] || CT.C1574, "Mrs Sheppards", C[1575] || CT.C1575, "Mukta", C[1576] || CT.C1576, "Mukta Mahee", C[1577] || CT.C1577, "Mukta Malar", C[1578] || CT.C1578, "Mukta Vaani", C[1579] || CT.C1579, "Muli", C[1580] || CT.C1580, "Mystery Quest", C[1581] || CT.C1581, "NTR", C[1582] || CT.C1582, "Nanum Brush Script", C[1583] || CT.C1583, "Nanum Gothic", C[1584] || CT.C1584, "Nanum Gothic Coding", C[1585] || CT.C1585, "Nanum Myeongjo", C[1586] || CT.C1586, "Nanum Pen Script", C[1587] || CT.C1587, "Neucha", C[1588] || CT.C1588, "Neuton", C[1589] || CT.C1589, "New Rocker", C[1590] || CT.C1590, "News Cycle", C[1591] || CT.C1591, "Niconne", C[1592] || CT.C1592, "Niramit", C[1593] || CT.C1593, "Nixie One", C[1594] || CT.C1594, "Nobile", C[1595] || CT.C1595, "Norican", C[1596] || CT.C1596, "Nosifer", C[1597] || CT.C1597, "Notable", C[1598] || CT.C1598, "Nothing You Could Do", C[1599] || CT.C1599, "Noticia Text", C[1600] || CT.C1600, "Noto Color Emoji Compat", C[1601] || CT.C1601, "Noto Sans", C[1602] || CT.C1602, "Noto Serif", C[1603] || CT.C1603, "Nova Cut", C[1604] || CT.C1604, "Nova Flat", C[1605] || CT.C1605, "Nova Mono", C[1606] || CT.C1606, "Nova Oval", C[1607] || CT.C1607, "Nova Round", C[1608] || CT.C1608, "Nova Script", C[1609] || CT.C1609, "Nova Slim", C[1610] || CT.C1610, "Nova Square", C[1611] || CT.C1611, "Numans", C[1612] || CT.C1612, "Nunito", C[1613] || CT.C1613, "Nunito Sans", C[1614] || CT.C1614, "Odibee Sans", C[1615] || CT.C1615, "Odor Mean Chey", C[1616] || CT.C1616, "Offside", C[1617] || CT.C1617, "Old Standard TT", C[1618] || CT.C1618, "Oldenburg", C[1619] || CT.C1619, "Oleo Script", C[1620] || CT.C1620, "Oleo Script Swash Caps", C[1621] || CT.C1621, "Open Sans", C[1622] || CT.C1622, "Open Sans Condensed", C[1623] || CT.C1623, "Oranienbaum", C[1624] || CT.C1624, "Orbitron", C[1625] || CT.C1625, "Oregano", C[1626] || CT.C1626, "Orienta", C[1627] || CT.C1627, "Original Surfer", C[1628] || CT.C1628, "Oswald", C[1629] || CT.C1629, "Over the Rainbow", C[1630] || CT.C1630, "Overlock", C[1631] || CT.C1631, "Overlock SC", C[1632] || CT.C1632, "Overpass", C[1633] || CT.C1633, "Overpass Mono", C[1634] || CT.C1634, "Ovo", C[1635] || CT.C1635, "Oxanium", C[1636] || CT.C1636, "Oxygen", C[1637] || CT.C1637, "Oxygen Mono", C[1638] || CT.C1638, "PT Mono", C[1639] || CT.C1639, "PT Sans", C[1640] || CT.C1640, "PT Sans Caption", C[1641] || CT.C1641, "PT Sans Narrow", C[1642] || CT.C1642, "PT Serif", C[1643] || CT.C1643, "PT Serif Caption", C[1644] || CT.C1644, "Pacifico", C[1645] || CT.C1645, "Padauk", C[1646] || CT.C1646, "Palanquin", C[1647] || CT.C1647, "Palanquin Dark", C[1648] || CT.C1648, "Pangolin", C[1649] || CT.C1649, "Paprika", C[1650] || CT.C1650, "Parisienne", C[1651] || CT.C1651, "Passero One", C[1652] || CT.C1652, "Passion One", C[1653] || CT.C1653, "Pathway Gothic One", C[1654] || CT.C1654, "Patrick Hand", C[1655] || CT.C1655, "Patrick Hand SC", C[1656] || CT.C1656, "Pattaya", C[1657] || CT.C1657, "Patua One", C[1658] || CT.C1658, "Pavanam", C[1659] || CT.C1659, "Paytone One", C[1660] || CT.C1660, "Peddana", C[1661] || CT.C1661, "Peralta", C[1662] || CT.C1662, "Permanent Marker", C[1663] || CT.C1663, "Petit Formal Script", C[1664] || CT.C1664, "Petrona", C[1665] || CT.C1665, "Philosopher", C[1666] || CT.C1666, "Piedra", C[1667] || CT.C1667, "Pinyon Script", C[1668] || CT.C1668, "Pirata One", C[1669] || CT.C1669, "Plaster", C[1670] || CT.C1670, "Play", C[1671] || CT.C1671, "Playball", C[1672] || CT.C1672, "Playfair Display", C[1673] || CT.C1673, "Playfair Display SC", C[1674] || CT.C1674, "Podkova", C[1675] || CT.C1675, "Poiret One", C[1676] || CT.C1676, "Poller One", C[1677] || CT.C1677, "Poly", C[1678] || CT.C1678, "Pompiere", C[1679] || CT.C1679, "Pontano Sans", C[1680] || CT.C1680, "Poor Story", C[1681] || CT.C1681, "Poppins", C[1682] || CT.C1682, "Port Lligat Sans", C[1683] || CT.C1683, "Port Lligat Slab", C[1684] || CT.C1684, "Pragati Narrow", C[1685] || CT.C1685, "Prata", C[1686] || CT.C1686, "Press Start 2P", C[1687] || CT.C1687, "Pridi", C[1688] || CT.C1688, "Princess Sofia", C[1689] || CT.C1689, "Prociono", C[1690] || CT.C1690, "Prompt", C[1691] || CT.C1691, "Prosto One", C[1692] || CT.C1692, "Proza Libre", C[1693] || CT.C1693, "Public Sans", C[1694] || CT.C1694, "Puritan", C[1695] || CT.C1695, "Purple Purse", C[1696] || CT.C1696, "Quando", C[1697] || CT.C1697, "Quantico", C[1698] || CT.C1698, "Quattrocento", C[1699] || CT.C1699, "Quattrocento Sans", C[1700] || CT.C1700, "Questrial", C[1701] || CT.C1701, "Quicksand", C[1702] || CT.C1702, "Quintessential", C[1703] || CT.C1703, "Qwigley", C[1704] || CT.C1704, "Racing Sans One", C[1705] || CT.C1705, "Radley", C[1706] || CT.C1706, "Rajdhani", C[1707] || CT.C1707, "Rakkas", C[1708] || CT.C1708, "Raleway", C[1709] || CT.C1709, "Raleway Dots", C[1710] || CT.C1710, "Ramabhadra", C[1711] || CT.C1711, "Ramaraja", C[1712] || CT.C1712, "Rambla", C[1713] || CT.C1713, "Rammetto One", C[1714] || CT.C1714, "Ranchers", C[1715] || CT.C1715, "Rancho", C[1716] || CT.C1716, "Ranga", C[1717] || CT.C1717, "Rasa", C[1718] || CT.C1718, "Rationale", C[1719] || CT.C1719, "Ravi Prakash", C[1720] || CT.C1720, "Red Hat Display", C[1721] || CT.C1721, "Red Hat Text", C[1722] || CT.C1722, "Redressed", C[1723] || CT.C1723, "Reem Kufi", C[1724] || CT.C1724, "Reenie Beanie", C[1725] || CT.C1725, "Revalia", C[1726] || CT.C1726, "Rhodium Libre", C[1727] || CT.C1727, "Ribeye", C[1728] || CT.C1728, "Ribeye Marrow", C[1729] || CT.C1729, "Righteous", C[1730] || CT.C1730, "Risque", C[1731] || CT.C1731, "Roboto", C[1732] || CT.C1732, "Roboto Condensed", C[1733] || CT.C1733, "Roboto Mono", C[1734] || CT.C1734, "Roboto Slab", C[1735] || CT.C1735, "Rochester", C[1736] || CT.C1736, "Rock Salt", C[1737] || CT.C1737, "Rokkitt", C[1738] || CT.C1738, "Romanesco", C[1739] || CT.C1739, "Ropa Sans", C[1740] || CT.C1740, "Rosario", C[1741] || CT.C1741, "Rosarivo", C[1742] || CT.C1742, "Rouge Script", C[1743] || CT.C1743, "Rozha One", C[1744] || CT.C1744, "Rubik", C[1745] || CT.C1745, "Rubik Mono One", C[1746] || CT.C1746, "Ruda", C[1747] || CT.C1747, "Rufina", C[1748] || CT.C1748, "Ruge Boogie", C[1749] || CT.C1749, "Ruluko", C[1750] || CT.C1750, "Rum Raisin", C[1751] || CT.C1751, "Ruslan Display", C[1752] || CT.C1752, "Russo One", C[1753] || CT.C1753, "Ruthie", C[1754] || CT.C1754, "Rye", C[1755] || CT.C1755, "Sacramento", C[1756] || CT.C1756, "Sahitya", C[1757] || CT.C1757, "Sail", C[1758] || CT.C1758, "Saira", C[1759] || CT.C1759, "Saira Condensed", C[1760] || CT.C1760, "Saira Extra Condensed", C[1761] || CT.C1761, "Saira Semi Condensed", C[1762] || CT.C1762, "Saira Stencil One", C[1763] || CT.C1763, "Salsa", C[1764] || CT.C1764, "Sanchez", C[1765] || CT.C1765, "Sancreek", C[1766] || CT.C1766, "Sansita", C[1767] || CT.C1767, "Sarabun", C[1768] || CT.C1768, "Sarala", C[1769] || CT.C1769, "Sarina", C[1770] || CT.C1770, "Sarpanch", C[1771] || CT.C1771, "Satisfy", C[1772] || CT.C1772, "Sawarabi Gothic", C[1773] || CT.C1773, "Sawarabi Mincho", C[1774] || CT.C1774, "Scada", C[1775] || CT.C1775, "Scheherazade", C[1776] || CT.C1776, "Schoolbell", C[1777] || CT.C1777, "Scope One", C[1778] || CT.C1778, "Seaweed Script", C[1779] || CT.C1779, "Secular One", C[1780] || CT.C1780, "Sedgwick Ave", C[1781] || CT.C1781, "Sedgwick Ave Display", C[1782] || CT.C1782, "Sen", C[1783] || CT.C1783, "Sevillana", C[1784] || CT.C1784, "Seymour One", C[1785] || CT.C1785, "Shadows Into Light", C[1786] || CT.C1786, "Shadows Into Light Two", C[1787] || CT.C1787, "Shanti", C[1788] || CT.C1788, "Share", C[1789] || CT.C1789, "Share Tech", C[1790] || CT.C1790, "Share Tech Mono", C[1791] || CT.C1791, "Shojumaru", C[1792] || CT.C1792, "Short Stack", C[1793] || CT.C1793, "Shrikhand", C[1794] || CT.C1794, "Sigmar One", C[1795] || CT.C1795, "Signika", C[1796] || CT.C1796, "Signika Negative", C[1797] || CT.C1797, "Simonetta", C[1798] || CT.C1798, "Single Day", C[1799] || CT.C1799, "Sintony", C[1800] || CT.C1800, "Sirin Stencil", C[1801] || CT.C1801, "Six Caps", C[1802] || CT.C1802, "Skranji", C[1803] || CT.C1803, "Slabo 13px", C[1804] || CT.C1804, "Slabo 27px", C[1805] || CT.C1805, "Slackey", C[1806] || CT.C1806, "Smokum", C[1807] || CT.C1807, "Smythe", C[1808] || CT.C1808, "Sniglet", C[1809] || CT.C1809, "Snippet", C[1810] || CT.C1810, "Snowburst One", C[1811] || CT.C1811, "Sofadi One", C[1812] || CT.C1812, "Sofia", C[1813] || CT.C1813, "Solway", C[1814] || CT.C1814, "Song Myung", C[1815] || CT.C1815, "Sonsie One", C[1816] || CT.C1816, "Sorts Mill Goudy", C[1817] || CT.C1817, "Source Code Pro", C[1818] || CT.C1818, "Source Sans Pro", C[1819] || CT.C1819, "Source Serif Pro", C[1820] || CT.C1820, "Space Mono", C[1821] || CT.C1821, "Spartan", C[1822] || CT.C1822, "Special Elite", C[1823] || CT.C1823, "Spectral", C[1824] || CT.C1824, "Spectral SC", C[1825] || CT.C1825, "Spicy Rice", C[1826] || CT.C1826, "Spinnaker", C[1827] || CT.C1827, "Spirax", C[1828] || CT.C1828, "Squada One", C[1829] || CT.C1829, "Sree Krushnadevaraya", C[1830] || CT.C1830, "Sriracha", C[1831] || CT.C1831, "Srisakdi", C[1832] || CT.C1832, "Staatliches", C[1833] || CT.C1833, "Stalemate", C[1834] || CT.C1834, "Stalinist One", C[1835] || CT.C1835, "Stardos Stencil", C[1836] || CT.C1836, "Stint Ultra Condensed", C[1837] || CT.C1837, "Stint Ultra Expanded", C[1838] || CT.C1838, "Stoke", C[1839] || CT.C1839, "Strait", C[1840] || CT.C1840, "Stylish", C[1841] || CT.C1841, "Sue Ellen Francisco", C[1842] || CT.C1842, "Suez One", C[1843] || CT.C1843, "Sulphur Point", C[1844] || CT.C1844, "Sumana", C[1845] || CT.C1845, "Sunflower", C[1846] || CT.C1846, "Sunshiney", C[1847] || CT.C1847, "Supermercado One", C[1848] || CT.C1848, "Sura", C[1849] || CT.C1849, "Suranna", C[1850] || CT.C1850, "Suravaram", C[1851] || CT.C1851, "Swanky and Moo Moo", C[1852] || CT.C1852, "Syncopate", C[1853] || CT.C1853, "Tajawal", C[1854] || CT.C1854, "Tangerine", C[1855] || CT.C1855, "Tauri", C[1856] || CT.C1856, "Taviraj", C[1857] || CT.C1857, "Teko", C[1858] || CT.C1858, "Telex", C[1859] || CT.C1859, "Tenali Ramakrishna", C[1860] || CT.C1860, "Tenor Sans", C[1861] || CT.C1861, "Text Me One", C[1862] || CT.C1862, "Thasadith", C[1863] || CT.C1863, "The Girl Next Door", C[1864] || CT.C1864, "Tienne", C[1865] || CT.C1865, "Tillana", C[1866] || CT.C1866, "Timmana", C[1867] || CT.C1867, "Tinos", C[1868] || CT.C1868, "Titan One", C[1869] || CT.C1869, "Titillium Web", C[1870] || CT.C1870, "Tomorrow", C[1871] || CT.C1871, "Trade Winds", C[1872] || CT.C1872, "Trirong", C[1873] || CT.C1873, "Trocchi", C[1874] || CT.C1874, "Trochut", C[1875] || CT.C1875, "Trykker", C[1876] || CT.C1876, "Tulpen One", C[1877] || CT.C1877, "Turret Road", C[1878] || CT.C1878, "Ubuntu", C[1879] || CT.C1879, "Ubuntu Condensed", C[1880] || CT.C1880, "Ubuntu Mono", C[1881] || CT.C1881, "Ultra", C[1882] || CT.C1882, "Uncial Antiqua", C[1883] || CT.C1883, "Underdog", C[1884] || CT.C1884, "Unica One", C[1885] || CT.C1885, "UnifrakturCook", C[1886] || CT.C1886, "UnifrakturMaguntia", C[1887] || CT.C1887, "Unkempt", C[1888] || CT.C1888, "Unlock", C[1889] || CT.C1889, "Unna", C[1890] || CT.C1890, "VT323", C[1891] || CT.C1891, "Vampiro One", C[1892] || CT.C1892, "Varela", C[1893] || CT.C1893, "Varela Round", C[1894] || CT.C1894, "Vast Shadow", C[1895] || CT.C1895, "Vesper Libre", C[1896] || CT.C1896, "Viaoda Libre", C[1897] || CT.C1897, "Vibes", C[1898] || CT.C1898, "Vibur", C[1899] || CT.C1899, "Vidaloka", C[1900] || CT.C1900, "Viga", C[1901] || CT.C1901, "Voces", C[1902] || CT.C1902, "Volkhov", C[1903] || CT.C1903, "Vollkorn", C[1904] || CT.C1904, "Vollkorn SC", C[1905] || CT.C1905, "Voltaire", C[1906] || CT.C1906, "Waiting for the Sunrise", C[1907] || CT.C1907, "Wallpoet", C[1908] || CT.C1908, "Walter Turncoat", C[1909] || CT.C1909, "Warnes", C[1910] || CT.C1910, "Wellfleet", C[1911] || CT.C1911, "Wendy One", C[1912] || CT.C1912, "Wire One", C[1913] || CT.C1913, "Work Sans", C[1914] || CT.C1914, "Yanone Kaffeesatz", C[1915] || CT.C1915, "Yantramanav", C[1916] || CT.C1916, "Yatra One", C[1917] || CT.C1917, "Yellowtail", C[1918] || CT.C1918, "Yeon Sung", C[1919] || CT.C1919, "Yeseva One", C[1920] || CT.C1920, "Yesteryear", C[1921] || CT.C1921, "Yrsa", C[1922] || CT.C1922, "ZCOOL KuaiLe", C[1923] || CT.C1923, "ZCOOL QingKe HuangYou", C[1924] || CT.C1924, "ZCOOL XiaoWei", C[1925] || CT.C1925, "Zeyada", C[1926] || CT.C1926, "Zhi Mang Xing", C[1927] || CT.C1927, "Zilla Slab", C[1928] || CT.C1928, "Zilla Slab Highlight", C[1929] || CT.C1929]);
    }
  }, false);
  var C = Array(1930).fill(void 0);
  var I = [
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/google_fonts-1.1.2/lib/src/google_fonts_base.dart",
    "package:google_fonts/google_fonts.dart",
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/google_fonts-1.1.2/lib/google_fonts.dart"
  ];
  google_fonts_base.clearCache = function clearCache() {
    return google_fonts_base._loadedFonts.clear();
  };
  google_fonts_base.googleFontsTextStyle = function googleFontsTextStyle(opts) {
    let t0, t0$;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let fonts = opts && 'fonts' in opts ? opts.fonts : null;
    if (!(fontFamily != null)) dart.assertFailed(null, I[0], 66, 10, "fontFamily != null");
    if (!(fonts != null)) dart.assertFailed(null, I[0], 67, 10, "fonts != null");
    textStyle == null ? textStyle = new text_style.TextStyle.new() : null;
    textStyle = textStyle.copyWith({color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness});
    let variant = new google_fonts_variant.GoogleFontsVariant.new({fontWeight: (t0 = textStyle.fontWeight, t0 == null ? ui.FontWeight.w400 : t0), fontStyle: (t0$ = textStyle.fontStyle, t0$ == null ? ui.FontStyle.normal : t0$)});
    let matchedVariant = google_fonts_base._closestMatch(variant, fonts[$keys]);
    let familyWithVariant = new google_fonts_family_with_variant.GoogleFontsFamilyWithVariant.new({family: fontFamily, googleFontsVariant: matchedVariant});
    let descriptor = new google_fonts_descriptor.GoogleFontsDescriptor.new({familyWithVariant: familyWithVariant, file: fonts[$_get](matchedVariant)});
    google_fonts_base.loadFontIfNecessary(descriptor);
    return textStyle.copyWith({fontFamily: familyWithVariant.toString(), fontFamilyFallback: T.JSArrayOfStringL().of([fontFamily])});
  };
  google_fonts_base.loadFontIfNecessary = function loadFontIfNecessary(descriptor) {
    return async.async(dart.void, function* loadFontIfNecessary() {
      let familyWithVariantString = dart.toString(descriptor.familyWithVariant);
      let fontName = descriptor.familyWithVariant.toApiFilenamePrefix();
      if (dart.test(google_fonts_base._loadedFonts.contains(familyWithVariantString))) {
        return;
      } else {
        google_fonts_base._loadedFonts.add(familyWithVariantString);
      }
      try {
        let byteData = null;
        let assetManifestJson = (yield google_fonts_base.assetManifest.json());
        let assetPath = google_fonts_base._findFamilyWithVariantAssetPath(descriptor.familyWithVariant, assetManifestJson);
        if (assetPath != null) {
          byteData = asset_bundle.rootBundle.load(assetPath);
        }
        if ((yield byteData) != null) {
          return google_fonts_base._loadFontByteData(familyWithVariantString, byteData);
        }
        byteData = file_io.loadFontFromDeviceFileSystem(familyWithVariantString);
        if ((yield byteData) != null) {
          return google_fonts_base._loadFontByteData(familyWithVariantString, byteData);
        }
        if (dart.test(google_fonts.GoogleFonts.config.allowRuntimeFetching)) {
          byteData = google_fonts_base._httpFetchFontAndSaveToDevice(familyWithVariantString, descriptor.file);
          if ((yield byteData) != null) {
            return google_fonts_base._loadFontByteData(familyWithVariantString, byteData);
          }
        } else {
          dart.throw(core.Exception.new("GoogleFonts.config.allowRuntimeFetching is false but font " + dart.str(fontName) + " was not " + "found in the application assets. Ensure " + dart.str(fontName) + ".otf exists in a " + "folder that is included in your pubspec's assets."));
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        google_fonts_base._loadedFonts.remove(familyWithVariantString);
        core.print("Error: google_fonts was unable to load font " + dart.str(fontName) + " because the " + "following exception occured:\n" + dart.str(e));
      }
    });
  };
  google_fonts_base._loadFontByteData = function _loadFontByteData(familyWithVariantString, byteData) {
    return async.async(dart.void, function* _loadFontByteData() {
      let anyFontDataFound = byteData != null && (yield byteData) != null;
      if (anyFontDataFound) {
        let fontLoader = new font_loader.FontLoader.new(familyWithVariantString);
        fontLoader.addFont(byteData);
        yield fontLoader.load();
      }
    });
  };
  google_fonts_base._closestMatch = function _closestMatch(sourceVariant, variantsToCompare) {
    let bestScore = null;
    let bestMatch = null;
    for (let variantToCompare of variantsToCompare) {
      let score = google_fonts_base._computeMatch(sourceVariant, variantToCompare);
      if (bestScore == null || dart.notNull(score) < dart.notNull(bestScore)) {
        bestScore = score;
        bestMatch = variantToCompare;
      }
    }
    return bestMatch;
  };
  google_fonts_base._httpFetchFontAndSaveToDevice = function _httpFetchFontAndSaveToDevice(fontName, file) {
    return async.async(T.ByteDataL(), function* _httpFetchFontAndSaveToDevice() {
      let uri = core.Uri.tryParse(file.url);
      if (uri == null) {
        dart.throw(core.Exception.new("Invalid fontUrl: " + dart.str(file.url)));
      }
      let response = null;
      try {
        response = (yield google_fonts_base.httpClient.get(uri));
      } catch (e$) {
        let e = dart.getThrown(e$);
        dart.throw(core.Exception.new("Failed to load font with url: " + dart.str(file.url)));
      }
      if (response.statusCode === 200) {
        if (!dart.test(google_fonts_base._isFileSecure(file, response.bodyBytes))) {
          dart.throw(core.Exception.new("File from " + dart.str(file.url) + " did not match expected length and checksum."));
        }
        google_fonts_base._unawaited(file_io.saveFontToDeviceFileSystem(fontName, response.bodyBytes));
        return typed_data.ByteData.view(response.bodyBytes[$buffer]);
      } else {
        dart.throw(core.Exception.new("Failed to load font with url: " + dart.str(file.url)));
      }
    });
  };
  google_fonts_base._computeMatch = function _computeMatch(a, b) {
    if (dart.equals(a, b)) {
      return 0;
    }
    let score = (dart.notNull(a.fontWeight.index) - dart.notNull(b.fontWeight.index))[$abs]();
    if (a.fontStyle != b.fontStyle) {
      score = score + 2;
    }
    return score;
  };
  google_fonts_base._findFamilyWithVariantAssetPath = function _findFamilyWithVariantAssetPath(familyWithVariant, manifestJson) {
    if (manifestJson == null) return null;
    let apiFilenamePrefix = familyWithVariant.toApiFilenamePrefix();
    for (let assetList of manifestJson[$values]) {
      for (let asset of assetList) {
        for (let matchingSuffix of T.JSArrayOfStringL().of([".ttf", ".otf"])[$where](dart.bind(asset, $endsWith))) {
          let assetWithoutExtension = asset[$substring](0, asset.length - matchingSuffix.length);
          if (assetWithoutExtension[$endsWith](apiFilenamePrefix)) {
            return asset;
          }
        }
      }
    }
    return null;
  };
  google_fonts_base._isFileSecure = function _isFileSecure(file, bytes) {
    let actualFileLength = bytes[$length];
    let actualFileHash = dart.toString(sha256.sha256.convert(bytes));
    return file.expectedLength == actualFileLength && file.expectedFileHash == actualFileHash;
  };
  google_fonts_base._unawaited = function _unawaited(future) {
  };
  dart.defineLazy(google_fonts_base, {
    /*google_fonts_base._loadedFonts*/get _loadedFonts() {
      return T.LinkedHashSetOfStringL().new();
    },
    /*google_fonts_base.httpClient*/get httpClient() {
      return client.Client.new();
    },
    set httpClient(_) {},
    /*google_fonts_base.assetManifest*/get assetManifest() {
      return new asset_manifest.AssetManifest.new();
    },
    set assetManifest(_) {}
  }, true);
  google_fonts._Config = class _Config extends core.Object {};
  (google_fonts._Config.new = function() {
    this.allowRuntimeFetching = true;
    ;
  }).prototype = google_fonts._Config.prototype;
  dart.addTypeTests(google_fonts._Config);
  dart.addTypeCaches(google_fonts._Config);
  dart.setLibraryUri(google_fonts._Config, I[1]);
  dart.setFieldSignature(google_fonts._Config, () => ({
    __proto__: dart.getFields(google_fonts._Config.__proto__),
    allowRuntimeFetching: dart.fieldType(dart.legacy(core.bool))
  }));
  google_fonts.GoogleFonts = class GoogleFonts extends core.Object {
    static asMap() {
      return C[0] || CT.C0;
    }
    static _asMapOfTextThemes() {
      return C[965] || CT.C965;
    }
    static getFont(fontFamily, opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      if (!(fontFamily != null)) dart.assertFailed(null, I[2], 2035, 12, "fontFamily != null");
      let fonts = google_fonts.GoogleFonts.asMap();
      if (!dart.test(fonts[$containsKey](fontFamily))) {
        dart.throw(core.Exception.new("No font family by name '" + dart.str(fontFamily) + "' was found."));
      }
      return fonts[$_get](fontFamily)({textStyle: textStyle, color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness});
    }
    static getTextTheme(fontFamily, textTheme = null) {
      if (!(fontFamily != null)) dart.assertFailed(null, I[2], 2073, 12, "fontFamily != null");
      let fonts = google_fonts.GoogleFonts._asMapOfTextThemes();
      if (!dart.test(fonts[$containsKey](fontFamily))) {
        dart.throw(core.Exception.new("No font family by name '" + dart.str(fontFamily) + "' was found."));
      }
      return fonts[$_get](fontFamily)(textTheme);
    }
    static aBeeZee(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2ff99dd1bd594806e1b9f7423a75f1c1dfbbbcddb2698b3ab91f5709b1b90caf", 29632), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8654a417521bf7fa4ffd1a7f7b62648648c5415ff0f7e0d53474e4436d049b7a", 30984)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ABeeZee", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aBeeZeeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aBeeZee({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static abel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("37a44f872ce09b8a93244abfaf3741aa8e4da7cbf64de118635a7cf1c7bc1d5e", 34924)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Abel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static abelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.abel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.abel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.abel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.abel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.abel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.abel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.abel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.abel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.abel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.abel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.abel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.abel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.abel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static abhayaLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8e1a260e8a56f8cdb2e2401be9e3a6903026becbf134336b9c8f6b2e2490cd5", 282252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ff52a780878fd838b81f8c96e548f49d7bbd4f92cb0a3dc68eb3f852ca3f3fd4", 282512), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e3be63e1c52229673f453da3c6abd79dc0011d02fd57da38489880434556aa77", 281648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1c7bdb109ab0e98ef91a41ec55825dcb97c2ea2e9274c67dde899104f5b59878", 281252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9457be94f81fc73b59af3e850d0dcb91790d60078cbdc252da50881c615173aa", 280484)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AbhayaLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static abhayaLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.abhayaLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static abrilFatface(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2baf7b134013a2183457312f0d26115640d0171829d024dfb1466616a3ac789a", 67316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AbrilFatface", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static abrilFatfaceTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.abrilFatface({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aclonica(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e26afc4582406a86fc1e1b81aad6e16a03f9276419fa76e91b98f9e42d868cc8", 68136)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Aclonica", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aclonicaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aclonica({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aclonica({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aclonica({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aclonica({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aclonica({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aclonica({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aclonica({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aclonica({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aclonica({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aclonica({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aclonica({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aclonica({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aclonica({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static acme(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f7d0b4054bd37012deca722e47899589c1d35302b51b2fd21ea83e7f3410bccd", 23028)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Acme", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static acmeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.acme({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.acme({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.acme({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.acme({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.acme({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.acme({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.acme({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.acme({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.acme({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.acme({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.acme({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.acme({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.acme({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static actor(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("417b785d001974cb097e1f84b068ed6f47fa9c5317bf90801a55709954b59350", 42356)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Actor", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static actorTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.actor({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.actor({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.actor({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.actor({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.actor({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.actor({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.actor({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.actor({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.actor({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.actor({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.actor({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.actor({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.actor({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static adamina(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c241502ff8869d44e310b4e1782d5ca6f53b2d1844593bb0a360e12af0ddfcb1", 76672)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Adamina", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static adaminaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.adamina({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.adamina({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.adamina({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.adamina({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.adamina({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.adamina({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.adamina({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.adamina({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.adamina({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.adamina({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.adamina({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.adamina({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.adamina({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static adventPro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4041ce69b488624d0653057137ff69ead9c9496be2059ede6a5056fd48780850", 46400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20f54f798dd883fc2fab8294006f8201f1deed59b0abd0ad6c6864bb0062eb47", 46424), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("23462d311ba53dbeac614ad5c99742d75264652538c2aaaea50fa3f9a37c1111", 46356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c7084224aa15f7d31683e67bc3107aa12f725f4d20a10e9b65bbcec912162191", 46836), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("21feddd6602a8e2daf17501cb32c4b27a26b6a357f3652ad357008c8a90f1646", 51004), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("908b9b388605933b6e469878f17c52da7e2cd9cd6c4ec72a3e12aa5a9c3b9b79", 50772), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("962b3ce8591b2ca225b23e65b3914233c576d21700e3f24c6b820230fe8424e0", 55976)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AdventPro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static adventProTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.adventPro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.adventPro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.adventPro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.adventPro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.adventPro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.adventPro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.adventPro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.adventPro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.adventPro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.adventPro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.adventPro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.adventPro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.adventPro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aguafinaScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("282b677fa945b70a3a5a57b8ffb8064638a07feb77edc68cf29591225bc7b5ce", 47180)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AguafinaScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aguafinaScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aguafinaScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static akronim(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bb077a1601fc7353abf83d6f7e667b5c1ff47a853f2a90f466be1dd738f4e6a1", 107340)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Akronim", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static akronimTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.akronim({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.akronim({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.akronim({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.akronim({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.akronim({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.akronim({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.akronim({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.akronim({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.akronim({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.akronim({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.akronim({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.akronim({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.akronim({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aladin(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("47e6aa68e0a6686d85005a8cd4e3c3055dc4828dc3b49d69fdf88f38491c8ae2", 42112)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Aladin", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aladinTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aladin({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aladin({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aladin({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aladin({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aladin({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aladin({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aladin({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aladin({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aladin({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aladin({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aladin({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aladin({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aladin({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0e69926cd849e08f0dfa58fa809a89d58262ec6a29e3dd4e2c59ea279301b12e", 63264)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alatsi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7fa5a16b3bfdf1423bfccb98349fc2cee90ca48e42252467b9a36f5a3149622e", 70056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alatsi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alatsiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alatsi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alatsi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alatsi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alatsi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alatsi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alatsi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alatsi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alatsi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alatsi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alatsi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alatsi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alatsi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alatsi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aldrich(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e288c81eacbaee70be6e11a25f4fb3bdaffcc0ea0449f285c94fc558e64335f4", 27932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Aldrich", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aldrichTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aldrich({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aldrich({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aldrich({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aldrich({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aldrich({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aldrich({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aldrich({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aldrich({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aldrich({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aldrich({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aldrich({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aldrich({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aldrich({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alef(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a50dedb5215d98f65036893675ded42762d4c7bdae624c71adb1ea584f5a1467", 58300), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("acbe7d381fcdbd3bca38351290cba306a1dde6549d74fbdef431ee9fcb60030d", 59936)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alef", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alefTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alef({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alef({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alef({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alef({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alef({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alef({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alef({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alef({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alef({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alef({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alef({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alef({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alef({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alegreya(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("530d78cba23c5d8e261ae9447b431e1fa550f9dc6563540a0c400be3f7ee88ab", 63708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("efba5f9b4495a2e911ec871cc4dfebb5dba60bc72d643c0dd346e8f90513f81a", 61596), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c00ad52d215d793be827a98a0661e13bbd3276c96c6aa5e6c8d71c9487a3da03", 67268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bd912b8f7b092f81fc94ee9f3b769e57ecbb1a2443bfce7d405d2ad0c48c04b4", 65700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f2d4a4c114f8e7ad762e764046f117bf954b1ba7797bbe6b6d754decc9bdbf99", 62328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("01804c5bcb6aedbda393491d82c14328987c7fb66a6ef8c8313aed5d683d3dad", 60620)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alegreya", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alegreyaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alegreya({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alegreya({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alegreya({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alegreya({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alegreya({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alegreya({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alegreya({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alegreya({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alegreya({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alegreya({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alegreya({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alegreya({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alegreya({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alegreyaSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7449fd0507a0808ae452506eb8fb2fb46b4abe72f8f5d982b25c963ba93bc094", 72748), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6b36a9c6614f3cea8c2846f74b6823f8d3c5edd8a8b2319eccae142e3bb42738", 73048), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("16e159f79c1929fa884f232e47d45cb0cc16a55a22b127359024868245f4a2d4", 71836), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6920f9042274d5d0b37753d233b86c7066a47d1cb94015d70ecbb9a76359faa7", 72428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d591a36a0d78f0315b16c23983d84d6d8b4bbf8ea5b5879019cad423941d5990", 70500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d312d023b86792b3a0f7cd9594498720cdb9feb7bec946d75a3f25f6580c19c7", 71700)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlegreyaSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alegreyaScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alegreyaSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alegreyaSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4e4fc2370a575c44ada0a88565af306c9e5f6f863cd3e594f68fbecb64d6eb45", 86800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("dfad029fd95bc8e1e6f4aff5ca9a40f7ee01b7c42436068b1a609af1036de968", 75952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f413bb7452d6c3127865026e765917685dde894f8130417ee32c5c22d3332a5a", 88928), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("53c675ca8ca26437bfdef9475e6be6a31d8f390904f2a25dc7f71ecacf749525", 76244), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5186af372dbc9306a0390c6a53c2b3ed7e398bf7e19390e4115779d9d4dcb9e0", 90044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a1cf80b2ffea7f7a74c290c886e0853612aa20f2f2942a11b6221973a8b1125a", 75740), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b54080b02a55195adec0aed32ecb384095ddfef221504059e15682a59709d9a5", 90304), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("16b83ef0510db5d9b7adeb15a6bf505975df75012e3f04118c8384165bae4c4f", 75644), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("baf6cfdcdaeaff8ae1997ba5a87f7c43b4823b8e094097eb354fdaeb531c610e", 90308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c3ea4ab25245b87d94c68e797ee68e472bf893023027f57d0dfb6aef204e650d", 75464), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2313ece3a1be01342c2f2b902904ce864b05c9ecf3a72e96580c84ed124b370c", 90492), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("296f24dc4713815e4ea5f25a60e938c00c6d94678ba90f140c4c4dcd5d3dae42", 75552), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c1ae94a74aa4998c1ed777107095512b795dd19783a838e9eaffca2382405bf3", 90324), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("63fa7d406f209d33ac9020dc3209f61bda016b2e851b369e2475f6c77bd65111", 75748)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlegreyaSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alegreyaSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alegreyaSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alegreyaSansSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7f5b4f9e7531121c2163e92598f24222cdef538a04352553731f0c81f69c4227", 77260), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1a8c6b334dbb0663e1b509d268363d557f9d231f702c2fb6ffe0727c0bb374b5", 67308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0d94b7e8e30244280988269fbefbf776d08ff9ad0be6df4f620a6a5b7e0362f0", 79488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ccd17db40859ba985ad048cea705168d600d36d89c00086787c0e0c4b3d82350", 67492), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2487f405a054a83c784021b2c8e860860b9243fb34fc64b7a5fd2250d68bf4f9", 80884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b427017865c854fea91f74c2c65b73010299f090c4ce77e0854fac9a1de8bc0a", 67168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("edb603dab26042252c435e746201e0f2f353dd09865130082f25072fb0969e0b", 81296), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("de77ecc3bedb1b421aebae8d44d23fc290cb7f252c8cd7eea6cc478ee69e13ec", 67248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c46b10c450739d774b11b6e3d2f51e421d416b9a8174d249ad85973c5018894c", 81476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("16e2233f43d03898a785024de868496150dfcba5754cec33d4e349b92c857453", 67060), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("356b90a20e5818313f51f03a05985f5c63745944a01aa92b78804caa0b7a4268", 81900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("85eb333661be027f374e08a28cc4b0c394fa0052fc64197c5a96409168532e87", 67216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("41a1bac96732155ce8415a0155d80de58383ab4223de540ad68c383f51b3cb5e", 81560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7100fdd6d991e596021a3bc2578fd4eb74fb5bd5d7dfc6c30dcde981e6a27281", 67304)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlegreyaSansSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alegreyaSansScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alegreyaSansSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aleo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8844034f7614859b836238cb530853c190b011335edbfc9fd9dbb15669134bcb", 35800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9d41d1b8e554c18ef31b39cd96576f58048ab1dacd1e03dd349c3f471917ab43", 45124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4124c4a19546d618079ccad928418735907b0eff5c68a0faf16b8fd3ec1d5bc2", 65892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7662bf685a6bddd2908c8392229aac54817f3666c9915cec596880a13eef66c9", 68788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d20df7d3bc69a847115b4c7f6de4db4d8aa878a8ad3ccc70a83b9beb9d29826c", 60744), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0277e97f9c04c3812b3987b151b56953251d09574f7f649b461074b2439a4026", 64516)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Aleo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aleoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aleo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aleo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aleo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aleo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aleo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aleo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aleo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aleo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aleo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aleo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aleo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aleo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aleo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alexBrush(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eb8044f112b9878ec59f0825d91a9f011fc4925ce2272737c02ce2be161c3efd", 48660)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlexBrush", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alexBrushTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alexBrush({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alexBrush({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alfaSlabOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7da478a94cb0f5cdf81dc70a08204fc3d9b097463f65a9108151851580dd9151", 64824)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlfaSlabOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alfaSlabOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alfaSlabOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alice(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b09d7119f6ceba6b3b798683927d8bd51757498f4af762dc4509d1c76aafc6a3", 95148)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alice", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aliceTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alice({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alice({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alice({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alice({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alice({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alice({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alice({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alice({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alice({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alice({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alice({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alice({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alice({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alike(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b9683edf916072397bd15b9b312ff78533f85b4ac5598b5867733fb5670ed534", 64584)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Alike", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alikeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alike({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alike({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alike({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alike({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alike({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alike({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alike({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alike({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alike({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alike({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alike({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alike({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alike({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static alikeAngular(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ae146a31a48840c579bbeefc31597a7c9b385c626ef8387ad461aeea8432452", 97120)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlikeAngular", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alikeAngularTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.alikeAngular({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static allan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("83a268d06857cada4246725e7cc04eb4d7b87d19e6d4f44e745d33be739852fb", 40992), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b309341937b6f2a1893638c71f9877c70c658e6461e5b18011f9ab7f2782adc9", 95644)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Allan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static allanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.allan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.allan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.allan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.allan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.allan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.allan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.allan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.allan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.allan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.allan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.allan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.allan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.allan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static allerta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("df4ce73d43a2a1eb976d66944a0555b8ab45b8848b9e9be9355d0f68a9373270", 18844)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Allerta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static allertaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.allerta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.allerta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.allerta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.allerta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.allerta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.allerta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.allerta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.allerta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.allerta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.allerta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.allerta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.allerta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.allerta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static allertaStencil(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d43b315a156fb147d0bcd2dad6a682e5a23d388f0d12365c29c2d46fbf1e2c96", 19512)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AllertaStencil", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static allertaStencilTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.allertaStencil({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static allura(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("32adf6de6bc3ee14bedf4674a1020492d2c2e4a939883aa672ff9a31777f63ed", 88036)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Allura", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static alluraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.allura({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.allura({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.allura({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.allura({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.allura({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.allura({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.allura({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.allura({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.allura({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.allura({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.allura({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.allura({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.allura({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static almarai(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d65c40f0692b45d73302895b80e837f57f1b4e69a5d3255c3f186919eab23780", 85828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1b22529a81e051312110ae38c450d9b4f5474030f2275dc4574f26c8fcf5318e", 85912), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6cf3b7ecc9ac853f7071684fc5dfb22dd3a13f41901fee6aeb54cd9cc81d1126", 85696), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("55d68f8e4adef1c44ed2dbc154537092c330112b9ac46a94338e58f08f02bcb6", 86588)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Almarai", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static almaraiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.almarai({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.almarai({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.almarai({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.almarai({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.almarai({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.almarai({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.almarai({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.almarai({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.almarai({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.almarai({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.almarai({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.almarai({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.almarai({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static almendra(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("08fa6c15ee1bba267ec0f0f30bd11a5be545d922ebd057f450a702f87aa9aaa8", 68696), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d40d53b865a76778b1362d4e74f6c6294fbde5ae31f24f0173d9401c3fabcddc", 35276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b0792b18907bbbe9c24855a75a53fc8ac926ae12e181ec5bbc70fae19df05bfa", 36684), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eb34d628f80f6ab95c12f0ef6dd4138d2182b94042d615028af5353e58b9f1ee", 35448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Almendra", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static almendraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.almendra({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.almendra({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.almendra({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.almendra({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.almendra({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.almendra({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.almendra({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.almendra({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.almendra({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.almendra({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.almendra({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.almendra({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.almendra({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static almendraDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a8aa056bca4ab7efab868e9b7a435eea1109abde7b232725b1e1b41cf482191a", 39284)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlmendraDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static almendraDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.almendraDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static almendraSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("12f0d325f41e23a75aa0ddb706236e13487d31b43a77435817a684f239f324bd", 36008)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AlmendraSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static almendraScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.almendraSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.almendraSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amarante(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f11a52c1a0f3e94f81dde8d9c60832c688c1d9b01c5bb1098c3ea30daac8ad29", 74348)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amarante", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amaranteTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amarante({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amarante({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amarante({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amarante({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amarante({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amarante({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amarante({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amarante({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amarante({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amarante({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amarante({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amarante({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amarante({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amaranth(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4b8c69a7d5f0b230b1b010da8da3ad4ccb84f4dff4a1247a14af83392c9ecf64", 66272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("359639014bf096771cbebb373f2d347f8e1b44a2ef2b48556e1a21289dbc7eb5", 74196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9b35625ebc301f471cd70df7575f4fc81597a8ab27dc321418707c40d8a99616", 65892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("48c74968a6ddedd92d0c4d4e05959d24a1ae124fce3ab60c793c5a331dddee10", 74616)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amaranth", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amaranthTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amaranth({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amaranth({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amaranth({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amaranth({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amaranth({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amaranth({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amaranth({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amaranth({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amaranth({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amaranth({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amaranth({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amaranth({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amaranth({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amaticSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9da6405b57357f309f00592371cf54bb3c1d57b8e7d9fc40fff6f364d6ca80fe", 104904), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("81f4df2ecbc8d2fcae65290f5075ff98149f4f95ea00bb6bf3a0711e4e1afd75", 99680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AmaticSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amaticScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amaticSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amaticSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amaticaSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("39a7e41edc371bdb0e8356c4e9f69ea62594cfd412fbb1f5c45a32c0a5e75516", 140932), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ead630d51d6f70a5e14a17fec1bffc04c9a13118b217101fd42eac20be2ae66", 105524)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AmaticaSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amaticaScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amaticaSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amethysta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e4d26711903ae08c3bd10750f3b713928bdd3ee56d00372e37bd8606a3fe2d7a", 36864)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amethysta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amethystaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amethysta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amethysta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amethysta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amethysta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amethysta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amethysta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amethysta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amethysta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amethysta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amethysta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amethysta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amethysta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amethysta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amiko(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c2e782cc6b503328a87e3b81b3ee6afa1acb6cd66bd04d9da2ba5d3ff4c43e3f", 143076), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d56799efb6c3d56b106cae38c558a3f2f9da3d0a90d0d1ea64449c693d3cadfc", 142664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("037bbdff86b70266d62abc94be043671d3c04188f477dbb0ead70ee89df98ecb", 142052)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amiko", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amikoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amiko({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amiko({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amiko({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amiko({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amiko({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amiko({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amiko({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amiko({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amiko({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amiko({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amiko({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amiko({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amiko({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amiri(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("15af380107efd8a082b372d1ba8027d5fd6d4720ccf7f7ce48345b845cfb83b6", 370496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("03496500b8efdd151ca91912b003f23e04fcb45a8d39cee588e4ea47b61fc052", 357340), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a1f6fcfa01fc6084132c66ff5b8da7b655fbf82dae7a9200c4471400281678bb", 351752), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9d9add54ab339fd5ca1f0b2fbda1117e04758800cefa39fa72d5f1e38b7a2e27", 355324)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amiri", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amiriTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amiri({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amiri({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amiri({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amiri({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amiri({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amiri({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amiri({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amiri({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amiri({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amiri({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amiri({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amiri({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amiri({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static amita(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8ab328073e1c729f0b4f38521b47bb39c63db396da1602f6b08a2a8775249f4", 141504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e421cec126c6014995b96189e28c3c8b119e3e21dbe1c3dea8585ec31afa0679", 141464)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Amita", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static amitaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.amita({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.amita({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.amita({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.amita({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.amita({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.amita({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.amita({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.amita({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.amita({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.amita({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.amita({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.amita({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.amita({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static anaheim(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("738fa7ae0283744abbfcfd999eb71d255210a7ee0fa7e195a47482269b9e381e", 27848)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Anaheim", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static anaheimTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.anaheim({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.anaheim({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.anaheim({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.anaheim({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.anaheim({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.anaheim({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.anaheim({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.anaheim({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.anaheim({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.anaheim({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.anaheim({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.anaheim({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.anaheim({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static andada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7c3fda3cdd2dcc60f34129cdd9c0a2f139b2a4bec16bcff6b27521d87d222f1e", 108572)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Andada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static andadaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.andada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.andada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.andada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.andada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.andada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.andada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.andada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.andada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.andada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.andada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.andada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.andada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.andada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static andika(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1c10763224ab91314d3fae862634f6bddf0aae60bd71668d68950102ca77b5d4", 964524)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Andika", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static andikaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.andika({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.andika({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.andika({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.andika({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.andika({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.andika({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.andika({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.andika({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.andika({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.andika({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.andika({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.andika({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.andika({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static annieUseYourTelescope(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("65c0cd06d1ec2528de45688966f2971cf95fed9f810f246e08b4efd9e717d850", 50692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AnnieUseYourTelescope", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static annieUseYourTelescopeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.annieUseYourTelescope({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static anonymousPro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ca7beef0b5eb5c9e72533cd45bc1e4f41c8272dc2335f22d3649e32a795995f", 106796), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("71ce3ee6476a91f9e89e9f8010d9ea13314306b645af3e8d7b7add697e6f0d3e", 108996), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d00937283f3b530bee6700e02cfabfbb96b833d42559d48fc5fdfcfde2ff5b39", 106604), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("60f1f3cae99bbc1323cdcdf9af6a0127d5b4684ef675e6836fa3034a297dc16a", 108760)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AnonymousPro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static anonymousProTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.anonymousPro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static antic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6526fff8a94a5503810bc8805b716126e91295380d0e970f089e3e663a4440d5", 39272)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Antic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static anticTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.antic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.antic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.antic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.antic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.antic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.antic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.antic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.antic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.antic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.antic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.antic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.antic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.antic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static anticDidone(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ed8ca32ea2c34cc27f4a10cdf51c0ddb35d0cd580df90b19e68d8096a145ec35", 39640)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AnticDidone", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static anticDidoneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.anticDidone({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.anticDidone({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static anticSlab(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1348202760ad87d67e74d3a921ad2be20b563b2cd2a8d6e99d54da029c7f2aad", 36924)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AnticSlab", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static anticSlabTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.anticSlab({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.anticSlab({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static anton(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e0d29150a430129b0bfdaabaa46ba1e7967ccabc46440a5789bffe18b7dfcc2d", 54896)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Anton", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static antonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.anton({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.anton({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.anton({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.anton({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.anton({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.anton({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.anton({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.anton({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.anton({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.anton({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.anton({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.anton({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.anton({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arapey(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8d4786e233fac8fe0069ba6efaa828eb2fffef7b1d21a92a6d4f250ae9710415", 26716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("10f469eeecd1cca95a1881d5fbd920abff25911a343caf957f7b2a0e3d4de390", 29520)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arapey", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arapeyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arapey({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arapey({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arapey({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arapey({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arapey({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arapey({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arapey({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arapey({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arapey({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arapey({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arapey({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arapey({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arapey({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arbutus(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d1484fe1dd2948c05f4d1ab7f6acbbc88d4acea2e32880263ec8f991cba4905f", 81792)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arbutus", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arbutusTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arbutus({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arbutus({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arbutus({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arbutus({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arbutus({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arbutus({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arbutus({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arbutus({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arbutus({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arbutus({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arbutus({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arbutus({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arbutus({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arbutusSlab(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7c7bbc09f84fc70a8541195a960de7d282eeaee64c5b146253bd79fd209893d", 39812)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArbutusSlab", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arbutusSlabTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arbutusSlab({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static architectsDaughter(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a4f5860f4b7aca9b95305b6c5a3b14e2f1c951eaddd28b5d1fffd374171ccdba", 43356)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArchitectsDaughter", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static architectsDaughterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.architectsDaughter({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static archivo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e3992a886b3891c9b073cf3e46b1c578cb31ab065cf9b5e07f6fc2a0200a495f", 58160), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8af059c64838f116e4c8afda7a5c344815c3fe3c2111749d7281a046087dfb8a", 60944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("455a61b80b447af7647cb7bbbef6de06c3c3031d0ecbb2619fa9cffa73871e76", 59648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c266aeada4adba34caec3d404c7953743cf0327123506b66cde56cf556ad2ddf", 62104), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7ad030ef4465b1be7229c5326d24955683bea533c9646e4ed2773cd30697d031", 59960), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("453878357ed380bea09e3661badd4636234be8794956428236bc3a166d84fc92", 62300), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5c37a5634c5b7802983e322dcc187d5b4bc26e238dd61828a71f184592b9032f", 59436), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("12b65a3c8f63eb390f4acb0a6ade0ac245782113ddc2e397c216c3605fc245f8", 62036)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Archivo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static archivoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.archivo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.archivo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.archivo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.archivo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.archivo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.archivo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.archivo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.archivo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.archivo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.archivo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.archivo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.archivo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.archivo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static archivoBlack(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fdd008fdde6eaf026762810841b23a803c1fd8f7691df010d250df61e584703b", 59204)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArchivoBlack", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static archivoBlackTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.archivoBlack({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static archivoNarrow(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("95b4094186b9443c74e987b6a5ad660b55c7dc1e548d66cc53ead05a10bf096f", 57132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c5be034d89310f5e551f67507ef7bd0d5093e193d5e556598e1137cff7598ada", 58796), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("898e57eec4db5685859996bc7c9a87707d53ceca97c917edb0497302b7145fd5", 55924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ff034a0073d594043d35a5058bf44df331be4b22576c8a753b210bcc55789e50", 59204)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArchivoNarrow", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static archivoNarrowTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.archivoNarrow({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arefRuqaa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("483d6ce42473c62a61b38dc4e30c6b1a5d9b02921ab5034c8eec4b8f0496127d", 112872), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ea198095e22fea5b0b08338b3b524a2ac489bd669154eab1927955f20124358", 139992)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArefRuqaa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arefRuqaaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arefRuqaa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arimaMadurai(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20fe984789a290b9c540b82d788511cf37e7dcb0c94a3f808ed8a9980ce92262", 92064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ea122a5616110be9d6b0719ff9a8e5d87a5bb067671e53f60e9e2f34151a054", 92944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e9bb6dffdcb0e85ac571c284727a1ff484951f065ccff0e42668f232709bcfd0", 93064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("72a8a5252b9293d6af843e90bdda0f995b86531cb25d7a2489b5b58e7c495575", 93452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b608979162b4bce202e22f3cba5768ef3c5f96294c41e1d36229b02393a70cf7", 93560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f9809fc1ba075315f2526aba738bb8c4bfb8af33451d402a57eae3edbdbe45b6", 93480), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("030889c403dcab9b3a79394ed59d1d1da7d0dbafae26fc8c6d1b870d7732c997", 93616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25561cbe875f9bad0c96c060f2a1f8108ba709366496e68ff510efdf5930429f", 93604)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ArimaMadurai", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arimaMaduraiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arimaMadurai({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arimo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("df255da5c656bbf01f4aa3012b4d4ba16f7bd17664a4e1fc011146a4eb95d436", 242708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eafe825bf96517b1ff3b8d8710254e225584de1489e4c3deaa6b1cb8549a027d", 249396), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5a4f400fb6090e3938136ea6fd3ec2c02777fb674d13b9582f96d4515044df23", 240652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e6b358f015564a1505c76b32db9b3f5c538a8f7d220dd04446697d286c820bf0", 248528)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arimo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arimoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arimo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arimo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arimo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arimo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arimo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arimo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arimo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arimo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arimo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arimo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arimo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arimo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arimo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arizonia(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("603a1ae367969056ace1484bd5db4d882fabfa78008e6843d3ba07c08082c2c7", 50688)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arizonia", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arizoniaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arizonia({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arizonia({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arizonia({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arizonia({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arizonia({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arizonia({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arizonia({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arizonia({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arizonia({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arizonia({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arizonia({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arizonia({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arizonia({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static armata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7631b4ae2fae472da8b9d0b46acfec928c9c550e82dbee1685e72f389ab890d9", 54772)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Armata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static armataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.armata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.armata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.armata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.armata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.armata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.armata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.armata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.armata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.armata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.armata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.armata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.armata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.armata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arsenal(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b13a735c3c27289a74f4e934b380f078f89568b2633c5d8386e97a97d46158c", 140064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f687cc6b9b17ac45aaf3391fbe649c2e1607804ce3ab85daddf9669f796d0a79", 138944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ac62eb1c6ee28d30c2dacea06acdbec9c72bcbfdca1f76a873b8a2c18ac8ae6", 141180), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("41b9ba2384a037e4ec361896e5868107cfa8535ab8befda2d9666584884aca80", 139236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arsenal", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arsenalTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arsenal({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arsenal({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arsenal({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arsenal({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arsenal({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arsenal({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arsenal({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arsenal({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arsenal({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arsenal({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arsenal({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arsenal({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arsenal({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static artifika(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a0d399a0a07f993bcb6bdd075a4e0f6ae155d222d230710b94d48933e8470dbf", 100216)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Artifika", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static artifikaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.artifika({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.artifika({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.artifika({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.artifika({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.artifika({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.artifika({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.artifika({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.artifika({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.artifika({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.artifika({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.artifika({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.artifika({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.artifika({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arvo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b816c4a4a7813e7daaa88e2f869b5c8acefbf8d52e00205c41d15dda95f1766c", 22724), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5250cf6a9f89eba5cb07686924135f2bce7a6f8775a569fac7276b5c83b03db7", 22704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1126bb2afe7e919632493ca620fc94e998910794a9fd47d82092f6edc26f4368", 22608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("43a330e1b8afd2c95f4f6b1c9c67ef7dfab28ed90bfb6a4551efe8480a060222", 23288)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arvo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static arvoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arvo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arvo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arvo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arvo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arvo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arvo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arvo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arvo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arvo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arvo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arvo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arvo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arvo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static arya(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("98cf640f609db3f8940fc4bc1566dda034961cb11d23f71a277f3ab268c8859a", 120116), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6c168a53b559c7407d20692a42b94301046b15c4838d709b83992c32cab5732c", 119776)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Arya", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aryaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.arya({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.arya({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.arya({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.arya({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.arya({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.arya({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.arya({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.arya({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.arya({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.arya({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.arya({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.arya({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.arya({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static asap(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3424989c5e2512f04cbd78fd70665961847d7307eb5d795caadac8db451f74cc", 67676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6286c24191501089796508556c20c3086610ae6aeb56d9aadceaaa0b7d825c51", 69828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c7034a58c9a896f74c127472a7085dbd1d6bfb6fd2cafb4140dfde291f0bc399", 67936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("13483b794adc9a08424049bbf8e6a03b399069e87c0c4d01777ae17c3328de81", 69828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("835a74fedec5a1877e092c739d9f213a3e41860462c70437da2465b5f99ea073", 67904), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ce966470982f0031860428bc4a47e41d80471ac70ccc857fac1e948d6c964eb7", 69648)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Asap", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static asapTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.asap({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.asap({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.asap({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.asap({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.asap({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.asap({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.asap({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.asap({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.asap({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.asap({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.asap({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.asap({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.asap({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static asar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("52cdc31a962e99a625bf96be5b06ab8118290c27e17701c4938182d9e56109af", 410900)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Asar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static asarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.asar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.asar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.asar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.asar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.asar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.asar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.asar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.asar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.asar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.asar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.asar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.asar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.asar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static asset(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6423261d7b23d05ef705ee59a0151076feed8408f637b04693272b767ac6cfd5", 52004)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Asset", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static assetTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.asset({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.asset({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.asset({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.asset({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.asset({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.asset({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.asset({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.asset({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.asset({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.asset({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.asset({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.asset({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.asset({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static assistant(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f4c276bf1e4d52183015128074de4702a86fc31cce04f575a8ebef54a077c78", 57240), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ad7ba792736448061fddf24806abe616e89d7a21a00d169ac4bf95db35ffe9cc", 57400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1ffb8d00a2bd6ab725bb34dc8eaf61737481f6b285988332e4f6a4b60279dbde", 57088), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1dc8095e8dddae977007770ce433f8ed1e374d0a83d7330ecea3b335109a4985", 56812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("81008b85f8a91125a8efe85a353982fe1b825def9ef33eed881b709a6debf250", 56752), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7370c1c3e5649abcfa6f44475eed601eb070ab934a708081b87627827d5463a", 56872)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Assistant", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static assistantTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.assistant({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.assistant({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.assistant({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.assistant({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.assistant({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.assistant({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.assistant({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.assistant({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.assistant({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.assistant({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.assistant({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.assistant({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.assistant({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static astloch(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b51d807f9b0f818e44f8f40d4fbedacfff7df981efda85e7b722d62f6022a168", 49860), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b86a5f0e90945d44c5b629fde8c5a667dd7882ab201ccb397f96f482fd7e98bc", 51544)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Astloch", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static astlochTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.astloch({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.astloch({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.astloch({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.astloch({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.astloch({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.astloch({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.astloch({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.astloch({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.astloch({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.astloch({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.astloch({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.astloch({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.astloch({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static asul(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d38e526c102508df44df01ded7aefa955a61c999e42e91cbcb82103aa1269875", 33468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1810c0e0a5199932d466db95d83fab54bd1b5f6fd5b91664ca7240078d2dd1f0", 33500)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Asul", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static asulTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.asul({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.asul({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.asul({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.asul({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.asul({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.asul({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.asul({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.asul({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.asul({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.asul({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.asul({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.asul({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.asul({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static athiti(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4abe61baf7f8762b4dcb6b88b0610de73f42b112a793e28b92da163ee7e441d7", 112524), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f9c6df08ed329fa184304cf4bc64319e7812c62c2ae136dc89cb10a5d5c35018", 111332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4559ae55fe1020c88dc144ae60afba5e282fcd3aa1c5107292df173d42135806", 112320), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6e1f0a1706330d270d93ea13e88b35d9c6f4bf71d927e9468278c03b57986330", 112508), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("398a37b4c34df12c6ede4a85f215d56eaa5a8b515ea5e0bdad2ef676c2ae858a", 112080), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("63b6ab040d22bd64ce5d5400f352fac3ecefa83827b1862b8a216d5c729ea286", 112932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Athiti", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static athitiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.athiti({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.athiti({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.athiti({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.athiti({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.athiti({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.athiti({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.athiti({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.athiti({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.athiti({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.athiti({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.athiti({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.athiti({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.athiti({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static atma(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d691cbd1df6f6a53328f8d9d9514102c915be55e93a8c1f0cb0826a27a60e4f2", 196364), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("702ceed58c58203ab0c8ad4bbbbda56c77b89a29496d748322180acbed120201", 198056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cc558572cee6afca8a8d34b8cb8a2397d749e0c22f9d9977f39eb0e84d636967", 197528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b569b84d6ee492ead3f4c73af6244137b0e4c604c9e98cc57627162221d498bb", 196596), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("127f716e96fc47aee7624acf9cebd859693a19f2fc1f7d832f33835e5bd3b834", 193184)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Atma", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static atmaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.atma({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.atma({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.atma({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.atma({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.atma({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.atma({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.atma({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.atma({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.atma({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.atma({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.atma({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.atma({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.atma({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static atomicAge(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6fc59a494c6184d973d9d5db8ec698d8acb6283fc807bd1a13c30000b83b832c", 44272)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AtomicAge", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static atomicAgeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.atomicAge({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.atomicAge({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static aubrey(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1464a409557010421785a4857a333c92eb6c4a28c0dbeeb0b1f8441f5e68ab96", 96976)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Aubrey", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static aubreyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.aubrey({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.aubrey({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.aubrey({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.aubrey({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.aubrey({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.aubrey({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.aubrey({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.aubrey({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.aubrey({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.aubrey({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.aubrey({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.aubrey({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.aubrey({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static audiowide(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2054b5910bd5457176b1479122e09690d5afe73d3749e5ef89a3686e6f724c29", 70472)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Audiowide", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static audiowideTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.audiowide({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.audiowide({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.audiowide({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.audiowide({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.audiowide({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.audiowide({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.audiowide({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.audiowide({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.audiowide({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.audiowide({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.audiowide({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.audiowide({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.audiowide({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static autourOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee63c9c20873c21ac935c1493e94bb24b9dc9782f63d01761b54dfedf4b3972c", 59552)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AutourOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static autourOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.autourOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.autourOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.autourOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.autourOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.autourOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.autourOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.autourOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.autourOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.autourOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.autourOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.autourOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.autourOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.autourOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static average(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ce0697844aa3a978d483dfa380fbebd5bff8e7e6dc0897bf6c2c009fb9ae4ab2", 37788)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Average", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averageTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.average({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.average({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.average({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.average({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.average({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.average({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.average({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.average({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.average({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.average({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.average({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.average({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.average({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static averageSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("defa6f6e46057de37a3b075c74765ba7cd6a46e0ac756e83f454dfb8b1afa95c", 43964)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AverageSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averageSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.averageSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.averageSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.averageSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.averageSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.averageSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.averageSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.averageSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.averageSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.averageSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.averageSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.averageSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.averageSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.averageSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static averiaGruesaLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3c60fda1756722c9f8d80009e0627d49eb2106d9eada7962d132e3ebef09c96a", 111344)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AveriaGruesaLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averiaGruesaLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.averiaGruesaLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static averiaLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("446105043cce1cc90406cda4c387ef2100b294d9d63b3946d4a395d3f2a9ce07", 108192), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c8a24e13d7d611dd8a4e15743ac34b163b1e96d1c9a9e82746f0bd9d3a878613", 133544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2b819eb7a1c11f4de65f3bfe1a8f658ea56fc62b2b7a24b2cf8688e9ced04c96", 108468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("793d505e83fbdbef6ceeabd6897693fb515a4890b822623deb545b53e7ec68dd", 128848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6b157a260e6fd6b7cdd2d54fc4f46e1a72fbb33034b74a6929cbc4d0a7d83e3d", 112228), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("08c2c28ffffd04d884122fa538e0c615e52983959363269b543084794a60955f", 135664)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AveriaLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averiaLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.averiaLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static averiaSansLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("452436a08a43ba5da912a2ed71aa4e0c67ae680532317c5affb99278cedc4eb8", 107752), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("056589edb0d0f068b768b9b9f6361bb5c4a2d53a33006288c9d089b1e6421f66", 134200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c5f843350837023c845544f24fa59e8c71cbe7bc284c0ea4127aa872c4fcac41", 108360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a79e7e7aecba032e6272d99a93c69868328db8d34091d1c70ccfd4a839f70489", 128896), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8af8ea3669721038ea729e975cadce19a0032e981378e23c8377e2faf979aca", 113016), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0509fc7d0b873424deb4340ab1bafca704241ecfda08cdafeab623999d12bdfd", 135852)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AveriaSansLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averiaSansLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.averiaSansLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static averiaSerifLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("605722d0534e8b2a7a4ce36ebc7ecfa14868d5aeae52ba3419e14a19e67c92ba", 109972), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4b675f9e2f2962fb69b7145f35ea9df241cdc9b91744abeac3cdfbf7aca1740b", 135976), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1939fc59e6192c78872b151f71d328c64c84552c1f8f7548f3278d3db023959f", 109988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("383c63d8878e96726e26c44d5a631030fcf28d4abdcb9bdadd86dbb01a623de9", 130956), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("19af7d57b5ea32ff5df3f2405e0d51759fdbab503fa4cfd420a5eb4943805fcc", 113956), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("164c3a01088756eebd948641705d6759b2fc7dabfd77d6e36490aa39befa0028", 138208)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "AveriaSerifLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static averiaSerifLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.averiaSerifLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static b612(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b11c6d50f8a4ef2abd6df134192e3770a9b392c814caf916bcf0efa87e6743d2", 89048), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4250a2e42f4ceda476c771828532dfb8cb2e9170ceb541e8aecc34ecea7977b4", 92732), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d3f9b01c62cb7bf3bc87cbc07452bc98a3058af8a40db93b64528fb711a429ea", 88700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f930926cd0cbbde94c51659420d91fb464c93fa3109c6bdf553a706985e307e2", 91740)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "B612", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static b612TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.b612({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.b612({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.b612({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.b612({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.b612({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.b612({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.b612({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.b612({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.b612({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.b612({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.b612({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.b612({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.b612({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static b612Mono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ffa9cacfa6fcd1a7a413d3b87f6f5ac6e2b201649b64695d976e0af5a46d512", 86196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("55c1dcdfe00e2848cd4e1946617c601f62a0828e6ba3c73924b8b4f4e705785c", 88684), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("515c42e5f2790fd973f2ee9685301efa0110bc2dfb33df69b57875318ad1e100", 85172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a4a6d28684fe7467e89b15c82070e98ed4c0623a5df5a9a05d347f757cda41e6", 87488)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "B612Mono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static b612MonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.b612Mono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.b612Mono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static badScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("85388546eb146e3e3bf5803d4a47f053ad2a9491ee3470c23912777bfbfbc111", 54372)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BadScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static badScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.badScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.badScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.badScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.badScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.badScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.badScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.badScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.badScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.badScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.badScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.badScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.badScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.badScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bahiana(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1134edff7d2708933a16883c07c5223938a3500e9880b289c754c2602b9181f7", 51296)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bahiana", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bahianaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bahiana({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bahiana({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bahiana({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bahiana({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bahiana({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bahiana({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bahiana({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bahiana({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bahiana({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bahiana({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bahiana({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bahiana({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bahiana({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bahianita(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8eae7d3828ad86d4af376a41fb9bd577433f7b9acf6f561f8c3383bf8f37224b", 91540)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bahianita", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bahianitaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bahianita({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bahianita({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bahianita({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bahianita({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bahianita({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bahianita({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bahianita({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bahianita({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bahianita({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bahianita({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bahianita({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bahianita({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bahianita({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static baiJamjuree(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fdb9acd5c9a309240a161cc16a0a5e3a1f3bf9258d1f2cf14fdfdf6f79d83c8e", 78044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fff587a7a746a3d84947c3982968551180877152f29ac4e6b58a5d060e741ee3", 83600), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("253ea5a1c8d0d3dacbf5b9f0db496617c2af6b95a5e0680df9c9c62b989b1799", 78384), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c31f0c72862a5db7605a1625ddf34cc3c20c1c8a756b7d8848bf7f57a2707e0c", 83780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c1dad5e37560fcacf02277fc359aecaab78b734f4a4839c6cf910296b20101fa", 78416), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e8939d2176c550b12487aed8e2fbc3b25917494c1174787534ed05c61be397f2", 83856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9f9c01d94ba412108985bed479c74ca19d6b1b8c6982ee1fc113a970d5d323ea", 78428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("01569d323f908485836ed8c94772695fc05a4b02812f4f29a62ec257f911b55b", 83944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a2ef2b81cbfb6b9a14a4bb8931a87a0887e676e237a098c40aa9e61d601dcbd2", 78412), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7db95e5673e505c331643e67b6172b4465e72300e3642242b55e75a28d7f5883", 83776), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e456eaafee629c1aa6ffda2fbc121b9b76b54ab7f4b6dcaac6a4a523263b2237", 78104), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3445df11af52dc901fce718f3b68b4df5dc14a6c7b2ae6399dcf47c7fa7dd34b", 83360)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BaiJamjuree", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static baiJamjureeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.baiJamjuree({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static baloo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2466b115f1d612b5be7c3c51aa118d952041ad4c9ebc6b790d3659c11ae3681d", 386736)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Baloo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.baloo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.baloo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.baloo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.baloo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.baloo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.baloo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.baloo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.baloo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.baloo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.baloo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.baloo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.baloo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.baloo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooBhai(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("678bfe33602fe168ee8732abcdc1ea3a454798cd99cb4f81f7e9d16581a7e2ed", 277392)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooBhai", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooBhaiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooBhai({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooBhai({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooBhaijaan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("52b00fb70a18a89da089a7492d3d97836ec7bd211288d3ec4ad6a60914db3dd3", 171132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooBhaijaan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooBhaijaanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooBhaijaan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooBhaina(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86bbf2a9f2b3936c4b1907de7136a4ca0f71efacfe22b7a6fa1b8a8a81f86282", 262212)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooBhaina", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooBhainaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooBhaina({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooChettan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5e430d6e47dbe9220996407624585cda368b6ce19a23c3f46844a06db3c0a679", 217796)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooChettan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooChettanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooChettan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooChettan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooDa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("88a331b2ae3e4db09605af2b1076b22c3734e2ecfd1b4ef1f4ca57446672e6cf", 288676)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooDa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooDaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooDa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooDa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooDa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooDa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooDa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooDa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooDa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooDa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooDa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooDa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooDa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooDa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooDa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooPaaji(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("95ba9f62ad854dc07958f311af18c674ca943fa7450fa4f6640d18e8eccdfe3f", 185064)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooPaaji", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooPaajiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooPaaji({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooTamma(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8005871563cf3cfadf580fba66361b46649b342e9e1765d65405765af6e92c4", 389440)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooTamma", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooTammaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooTamma({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooTamma({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooTammudu(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7bc7db26ac47d3561769f8cb3dfb93afd2767965efbd2770a77f8ffb33c5a013", 406812)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooTammudu", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooTammuduTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooTammudu({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balooThambi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5eb4d30c776f864b83a43cfbbcf1d05dda4a119a042f5a735adb014fdb4707e3", 200468)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BalooThambi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balooThambiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balooThambi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balooThambi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static balthazar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f532266accd2179da995d74ed36fa8bf3095162e9404d68381594561a335b66", 28176)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Balthazar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static balthazarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.balthazar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.balthazar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.balthazar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.balthazar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.balthazar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.balthazar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.balthazar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.balthazar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.balthazar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.balthazar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.balthazar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.balthazar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.balthazar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bangers(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("42a6646ed15dc91b9430f7e69e6259203235b48fa12c9cc10b6b72afab348de0", 75700)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bangers", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bangersTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bangers({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bangers({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bangers({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bangers({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bangers({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bangers({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bangers({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bangers({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bangers({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bangers({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bangers({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bangers({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bangers({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static barlow(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cbc7c82fdee3fa8b92bb23c3b9a2e8030733dbbc7322cd0c547b7c1889e7ecc0", 61884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f69e0bff8f7ab1739bd00636f1efa74a5937c7d34ae95b4ce353b4baad0eae33", 65692), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6759b2d507f1549918b6b4a394efcca8982958de5ac4134d359b7162e12701ba", 62392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f750383a2bd7ca69e5e24c2f3fcf974a67a9e98818703c12d9fd2600d62b49cf", 66844), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f582c8c58e673f459c2daf36fb9e1d3522dd5a7c50e0b8ee02d5a95089fff221", 64984), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5ccb6cff74b4b842a4da09f1543e6f2ab54f86a0e75b997b7ef375159d0f9bca", 68556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c1e3cf893b74f13d898b529820f0e01dd59c5c3f6f69635604600893cc99c914", 62316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("512de0e21c7303a0b6718ff5cf57c376345786cc521ce3851053764f55398e53", 66936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6ed898f9a3aa42d3615c69b731f57305ce7006e87e29042e8467203889f0ff3a", 64904), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b84f9e4475585d31451021e3e9d27e8336f00eac47c6753193de4033f15ea30d", 68204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("88497110ef5b50e3903b3c97ee671e01497a9a6d49f64218c9a70fd5042c3b49", 62368), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("53cad3b96c2a07c4af9d7111e1b6eaf07718e6510b0ccf65140b1ee7040da9b3", 67272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7513399e0a26a50c0f81fab7a114c8f40337b1d2edd0f28abed3f23ff5232c1", 62356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("274e649f86e4323b0b8553520d855c49523b84eb9269b8e0cf9f41d201e76068", 65900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6063124468c1350716105b1b52edec1c02bbbea85a0d675477016f425f457c9a", 64856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a4cbccba78e5ea3a5c9560b15ff91d04b88b7a8cadb3c81b64ceb9ebd5fc266f", 68012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fb60a33ebebe512faae572e414c6865041ea47c278458a28cdcadc762958bd4b", 61268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cabd84f11a9c742e6116cea169752a0f8c03073eeb60dc0ab4532987bd853878", 66736)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Barlow", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static barlowTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.barlow({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.barlow({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.barlow({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.barlow({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.barlow({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.barlow({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.barlow({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.barlow({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.barlow({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.barlow({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.barlow({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.barlow({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.barlow({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static barlowCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6f3686935062113e7b09390ffc3c690c608aa440f3e30db068b64420664ec5d", 60532), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ea5455d6f97ca5ea27d76f30e87b842dc23d6a9fdd9566ccffb6415a3a56bcb0", 65992), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("410b2efcf0b449d214182287f404b669840f4cc0a3c2f04940cee2d94b6eed4e", 60752), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bba549e676526ff4957a986006a9290f70d407fc1fd00d34135a1291ce6138d4", 65952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9bcf33e336ef2238ede09a908f8b86c6cca1586df6b1fbe0d59e462e3149b8ba", 60544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("49c62182eb883aeeab13fa2dbfcde072f2aac31e8bf77a232696bebc3b14e856", 65664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4e5dff25ad8b2553decdba77625dc57cdcba97555b53612a9c9bfa40f43f953c", 60524), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("65d8e8aa8d380e24c33fe4d2da62c7f9ec3de8e3429671ef5ff32782d21d649a", 65840), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8014ab571e1d04db59a24744420219343b4d1806c983ac73e808a9e96c638306", 60404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("dc26bbeb004e7e2084d0662973c4742fa65fd15b7eda3cb74826a27d686f44b0", 65284), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("36127289f54d9e42dd6bba46b0f52ce7e1839e79ce1b4d8fc5b22a54ee7c30f3", 63120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("70e3edc6f039c1a69acb610d298d522d5b46330458810ec9647e08c87b476dbb", 66768), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ec8d231a02a1e88872bef49e1099c712e93f3a723722a3d3ddc0fe2bfbe40962", 63072), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("edbf575a42819a83bc5539e63b01efa4299d750d2f679579ef7673c972e3211e", 66532), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e17df55a2cb70a97d869d33d55b38a29d60d31ae75c0bcaf61aca5f1215702cd", 62876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("34b5cbd8a9497c32949bcad7e8bd3f63019f7d28e693401b3ac39a69b5cd778d", 66084), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5db2f838d3b4d86fe437bcaef0fb569cf99cfda6377a230687348897a816eeb5", 61360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("de353be0369b799b090de4e2e272ebe13c6fd496973ff92b9e391656334ad1f2", 64724)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BarlowCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static barlowCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.barlowCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static barlowSemiCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("429d1fa72c7702c9b3dcb38d750756505166e563306daaf1b66cb753a68f9e2d", 62376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("39a411a6e0b959d02638199381cb91af60eb4da3e34ac231c61bea08043966e1", 67272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d4d4a161e4199c955202ca92d228838efee2dfa3cf68a0cf388085e19395aa5f", 62680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("79508f19bd17b1cdbf0b5b6f486c964d65c4a893a7f8f739a63cb71d206bb157", 67540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1b2c8175065ed2235c4db66650397fad918d8f97db3f1b3991125f2df604b76c", 62680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b1eca79a9e101dd60e1836afb98fee66886d6042c2870f88b7ec822a7b97877b", 67388), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1a9dca109aaa256a5afb98477989b87e0e102269f948949e5573b65b45779d4e", 62588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("97fff70c506e46d82a769311aa3efd01c86a10161c92dee921fb6c75da5ba39c", 67012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("73e602f9d74684f25a9d352cc61a0cfefc4ab505dfecb50b843492b1b5a87c3e", 62528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f1b5d4427848534739c734c5af7bdae1967a666e5c68e04156f0c5a60c1a1c78", 66868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b98dce5b8a6c1c5c2804cd26be37b203c56aee083840f4bad5d1907c4bf0b295", 65064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("82e1d9e57f5b1c3fba390bb1e428d9b26538ead3342f04c40e60ded6325cc06e", 68404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("acfd284673d183fe78a563ebf695ce70f7800151495260debfa9532d93289a55", 65208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e07191b9549a6c8c553608c75269487bb83c555c9e2fd9c08cfe704a5416e750", 68320), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b42194ff2e3637db2ee27a0720eed118d756d564014725a948bcdc8964d25901", 65240), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("36f4cee581975816949c810a10be068d6131acdc211a99acb3a2ce6c9586174f", 68236), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2305373351846fd5f75bfb35b24697021e9bd4ea4fac80bb25bfe62c9afcb604", 63764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("29476cff7567544f2a04e61c90254033e0eb160089bfae4dea9871e8f6fbe2f9", 67124)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BarlowSemiCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static barlowSemiCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.barlowSemiCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static barriecito(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cbd439bbca5ece3347c1497394d9cdfd488742cc10ccd2413cdba4e819f236bb", 167636)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Barriecito", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static barriecitoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.barriecito({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.barriecito({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.barriecito({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.barriecito({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.barriecito({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.barriecito({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.barriecito({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.barriecito({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.barriecito({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.barriecito({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.barriecito({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.barriecito({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.barriecito({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static barrio(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e1745250902305ccc432fd4ac10b9b248159dddd57634c31c70b8b4f3e3983f1", 146692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Barrio", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static barrioTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.barrio({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.barrio({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.barrio({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.barrio({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.barrio({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.barrio({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.barrio({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.barrio({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.barrio({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.barrio({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.barrio({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.barrio({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.barrio({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static basic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29cf0f576451b712f706b5f33a2e8e1b6e2be41ed145ebce30bcf8828ec37960", 45400)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Basic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static basicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.basic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.basic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.basic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.basic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.basic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.basic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.basic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.basic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.basic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.basic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.basic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.basic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.basic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static baskervville(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4f83292ed3ada742c822e6b55c57b05a68a0d27b136b872ed2cb3edaf2dd778c", 46788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fdcacb6cacae51af7ce0b4bc57b4400feedcf38a9e21898b144205607cd15185", 48936)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Baskervville", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static baskervvilleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.baskervville({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.baskervville({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.baskervville({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.baskervville({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.baskervville({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.baskervville({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.baskervville({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.baskervville({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.baskervville({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.baskervville({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.baskervville({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.baskervville({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.baskervville({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static baumans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9f9e8b94de7e96a118ae0165a927ffde8127bb9105f38bc5c39359622c7c40f4", 38752)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Baumans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static baumansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.baumans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.baumans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.baumans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.baumans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.baumans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.baumans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.baumans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.baumans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.baumans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.baumans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.baumans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.baumans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.baumans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static beVietnam(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0cc0f5cd392e42154ccdcf1ffc6987159ee0807caf89c6ac0796a273c9c80cd4", 43452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("11b1d7f41abb8a24b4ba203416df07809dbaf7de51619a1d167ab9af0361b6b7", 44588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("03d32b9f1d2ddaa56a41075b22ab477cbc078409bda7fe7f7e030491bf70988a", 43992), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a46d7c089e1fe8c124bc2de7b2cdf8a7f23fc0e9724766f3029c5c528b88b2cf", 45400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("79220c67d8f8488a5dc457833419e884bef66e01eae43ec9c9b7e2944c5d88f0", 43896), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e2928c1924824c824cac4ddaa74885a1fb9f3723429fa145c579cde5e79eeba5", 45368), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8d504a978c86a628884d737bacc817b24a74963f8e36e6cab5e9b81b9977b1f4", 43948), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a2af11a383bfb3ee1ef8731946b78f349dce66a9151e6724f9428a29af43faac", 45316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("94efd29230ff40c08cd89d8ae44d0e847ad17d53088280868a4bfbe29bc9afe0", 43864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2e18bd0f37b3e15856f513a8bd6b5d019948460f502359bf06716759b5b07664", 45424), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f6fdb78c7c80b7871c787918369b6f9908cb55d29a6f68602b90d557a0ef839", 43720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c54104de856f3762629b69585ceb0eed536f7f7a19d2a2e1cdb44c1b1398e6b8", 45380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("920f1f8cbfb2d9b94b66296e1f4ddf430a02ce638be482c79c598832645fda13", 43640), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2140e6025b6df417db0a543e64c090a9a5aa119d7523fd43a5f806a1550bdb37", 45296)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BeVietnam", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static beVietnamTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.beVietnam({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.beVietnam({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bebasNeue(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bd16210fc689a14930beb51e89f3890e3167bdb105c0e7618abb62d6c4a2cc5d", 37392)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BebasNeue", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bebasNeueTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bebasNeue({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static belgrano(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4b66b889e699bfe12ea9cc04621e48eed308f79ef2955cd4f20d0e7ddbcbaeab", 29028)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Belgrano", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static belgranoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.belgrano({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.belgrano({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.belgrano({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.belgrano({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.belgrano({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.belgrano({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.belgrano({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.belgrano({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.belgrano({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.belgrano({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.belgrano({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.belgrano({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.belgrano({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bellefair(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("581fd752c6fe9933425b7868917fe51b6d222b42336b931e58385cea219007a0", 46492)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bellefair", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bellefairTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bellefair({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bellefair({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bellefair({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bellefair({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bellefair({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bellefair({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bellefair({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bellefair({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bellefair({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bellefair({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bellefair({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bellefair({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bellefair({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static belleza(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("916c38d3ec21ba4e080cbb7c82b60f62b023224acf789357a9338460a610def2", 27772)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Belleza", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bellezaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.belleza({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.belleza({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.belleza({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.belleza({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.belleza({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.belleza({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.belleza({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.belleza({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.belleza({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.belleza({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.belleza({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.belleza({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.belleza({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bellota(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29b1164370f0eca544e3c2cb64f06324bd098c99c35f5ecdd5527d6642e5a78f", 87324), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2876a1892bc886d0df661eef1cc4fd3273dc8bce9563d1a7fba2c72987e340c5", 90184), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ae1ca7fd73a6c369b6bf3b7326788cb2a360b467fa83a298140dac4166b8efa", 86996), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d628b046cfc942ee35db112226b78f9ac3973ccaf005074bbbe867656201b8ec", 89836), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ac23e7ab6ffb89ee1593424695c867b8150bd97cd85fdbe2a3d7f89bf32a0973", 87220), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e876bb51e7fba1f8fadcef59f4b68e3020a0909557cef70a98c84253c9e32f2f", 90052)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bellota", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bellotaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bellota({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bellota({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bellota({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bellota({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bellota({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bellota({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bellota({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bellota({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bellota({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bellota({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bellota({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bellota({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bellota({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bellotaText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a0643b4ed7b9e5fe0a6023e98e3c731ac5ed3dd6a93688e6d319415902455806", 85396), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e0b3916debc6fdfc7a7fd3129785215a68039360ca58fff2137a5855ee962138", 88396), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bd71701b5f03e11645c6c76521346bb0658b950d8e568f92dbad4c0f832775eb", 85276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cab1408381b8c09a1322d14913d773a9ecd2af835363efced81df2db8aa5107b", 88112), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4c08136cdca5423cf6e4f79255b1d8968b3ce107c396b03445f6c49c286dd349", 85352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ec9c1edafbe6c75409ba2200628821ee1f0dbad581d6f79db100aeb366b12ee4", 88192)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BellotaText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bellotaTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bellotaText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bellotaText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static benchNine(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("819e7479fd3310e52e9754666e7a85aae97b6ea92363f425c93d1763341c5720", 38056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6ff13f62cc4e1011ea688bc0bdad0ec34826a3c14cbc1b9ec0ed2b768a756be1", 38812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ad7761d772dd04c7cf6c3ea55ea6f5bc9ca1540a2961a12251b37aee5d067022", 38748)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BenchNine", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static benchNineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.benchNine({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.benchNine({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.benchNine({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.benchNine({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.benchNine({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.benchNine({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.benchNine({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.benchNine({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.benchNine({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.benchNine({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.benchNine({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.benchNine({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.benchNine({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bentham(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("36b9c399aae73bd09e01d76e51e8697f80e9e34f14e954b929a08d6cfbc5f697", 40176)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bentham", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static benthamTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bentham({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bentham({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bentham({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bentham({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bentham({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bentham({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bentham({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bentham({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bentham({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bentham({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bentham({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bentham({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bentham({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static berkshireSwash(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e73eb938ce44215938a21b199bc0a7eba8e1805d0d2528c3300ad7a1813d5e0", 57948)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BerkshireSwash", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static berkshireSwashTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.berkshireSwash({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bethEllen(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("33f7d9b097ad741e56ef314b447fa4e0d310aab981ba6aea5db368053b65bc56", 115600)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BethEllen", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bethEllenTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bethEllen({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bethEllen({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bevan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("95fb9ca931c31e79c8312fb66d76a2239472f842f9aeed9c261367a55723370f", 55536)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bevan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bevanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bevan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bevan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bevan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bevan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bevan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bevan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bevan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bevan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bevan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bevan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bevan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bevan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bevan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bigShouldersDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("243bc59e9459b35c35fa0bc5cc49219e1cbf248be840664569ca730a8a7a7e5e", 60384), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f9d601dd24fc0f4bb73ca5a9bc3fb23c2d744597df0f10a2894d566903ba1154", 64044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0d1c3a1a7aca284022f6d11318ac148fe815d11c400a02d20e25768bbcf17f16", 63888), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("782f7156f414a376945013c065917553e525e9f55dc801588c0f2f47406a51a3", 63824), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("abf50d14f1c83beca50dbf4875c46279d06f2120f997bd0b3670236cf24bf1aa", 63924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("908c135c2591d12f000c0af1d59e56e72fb77beb39c1ba091505f250575b4ea6", 63876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("19b8e205eb51647a9245e28993f1aa99df1cdc107cab1e823db05dce048363ca", 63916), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("71c2e1ad1b8e3abbf78e31165b5b054095b45b80cdd32410b9df8abaa45a631f", 65188)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BigShouldersDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bigShouldersDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bigShouldersDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bigShouldersText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("627d92b7b60e71b44920b0badb4fab35e76dc999346110b16b5503642b274d9c", 60972), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8aef88ac2024c3940f399eee0642162cf1880de4b3072c385da26169385aaff9", 64304), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3b28c250237404079c092e1f0bbe96a9877935f854758b23d0c596474d2dc0a9", 64348), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ceadafc7d9e2a44c734bb0219be7688bb6f03e1d0788f1a6fdaff25989c7c821", 64240), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("891fff63a87492e0329b1ad1261d5d60e1e276099f63a26b28497f66fddb1e58", 64288), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("089e74d0e80e3f820d20c2dadb61e35e88025df110b9bfdf6878dd0c88300f35", 64144), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c3090bbff39b913daac1ce49ed0afcd52cba93db2e114faba5840a983ff222f0", 64208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6a6e0bec5c1e7d0a62882e4f6be1b781665211f69d499f61aa439ad6bb097e60", 65320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BigShouldersText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bigShouldersTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bigShouldersText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bigelowRules(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b86229b1bc741bc11ef0517467d96769485504f74278c1011120697a17d74d26", 59028)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BigelowRules", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bigelowRulesTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bigelowRules({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bigshotOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cd6b11ed5794f665b3e412e676ae624b63b086b93992d6c0b00c9afd26180c79", 36972)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BigshotOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bigshotOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bigshotOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bilbo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("55d2e6fb7257d5ade5d2419927eebf1f0c78ba65154b64d0cb737b6c8fa6a7df", 42864)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bilbo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bilboTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bilbo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bilbo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bilbo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bilbo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bilbo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bilbo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bilbo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bilbo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bilbo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bilbo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bilbo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bilbo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bilbo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bilboSwashCaps(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e55126acc93a6cae98b3736d06e24e1301a26f9aa4ac2173998ab1fa142b1736", 58124)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BilboSwashCaps", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bilboSwashCapsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bilboSwashCaps({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bioRhyme(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c7047e02059b7ea10893cf7bcfe3dc06e450dd3fb6000e05171462fedc43f7e", 69848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b9ee5307ca507a88bed949ef452d4b6c835e503ef09b30cbb1ace6d65030e873", 72476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bfe90585ffc1c3fc0d661d75c86187e9b6176836b56026b7882465f43a328616", 71764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cd56fec3e00f732e0ff393a16cd304a5b4818b7b5bc437e4f418142a976284e6", 71756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("43c38cd7da3c0c61638db3dbfd450b28e4abcacc9a48011176274140cf681c2b", 68792)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BioRhyme", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bioRhymeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bioRhyme({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bioRhymeExpanded(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7770459b3448470de7eebc842dd6d1b27857480f955caa6fda9114f30f9c487a", 69024), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("564af9bc89e9baac8c99c4a2b2bb1262ed16deaec1971840ab3e348ed0dc8e22", 72648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1fa6003a77f1c41cfe89fc6db7c98358f0e6fa62b61c965e0e1a04ed960601b9", 72028), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("89375361cdabf9dbf2e57378fa40cc8c19512e518617d5e8502c9db8aa4ee2a1", 71960), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("586a8d74b8042767a173971c026734fb6cb75934497b3c9d2ebd80ad9e60c31d", 71188)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BioRhymeExpanded", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bioRhymeExpandedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bioRhymeExpanded({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static biryani(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f65303a20787e99a61c757c6e4cbc9ee68af544a375dac932049def734163642", 123500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("842f2d86cd486de76ca080714383fb99a105dfb85b3bae4360d00e8ac8db8c9f", 124924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("16e70205340aba8294e2da2cc8581ec3c5fb3f2af846d51a3de360f447d6f254", 124200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("80169a7f1fadd79859c89b0e9a066fd8dbbc460f13a4e5df8389cd853dc67be9", 124224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8834894534eb39412acdbc906f20b8d4addd5339d6777eaf647ee1ecbd44538c", 123988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba9bcb5882f72d4ac114689fb32db356c2be660bc64a16c88ac2457bdbefd777", 124032), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5bad25e5e05861d1da7ddd858aefac18d200688fc997bf2760059fcc2c2ad30d", 123080)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Biryani", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static biryaniTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.biryani({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.biryani({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.biryani({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.biryani({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.biryani({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.biryani({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.biryani({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.biryani({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.biryani({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.biryani({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.biryani({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.biryani({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.biryani({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bitter(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("937e0cb8bbc92b1b89eafc86f73c06dec677f4e8d2c39de72208ae4fffedc7fa", 24208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7a9ae7d2a6428de7df36662a7014e91b880c5d09663ae9c66abb8a928c0ad371", 39064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c41cd10ef080e4d415bc6da6d86b29b73fe87ba84afe455423476109ed6addbd", 25616)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bitter", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bitterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bitter({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bitter({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bitter({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bitter({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bitter({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bitter({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bitter({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bitter({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bitter({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bitter({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bitter({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bitter({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bitter({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static blackAndWhitePicture(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0c951e047e8f1e152232363c35791b975f78ae96c97bfa6f14634c7a2551970c", 9586680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BlackAndWhitePicture", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static blackAndWhitePictureTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.blackAndWhitePicture({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static blackHanSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ea3e07623642e89ce9ae84a698b9557dd6361db9bc40b993b7715531404db088", 382952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BlackHanSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static blackHanSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.blackHanSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static blackOpsOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9a9eebffdb4d3c168c63bfcd5d0ec80a1571160a66e46ef698786f9c56922256", 41404)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BlackOpsOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static blackOpsOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.blackOpsOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static blinker(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7c240948a3fc8d5d8689c3a63f7f8ebc6306f7c85e807823569843f0f54195f9", 47168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2a79a8324609cc2b3bcdaec6541902337b886042ed55c471dbb6f257c65b280f", 48596), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3dd96a764325a06a02dcd84be7a03f3a2f2b6808e40d63328015690bf81f6c96", 48440), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("51b0da89566f911a7458b35be7b50dd97cb0ac23dff1eeb067b4d64a79911f3c", 47676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a51856bff19a13b746d4d2d4b3ebb07157b40df14a94c526837c9e5586337f01", 53416), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6eba9015f99f6f510f713d65f3f324ba543c2e9d3bc5eac9cbdd446b738eda1f", 48892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d898f7f6b1fb3ed914d6dfaa20bc29b0f94d293822df46b2a78b5759f2637549", 53068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1d02003dcc4ca64b3de96560fffcdd9e05125270589caabebc0da78d05d0f61e", 52352)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Blinker", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static blinkerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.blinker({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.blinker({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.blinker({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.blinker({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.blinker({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.blinker({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.blinker({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.blinker({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.blinker({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.blinker({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.blinker({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.blinker({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.blinker({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bonbon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7c2ebdfc96584f15448c9196a29a7983cad1097756e748e6d3d89db0cab6796", 38740)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bonbon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bonbonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bonbon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bonbon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bonbon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bonbon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bonbon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bonbon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bonbon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bonbon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bonbon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bonbon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bonbon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bonbon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bonbon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static boogaloo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ecd8d89eafeb4669ce51f02cef4e529aa97180ed7c2a9cfcbad4714ed9ede46f", 33880)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Boogaloo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static boogalooTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.boogaloo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.boogaloo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bowlbyOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d04430262e4d8e8e549ffcc4c97a27cb31ad26f9d2d85b2ba224381697b1a8d", 61596)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BowlbyOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bowlbyOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bowlbyOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bowlbyOneSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e2826dfb2cc015f4d1a83c121524eff701bea716ad41719d21b0baaf0462abae", 45072)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BowlbyOneSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bowlbyOneScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bowlbyOneSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static brawler(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("58683ec3f93abe0d96615faa1fc7fce9f3297205572a4c8c6265d0be27219279", 64320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Brawler", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static brawlerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.brawler({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.brawler({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.brawler({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.brawler({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.brawler({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.brawler({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.brawler({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.brawler({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.brawler({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.brawler({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.brawler({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.brawler({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.brawler({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static breeSerif(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9a7248ed16d47821a8836aa345a8297f6c44d86162fdbc6475497bc799db0e9f", 46612)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BreeSerif", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static breeSerifTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.breeSerif({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.breeSerif({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bubblegumSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("53e2f591d5b22787b4fd506e06145d2652da6014e1707f782a92395533188726", 38772)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BubblegumSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bubblegumSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bubblegumSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bubblerOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fd7ed8791a88cc19effc14df166be456cef77a85b707501822da21df19386254", 30944)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BubblerOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bubblerOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bubblerOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static buda(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("385d4247a0218281950ea513488d597434ce1d22bafe1b9e0b0853fce9304338", 90392)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Buda", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static budaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.buda({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.buda({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.buda({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.buda({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.buda({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.buda({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.buda({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.buda({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.buda({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.buda({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.buda({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.buda({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.buda({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static buenard(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("98e52931f613305f11ff078f1cb569682195e516554178bf3c4127f644df907a", 59764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b680cec9af406d125f721b89472951a526fcf17393adea7449be902ffb7f5cd", 58608)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Buenard", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static buenardTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.buenard({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.buenard({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.buenard({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.buenard({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.buenard({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.buenard({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.buenard({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.buenard({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.buenard({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.buenard({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.buenard({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.buenard({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.buenard({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bungee(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee34fb3fe185999f9942b2b39a37688866c1a4e25eab17c7a67765e7f47f6dbe", 110116)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Bungee", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bungeeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bungee({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bungee({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bungee({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bungee({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bungee({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bungee({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bungee({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bungee({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bungee({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bungee({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bungee({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bungee({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bungee({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bungeeHairline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7082ad6f58a7ae0bdd49f1c56b50fdd5f19c8e5a7a760de15f353ff47bf2c391", 97300)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BungeeHairline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bungeeHairlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bungeeHairline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bungeeInline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c34108c66136e4485dbe7f75f62e6d782066911952901a3b1657b8d37d5bf414", 147660)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BungeeInline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bungeeInlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bungeeInline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bungeeOutline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("53bb5dbad57c06403c9f7c9503b0397f17f001d2a0881305c5bee9de3c610f78", 200136)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BungeeOutline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bungeeOutlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bungeeOutline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static bungeeShade(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bd736a1fd1e9468b036a7df272341d90fa2864fa1a985cfef42c164898cadd99", 330628)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "BungeeShade", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static bungeeShadeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.bungeeShade({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static butcherman(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5bcf1ab19e7b312ef6a3f23116fef277d7af2240e6ee5719e5a8688f36f00e23", 66300)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Butcherman", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static butchermanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.butcherman({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.butcherman({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.butcherman({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.butcherman({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.butcherman({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.butcherman({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.butcherman({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.butcherman({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.butcherman({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.butcherman({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.butcherman({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.butcherman({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.butcherman({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static butterflyKids(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3e78c92335db0b2820b46df2d4a84c41e8690af1bac099b4a552e36736643b61", 202408)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ButterflyKids", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static butterflyKidsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.butterflyKids({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cabin(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ff30e9e9a66cf6a4e65d444d6bf8afdea7d574b27589397657972c2f9b2194f", 81084), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("db35751de9b88dfbea004784c70c96bca9d813b5521cf320e5cb30adfd7384a2", 80436), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4851465297f9c9aa19d41a969b28272f070f43271c7f279eb6daf3f291a47609", 81516), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2f1dff32a90462507aca783f85d6b2ed780858dd81a2a13bf217afbbfe5cce77", 81408), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b7e9674a2fca64e9eddd32df2987e72643c1fbadb5cc8158e4a429f8a99ea39a", 81656), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("da97f68bcdcff651e97b599499a784fc828a6e26feb94f391324076d060e3f7f", 81548), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9adb3df669ae368a467dbe74951a83ec476b74739063459b95b664e6ea2bf36a", 78196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e4a3605f6b618e79e1d2bc2e4890babb2828cca85fee80608cb7d4a810b06eab", 80320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cabin", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cabinTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cabin({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cabin({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cabin({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cabin({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cabin({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cabin({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cabin({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cabin({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cabin({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cabin({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cabin({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cabin({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cabin({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cabinCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8864cf658e1904654fb267649af1a35b07c0f9e7b2df523910efcfa047857270", 75132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("19d7c8b72085fd1898042b6adfa002bee67aa85565ea042e3383c6d9718262f3", 74864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("204e4e214a76e3cc970598f75636fbe098a6541146bb02dd3d1ec67c8e155e5b", 74872), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b3d243ed807d45b1666f9a3866bc69260a7d81fe656a1d0fc9335302b4d82fa", 74732)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CabinCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cabinCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cabinCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cabinSketch(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c56ec3d2c6227ce0f5959e906b36dda6fbf2ea830ed4edeb9000ee53197c122e", 155128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6dab969699fde26ddd2636960d9e77e5178036db4b98b1f3761df0e74e17ca88", 269912)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CabinSketch", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cabinSketchTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cabinSketch({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static caesarDressing(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee89ad88164ca8c3eeb747410087b9deecb5d306172af188f53bd267ec033f9c", 89212)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CaesarDressing", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static caesarDressingTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.caesarDressing({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cagliostro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3f57e12bc813bf3381233056c5544a970ea10f321f64dc63eef3ae1e650b2b93", 37772)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cagliostro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cagliostroTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cagliostro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cagliostro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cairo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4f4138b4fc3c1369eee1151ad813f76e1b371364feb318c2dfed606c6c7a98dc", 105268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("22d57a326952ad111119348fad278153f66b456e3f1e1b3eba074a4dc167f96e", 104816), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1537c4e5a58de46dea37716791ce13157250bce598772e19adbf07abdaa2f5c0", 103204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f5b7f284695e2fd50ce750d2a479bcbdc7f701be3c33893f0773866193c8fba", 104040), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("56f0547834a0a361e7216604988268770c085dcbd6f3241778f613b02d6db926", 98368), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4cf0e64d282c925bd689d2224fc9f34075e4586dbbebdbfa585ebab25a42059c", 105544)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cairo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cairoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cairo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cairo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cairo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cairo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cairo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cairo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cairo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cairo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cairo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cairo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cairo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cairo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cairo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static caladea(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("60f1d4e3a572497f3530ac2ae1478709e606b3bdaaa56f97fd7efbc48e01de08", 51516), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a200599eb491ec914c9ce2fe7b2cdda1f14b4d082af53d054932993d3db7e7bb", 50840), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fb25a8c8d05e937b9c5c3a001d1801276ba670641e4332a5f5d83cdc357cc5c3", 52576), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0d6a8296a9489017c434820f994212d73ffe43b80bc9b3913f0eec7a4b3d4ed5", 50968)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Caladea", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static caladeaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.caladea({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.caladea({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.caladea({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.caladea({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.caladea({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.caladea({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.caladea({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.caladea({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.caladea({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.caladea({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.caladea({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.caladea({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.caladea({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static calistoga(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bbcc8c6618b098df3f7de4ee7afbe7a4ebe1832e5d8cca3579199c4e73ef5e8f", 77552)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Calistoga", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static calistogaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.calistoga({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.calistoga({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.calistoga({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.calistoga({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.calistoga({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.calistoga({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.calistoga({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.calistoga({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.calistoga({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.calistoga({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.calistoga({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.calistoga({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.calistoga({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static calligraffitti(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("580e522ce80a61e980096a261015c86696213b70822d677e4de3902787578e63", 46940)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Calligraffitti", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static calligraffittiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.calligraffitti({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cambay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7bad4e2ac4cc5bdeef53e890b4b3d52b065fdae8ebe5f754f263384995f7c73", 140024), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e821a1eb24db547646223e8b5065d6feeed373e25daf722bd4c3499785d3b6aa", 155856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ece04d3d10726b39914e7a3c3ebbef7ccadcf7a26272fc090c83d3bf7690eea4", 139576), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d17daa8d61f0a8bdd69696d0da7fc566e3a13141eb0ae45e512b48dcafb92565", 151048)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cambay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cambayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cambay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cambay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cambay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cambay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cambay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cambay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cambay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cambay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cambay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cambay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cambay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cambay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cambay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cambo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d8d683131ae5168d1210d9676808b76b985ad2a151d3a7514ec02f7b8a776b9", 29056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cambo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static camboTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cambo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cambo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cambo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cambo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cambo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cambo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cambo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cambo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cambo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cambo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cambo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cambo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cambo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static candal(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e16795a5489340834dda623038868a2e7f48f4bc0f154f98c1a1962894a2598", 32200)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Candal", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static candalTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.candal({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.candal({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.candal({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.candal({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.candal({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.candal({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.candal({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.candal({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.candal({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.candal({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.candal({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.candal({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.candal({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cantarell(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1e62d82800c92f72ed501733b5d52d7b8a5d88d1c6315bfdaf7f8ce781108c00", 47436), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6d9559dd0df30daed7da97dc8ef05e7f39b72205fb9bd7a055ddaa5242afd36f", 50000), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("db0c34021061680135f973a2cb5565811527ea91f2fa07d023f4e105eb6f45d3", 49208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bb2c0f469972ec2016c3b8b8254ea0077f46207efb249afb3c4d356cf2c5418e", 52132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cantarell", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cantarellTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cantarell({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cantarell({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cantarell({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cantarell({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cantarell({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cantarell({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cantarell({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cantarell({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cantarell({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cantarell({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cantarell({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cantarell({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cantarell({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cantataOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b58597daf95866fac678391238aefbae4bc3e31e826a3b85a2c749c3844a4dfe", 57144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CantataOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cantataOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cantataOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cantataOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cantoraOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("242d2167789079107cbe59c3e9ccd0339ca51419245296a4659c6b3ad73cc41c", 109236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CantoraOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cantoraOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cantoraOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static capriola(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("938d0b1c7f521513ee9bb1114d92827718670e0e5a495ccd564d70b0ddc59594", 78168)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Capriola", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static capriolaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.capriola({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.capriola({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.capriola({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.capriola({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.capriola({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.capriola({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.capriola({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.capriola({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.capriola({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.capriola({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.capriola({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.capriola({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.capriola({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cardo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("286e6a4bde92ea6087b503978338898808df924a3cdd8144741fa780d11603a2", 400420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("43bee56e6bb3d2ad574558a859227592f0b0ac881a70fd8f2cf74b808bb9be00", 262820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("10c0bab22a674656a3d5e94e05e64f9c6c6ea25acce0d0fc846f964985b142ce", 348296)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cardo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cardoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cardo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cardo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cardo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cardo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cardo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cardo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cardo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cardo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cardo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cardo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cardo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cardo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cardo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static carme(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("79973fb109b078d0e49d90287e9f6527dc8829c6076c878ed07743d78cfb988b", 60852)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Carme", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static carmeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.carme({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.carme({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.carme({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.carme({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.carme({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.carme({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.carme({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.carme({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.carme({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.carme({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.carme({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.carme({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.carme({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static carroisGothic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d013d780a3d17a244794f0d2649a6214a1946f102ddf0a02fe366fa7bb8bb6ec", 26212)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CarroisGothic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static carroisGothicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.carroisGothic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static carroisGothicSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b50b78ae9eb35706d3d9923b420465d6c6245e9469dcbe4a96c30d118338edf", 26084)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CarroisGothicSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static carroisGothicScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.carroisGothicSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static carterOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("64cdbf0babf6eb9e23f0a780f283a930636589b4b8d9a5d0cdf24888a7719292", 63872)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CarterOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static carterOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.carterOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.carterOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.carterOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.carterOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.carterOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.carterOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.carterOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.carterOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.carterOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.carterOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.carterOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.carterOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.carterOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static catamaran(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8e9d704be93826d9781f133277934bb6184afd9522b149f005c78f5d89e62ac", 51516), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3f24bc068d63c199fab01e5c0690d6e034f485057c3c19571b656e705a78756b", 51520), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("853537ef3cef46cebdd3f2ee0f94b33861095d50b2584d6f96a47725f6f4b79d", 51428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6af095039ae2cc21b9f8e147b290dc6fae99dd4f45843dd262a9e30557dd4e65", 51200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2b80fad7d7ef99a42af9235090775e879520d07fb7b3deda4986a64c81be4a96", 51172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d77e1072b0d92cfa66cc458ff7e053b1e33cfa9dd663fb52f75062ba9a134122", 51028), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("47d32e32345049db4c0f41c0ffba707afcf0ac18cb7000817fd26ae811255728", 50828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("342bd0052b9b81ca6df68a9cdda635ad6f77c796e37045545bfa1d0a071c0bc8", 50464), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa466db090fa897764fa413a006d0c4f7a975a118db3de634988a14f674446cb", 50220)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Catamaran", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static catamaranTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.catamaran({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.catamaran({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.catamaran({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.catamaran({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.catamaran({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.catamaran({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.catamaran({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.catamaran({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.catamaran({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.catamaran({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.catamaran({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.catamaran({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.catamaran({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static caudex(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e0c195632ea06158f87e86ee898119dd8a7f59788999552ed79be77c33c6a726", 466276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("53374860983e21bb358d83d1162c824903649ae49f873a963c665b066514bb9d", 559392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("09a6db433fd45eb3e1423e9947afe5b766008cc358cb482b42103970fc840676", 471660), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("45c118976f77e53a2a5122e22cace7fb846373a14892fbb7e0ff61e1a46de1d4", 555108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Caudex", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static caudexTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.caudex({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.caudex({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.caudex({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.caudex({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.caudex({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.caudex({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.caudex({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.caudex({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.caudex({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.caudex({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.caudex({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.caudex({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.caudex({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static caveat(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ffe3acdd9c8d91838d7ba021d1c4e9111151e34a104318a8aafe0efeda5755f", 165376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6993da01fa90c359d45a03be9927b46be80d261978de6f5805f43d75ed2d172f", 166236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Caveat", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static caveatTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.caveat({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.caveat({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.caveat({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.caveat({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.caveat({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.caveat({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.caveat({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.caveat({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.caveat({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.caveat({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.caveat({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.caveat({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.caveat({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static caveatBrush(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("70de81a815f44819880ddba3c93eda87ab6bd1a4b21db15e5ba29c9271cba521", 232640)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CaveatBrush", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static caveatBrushTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.caveatBrush({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cedarvilleCursive(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1296a081a20bf4a1936ace5eac4d05fa6702cdfaab5f94a5088af4c0aa46c3d", 68704)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CedarvilleCursive", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cedarvilleCursiveTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cedarvilleCursive({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cevicheOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ed3cdc36bf356dbe366b2198c633acbf26815fc96c14ba05a7847b274043909", 36688)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CevicheOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cevicheOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cevicheOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chakraPetch(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ecaf4ae2d67c61e2a3fa8df13a271ccea00d43000ba74107e7bfda439f60b1d2", 70452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("020376f9083d9c7e6f32ecb879dee72b6fadef64ea9a3df0bd01d4952a06f1aa", 72720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6854c9992a9a1345525235ab8e75582a0f6f3f828c37e4720a78aad1de6c0aa5", 70160), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("114572d34834d0022111a2a7a0eaf1d6bb7e3b70537f2c52e283219fa86ccd02", 72412), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("179d4e7774a67d1c01789bcf1bf48e72fbc37fa173f3373470769b54a505ad17", 70152), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f7172b64774efd15a32d833b00836c9e30c0ee766c096a08de2a427c904f5c2d", 72504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a6b54f7d68496d966460fe300af5b72cc91ca631822110de9fbc976ceabb2591", 70164), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a7a04e1ebef703c41253da2ca8a90c83a63649e471590d939c69828a0e0e591f", 72524), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e409c139ac42c535be29bfb904109788499a4b3971f95c0853dce713da259ea9", 70068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("86042cd1693573443cb56c465a3f44172486eb888d707fcc03eb3dc8600008cb", 72408)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ChakraPetch", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chakraPetchTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chakraPetch({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static changa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e248c51b3bc1f8fd1d6b980400670c54bf2cdf89f4c5e075bca29f09ecdb936b", 81252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f083dc8e9965f9e9b8c6c977bcfac5a504f4ef820e8c8237f1217d4edf3bdd9a", 80888), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("01d71ec0cc7235bb908cc0c3ae45d1e10a2f87e4a61ad5ef855af157f39e8a80", 80184), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fb1d544301460f01712f06d94a05af7420497d1b5791bdf43b542c0351227242", 80588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c22f4b8d7a97aaa32759b9336354bdcf999861dac5d589a4e02e7e5bb9504f98", 80472), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0a274e0c0a7aa46f455bf65caff8b972998ce8fc975bf677ae154d5765ac4c0f", 79956), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5d419cee41ca204d194f089cfd5d8d35ea6bc706a8f606ecaa69132df9854893", 79556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Changa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static changaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.changa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.changa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.changa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.changa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.changa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.changa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.changa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.changa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.changa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.changa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.changa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.changa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.changa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static changaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("55a043f0a2eb34269cfb137a6203fdc338019e9bdaabee1e685c6b37495cb962", 22668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("241077b802e7b6209a41ea93aae98aa81d9f09e6f78fce924c863af6ca96b529", 26680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ChangaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static changaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.changaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.changaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.changaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.changaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.changaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.changaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.changaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.changaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.changaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.changaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.changaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.changaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.changaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chango(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("66d5dcae03b7a0d59f38640d05bb920cc6d3b4e2a1cdb176628330e20ab9a6ca", 40684)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chango", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static changoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chango({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chango({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chango({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chango({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chango({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chango({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chango({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chango({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chango({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chango({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chango({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chango({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chango({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static charm(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b2803aafd875584dcb262e1eddd8dc7542342f4d2d76ac5f9b06c6b5e2bae18f", 121276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("40f34767fa59a87e641da20236b9966135321cb03c1ed68d88a6234d432d2604", 122112)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Charm", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static charmTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.charm({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.charm({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.charm({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.charm({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.charm({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.charm({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.charm({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.charm({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.charm({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.charm({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.charm({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.charm({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.charm({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static charmonman(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c4d7f973e9f5d882d38668d863ec90889ddc79cd302e832da538621ac970513", 100884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d1492915dc59b590610a5b5bcf4d1b9aca380c377b870a0a9de187fc05146908", 100612)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Charmonman", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static charmonmanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.charmonman({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.charmonman({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.charmonman({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.charmonman({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.charmonman({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.charmonman({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.charmonman({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.charmonman({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.charmonman({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.charmonman({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.charmonman({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.charmonman({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.charmonman({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chathura(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("78a5a2532fd10bcf3317ec8440d1e758a309bd152369607ccea764abddbcb168", 345716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b8357f2b60bfe270ca77801978a0bd5e729870ffad8b19d54ff69cded800a1f", 340972), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8abdba026fb7a58e3f5b2cbe302ab4d9e817e69dfd7c6fce0ffbf22fe9600f5", 330780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("129573e675c52db3364e6d6ac3d517a6cb8113531a3bc2b54276e1d28d28c11a", 329608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6190f40f502b8b950146bbe4ba7b7b02eea38047766ba5b56895059e3b6c655", 328760)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chathura", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chathuraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chathura({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chathura({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chathura({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chathura({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chathura({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chathura({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chathura({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chathura({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chathura({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chathura({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chathura({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chathura({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chathura({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chauPhilomeneOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c44d00d1e4d0cfcf8ae3458b12571cdd000ce9df7849a29afa3dd3aadfdb6224", 39692), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5be1fbfb8c59a78422d618850745eeabe8bebc7aef35518a599c765168ad124a", 43992)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ChauPhilomeneOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chauPhilomeneOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chauPhilomeneOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chelaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3efd79a48f37981dfb1dd9c73243093c103f990459d6cc0e0918ed692c2beef0", 35492)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ChelaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chelaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chelaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chelaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chelseaMarket(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7841b0525f53772efeff1353b0297e9faa176874f84319d11057dfa3d129147b", 172508)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ChelseaMarket", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chelseaMarketTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chelseaMarket({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cherryCreamSoda(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("47e79c87ca78a16fd9c841454bdf7ea5a7485a08a7f78baddcc83bbc2f510729", 40208)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CherryCreamSoda", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cherryCreamSodaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cherryCreamSoda({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cherrySwash(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c16f18e4a0ef56672f00dcd810fae50a7468eccc6174968c6890ca1ed1eb4dc0", 30548), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("46fc53776950e3047f5b647b1819e4ec28a5521b733a7e614aa9d97562cb5371", 29984)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CherrySwash", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cherrySwashTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cherrySwash({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chewy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d88ead910c7aca7ef7e4aec8e38bc7bd8ea2f85b93181a960e2747192d839469", 36096)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chewy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chewyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chewy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chewy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chewy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chewy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chewy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chewy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chewy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chewy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chewy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chewy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chewy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chewy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chewy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chicle(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("463fc42349dcac85fa8e161556aa92b7ae3f8d9cd174ef7b134ac072382d6069", 40964)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chicle", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chicleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chicle({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chicle({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chicle({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chicle({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chicle({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chicle({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chicle({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chicle({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chicle({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chicle({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chicle({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chicle({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chicle({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chilanka(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c0b4dcbe94cf228d02f67f71242fed2881a691a3b3516a791881a3428605d6dc", 338888)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chilanka", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chilankaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chilanka({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chilanka({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chilanka({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chilanka({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chilanka({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chilanka({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chilanka({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chilanka({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chilanka({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chilanka({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chilanka({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chilanka({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chilanka({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chivo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("994635489f0d118a198cb7efcdd1b61cbd4431c9e6426fffad5b731c4d2c1a5c", 44544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f512baee58b1fc81a387836a8de41c055d2bebbfde221bd5f6829c1db58d9baa", 38544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c45551e766074f40061345617f0e07c5a4a2ecbd70ce90f3c7456284827c3184", 41264), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1940d6e1383f625468fbb0231dc6d8ea95eda2d8483e23e66e94d6bb05996ca2", 35312), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("49e634b98df69d1812b9406be76ebe8c76888e0202ae16c267aff5f9897d279f", 33884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eea6f18e9fa02d840e18d03dfe74e65437743472807f1f0a93bb11254419cdb4", 35400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b16f1d6acd367f8f1dd75d71e56027975f5f4c661b7272c0ae41a0635d55908a", 34680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("da92d63af2ecddbae2e8cf92a528caebcba3ed94b7b00e2ab04d228c4622c806", 36840)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chivo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chivoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chivo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chivo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chivo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chivo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chivo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chivo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chivo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chivo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chivo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chivo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chivo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chivo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chivo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static chonburi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b8e4b1d59bd57981915ee60262422c0d7b7bc237ec938d181c684425e608baca", 112300)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Chonburi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static chonburiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.chonburi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.chonburi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.chonburi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.chonburi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.chonburi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.chonburi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.chonburi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.chonburi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.chonburi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.chonburi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.chonburi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.chonburi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.chonburi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cinzel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1a1d67206903b7688f4187df3dd0563dce75a49b26d036c7e88798adcd6c8fab", 55732), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d385de045feb981ef4256fb3f82d128c1835f686ed5611dd1c5b01e8b615e7bb", 57244), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fbb068fbb60eb4c57957c490b9e8c4b00d9c8cc14bd064d85fca96516f5ae46f", 58144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cinzel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cinzelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cinzel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cinzel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cinzel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cinzel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cinzel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cinzel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cinzel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cinzel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cinzel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cinzel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cinzel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cinzel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cinzel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cinzelDecorative(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e2559504f7da1fc2410b4eca9cb5ca6fee8c1ead7c3920a0b225ef4f1da9034f", 60044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3a01d62b7c7d50b908e2fd62beb09363fb5e99ea2f21e0e79f71e5a6c356ceba", 61900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a9e463550cabc5d5d694e24c136e6d235212011e58c21d523229960a16bc5148", 62320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CinzelDecorative", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cinzelDecorativeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cinzelDecorative({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static clickerScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a5d266712bdee3e9dc58039be9fe3d6492b6d9de30e12c387ff7726b7bc43566", 63596)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ClickerScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static clickerScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.clickerScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.clickerScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static coda(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3286b71ee83e8775ab6ae6fef1580c62d0344ad5a8a10ba144104648a36f9749", 37032), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0f385f570ff23725ac544ecfcf2ec8b8cbca733a730d2038266a6eb8b071e4c0", 31676)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Coda", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static codaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.coda({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.coda({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.coda({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.coda({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.coda({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.coda({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.coda({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.coda({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.coda({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.coda({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.coda({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.coda({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.coda({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static codaCaption(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("28b801f8b4a3bbeae1f47a3081d64a60cba59d844b8d9719165a993bbfd5424b", 59700)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CodaCaption", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static codaCaptionTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.codaCaption({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.codaCaption({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static codystar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d8599cf77d1a295657a62a9be2067a1d7c27dad40e7ae89910c6516e57f1fdb1", 101120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5d2fb67af692de14dd1f3b942de494168b78c1cef3cc103867d36c4281ac0b00", 106084)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Codystar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static codystarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.codystar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.codystar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.codystar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.codystar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.codystar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.codystar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.codystar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.codystar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.codystar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.codystar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.codystar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.codystar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.codystar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static coiny(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d7c4ad8ba1a68159f3a01ce26a6ae52110298a54077d3aa35b12d216941a3f28", 88036)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Coiny", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static coinyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.coiny({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.coiny({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.coiny({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.coiny({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.coiny({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.coiny({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.coiny({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.coiny({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.coiny({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.coiny({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.coiny({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.coiny({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.coiny({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static combo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bb7529647493cbe7db3d0199e9c64a31b084ffe6f9bc8408a5eef9a588daffdd", 37416)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Combo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static comboTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.combo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.combo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.combo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.combo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.combo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.combo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.combo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.combo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.combo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.combo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.combo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.combo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.combo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static comfortaa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9c42dde162aca0ef35c66a372266676483320b31bd2d1069fd2ec3879d092000", 106812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1a86afe9202b2f23f62ea6a901f0f299515c34673aea8cf0d8ab2270b4d7013", 106948), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("30b5d292bb0fe9543a8ae812c3a2ce1ca57f9fd6701afafad31156536db5f08d", 106956)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Comfortaa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static comfortaaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.comfortaa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.comfortaa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static comicNeue(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("03e7eb4282b1113db14871908b545b6c90e66c01c71e25eebd86710af1675dc6", 36488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e3f90ddc32d7c1de1802b67c219fcaa9a3363ffd6798d5135d4f660a1dda1b26", 35420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9d7ebe6d4d4dfaab467fe4a423295d991fdfbf4d1989fcaad2f84c5f338ab089", 36536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b5fb7946d3c3a90935983acd29701d85ed3c845dbea8a353f82e297d2c3c0fc6", 35484), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4b38da288c36361aa89d7bd2d0cb55585417eef4ae2b1c087d41fa9d3616eb70", 35256), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("77d1c55b067195ccd5450ef65c41c0bc9adb016fdc56465fa2323318e59a9fef", 35480)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ComicNeue", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static comicNeueTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.comicNeue({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.comicNeue({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static comingSoon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("193064f6768240e8165c7b8f6dec7b2dd4cf009b638b76c7b879098469346c5e", 49836)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ComingSoon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static comingSoonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.comingSoon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.comingSoon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static concertOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2539111a44381dd36a5a1ab7f50323edd3755088027d0c83419b5ecb88ac14e2", 44788)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ConcertOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static concertOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.concertOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.concertOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.concertOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.concertOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.concertOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.concertOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.concertOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.concertOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.concertOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.concertOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.concertOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.concertOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.concertOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static condiment(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("404ef1b407aafc9555242dbfc0416b9761054b9bc16abacf2ab328af7b034b66", 43344)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Condiment", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static condimentTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.condiment({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.condiment({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.condiment({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.condiment({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.condiment({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.condiment({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.condiment({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.condiment({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.condiment({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.condiment({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.condiment({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.condiment({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.condiment({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static contrailOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("51cdbe97cef3cc835b94974aeff5d8805b5d25b1904ad5355836afe27b0cc199", 31136)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ContrailOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static contrailOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.contrailOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.contrailOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static convergence(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bee94289e5374af0501d83d8b767d631571ce0a2ab1c16a765bad418a9fbbf22", 30172)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Convergence", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static convergenceTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.convergence({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.convergence({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.convergence({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.convergence({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.convergence({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.convergence({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.convergence({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.convergence({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.convergence({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.convergence({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.convergence({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.convergence({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.convergence({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cookie(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8d01e7c434faf0f6a1c7c2f49021b8ac01590d10ba4cb8c15683299ed0997536", 43752)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cookie", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cookieTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cookie({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cookie({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cookie({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cookie({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cookie({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cookie({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cookie({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cookie({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cookie({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cookie({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cookie({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cookie({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cookie({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static copse(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ace02d3cf195f5ddfbe562a9361241356d198ed56d25ec6d8dfb69e08a50133a", 59116)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Copse", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static copseTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.copse({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.copse({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.copse({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.copse({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.copse({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.copse({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.copse({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.copse({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.copse({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.copse({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.copse({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.copse({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.copse({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static corben(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d7fa399441299ed2b575ab62e7d0338bebb9b110c569b1ab9661d8df90029b6e", 35760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("101e1a5b8d96f12fffab739f046c3a869a5edc6a0a4d2f980c26cef6648331c0", 113588)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Corben", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static corbenTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.corben({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.corben({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.corben({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.corben({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.corben({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.corben({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.corben({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.corben({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.corben({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.corben({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.corben({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.corben({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.corben({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorant(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25d9142c8c73577fb3546a40795e753bab11f4e22663e2f1168cbc485cbaa542", 369920), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d90d995e2a130e04d6e32ee3778e059092e41f5d9c1c812a659c7ffb52951a19", 241020), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fd04cb22306c1c15bb1727fc4b3d2344de940e929b75dbe3faa9b7f43f9e0d6d", 370052), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1f64218505ec6321eba3b8df95d0806808f61c872f9c081bce39c00a402a4429", 240392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20c11bc6844b3f25ad300ce80d94c0c0fc2fb997b51e04cd1959156c6d78309d", 369256), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("47bba53369e3f5bcda0e230d7e6fe60ae86b40b59b80d57c603c50e273d2f17c", 240280), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c1821d5e327189284afba6a7a2a9831a3025677c5afb37910353410a72391791", 369328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c02d2b3a07288427fe5cd64e378eebe86d6a308b6d7dfe0e8cc4d1975d32e0d5", 240048), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a91dc6bed8f499ba7dfc43c8259fa142dc1d0097d84aba2a73c003c35b409845", 368108), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("01317d3f16a7d1e98e9fcb9e49778326433ab76c291971e501f5e721ac437b0d", 239228)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cormorant", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorant({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorant({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorant({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorant({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorant({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorant({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorant({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorant({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorant({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorant({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorant({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorant({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorant({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorantGaramond(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e5ae2850e0033754375df527e1bb29ed63bd133553ce65b8d9313dd4cc944f8", 674036), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("86bc19f83cdf358de6e84a3bdbdc0f24e24d47bbdbf7cc2eac80d7bfe24dfdd4", 426064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5a2dd210ea12467e5697bb32480d20e0ebfbe2c2af1c64b1679567cf3486a8a5", 673208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4766c3793328466bbd4f974a3843b2bffb312bd22c98098b0dec8990ba48f5e2", 424232), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("31bc31d93d2a5c505ca03887ae0ad2ad816caf59499f35016d89fe4d5db18ced", 672392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e2b5d7b06e08f325bc0513179903b1423183f6533fec2645b64a6e1f24ad699c", 424904), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25068099ded344cf0919185bae33e11bca97b6c8b1a528dede8ac80325e27c6b", 671588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e316fc5e36acd433eb0c3ea1b28d8475a1ff9d0da27bf329fa1bd5d54eb870bf", 424716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b273c7be0b4af1389631638e4f056f5d9066fc17d321e665b3a28d43001736af", 670200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e1c32c701a4b7594cd169653bc0feceed0160066ce7cedd06999fc884ddd6c02", 423900)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CormorantGaramond", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantGaramondTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorantGaramond({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorantInfant(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9168080bdab2d447729e3f3046722e4d88cfd4cb5a1862dc6d916cba737791c5", 674136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e6958c39fabaf907bdde7ba424eb0c17f3fef77c989edbaa01115b1fe5c6e067", 425328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("47164cf35cfe61e120d0e8c3e775559372e1a738f9e2c57cf85aa05e8c4bc806", 673248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("84f78b4a61cce77b8c2c9663434b1c6cf0316b556002a2c9ea9df9265533cf6b", 423500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1d23820c90080bfb4aa4f9cec1e1ef64424729ef0c9b0e977e27806b21d81304", 671764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f8a57af623179b25d7e59c823c1acd0563f9cfb6f1f03da9532e49bf49739dab", 424168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f6a06c7e0bd73d14e395e0d977119af3b5fae58a9ce153ab18a277182316b424", 671652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e1ae8191f481ca057de000de05308f0098090fd60456b76f13b1ffdc82ac1b1d", 423936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a03a98979c43146bda66d723dfb38c68b77012ab2433f4eafcbda573433d75b5", 670304), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ceb4474fec6832dee11e5cc5624186c760e7993898bc39599f3fe8248cbb1b70", 423176)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CormorantInfant", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantInfantTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorantInfant({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorantSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20075e607eb45ea2e8f60f9365f2bf608df1251f443ae12295d751b425dd9b62", 652740), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8c091c9484c2f6ac490d1613295b59e76d359ad34e1c52fb2f853a8c2ea0aac", 651888), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("85cf334d625e0deec8283f8aa03ec6295e20a52c371096595411dcee4bef2039", 650624), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2a187b0fe3cebc137da0b069c1017ad0c1cfb10ef8992089d21b8261bbc9ad0c", 650308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29e53a056b50572310c96ff3a83932d488c6954871aced226c122e7f3ff8b00b", 648928)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CormorantSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorantSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorantUnicase(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b2f697aa9071850538a594d14122faff09a953f9e6b7897e5284ae9afe2c2b0", 653392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a075bd869512a69bf9bfcb4b1987513cf71f5b0f8931adc373783f751c44553a", 652624), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa07955427124a8c76b2621bceba09805d61cc57efe1c57120f9fd91a46e04ce", 651372), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("34d64ee75c05feffc586b864ce55af03115c3fd6a3c3fabeeef53742fd991848", 651056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ad4713eaa8a5f3198c0bed735f60707e4cb0c77de5643d8b4df7f61e8a8979a6", 649664)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CormorantUnicase", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantUnicaseTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorantUnicase({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cormorantUpright(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29c9067ec4aab7f8532dfad801cd638d35f8738903ec7c40f80069030e231431", 156128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d7c8d8d44c6591234b85e43c1b61a5f4adc82016e3c7f315b206cf31fda62572", 155736), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e1c85ea60d180f0a621d975977e7e75c7d398a4d4fcb569d2ccadd85c42adce", 156096), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0d60d4f81c0c154612e2e9b3b5dd56c2ab5e74e4d8e8507d9725ce908a54c914", 156140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("441604498e23b982bd6adbe6fe749140f9955eddd7a905329bb88bf4ca9a8f85", 156320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CormorantUpright", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cormorantUprightTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cormorantUpright({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static courgette(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2754f22af579b8f14d78397e6cc4d3879519ad579085e8c047ba2f7719c592a4", 93820)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Courgette", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static courgetteTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.courgette({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.courgette({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.courgette({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.courgette({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.courgette({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.courgette({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.courgette({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.courgette({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.courgette({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.courgette({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.courgette({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.courgette({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.courgette({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static courierPrime(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ab28865b2644070e548699748855f2d5a34b5bf8adea09607e18d4a7adc8999", 40588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7109c63818181b56013b7ced3e5da53d756aab727e6a9786a0c8a58affe4ec23", 46896), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("385e70d216befbb71f12f5009f1824d235e0f4f2ab653bb0296d5d999afdfd3f", 42136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3f61e15019812e414a4dba4f3b4fbdda453e8c4dd18deafacb7c55686cef11a7", 47340)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CourierPrime", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static courierPrimeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.courierPrime({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.courierPrime({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cousine(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("753f2dd34e36271520e1bf057a91850492b226f76d6da301cf6955b4b32177a1", 191380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("23ddf22bc3d06b028fce6e266632d38c97fa151a580be71b5ad43ee7d34d13a0", 200304), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e472053ed3d50c647f75d5654f0d2ff42cbf5221cb14e1b1af3dc25dbbd6ea4", 191172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8b14c04baa12f36602157da1c6c26f539163a93e571133c17d0b5acc34345bfa", 199244)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cousine", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cousineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cousine({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cousine({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cousine({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cousine({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cousine({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cousine({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cousine({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cousine({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cousine({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cousine({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cousine({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cousine({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cousine({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static coustard(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("657fe3ebd0e1b0402731533db6ddbe6120271871430adfff3ea617c35120f166", 39700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c9288e8be500e6cb9ea6f0ae05167d9ee149c0d91fc8a422055f396236b1e413", 42376)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Coustard", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static coustardTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.coustard({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.coustard({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.coustard({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.coustard({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.coustard({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.coustard({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.coustard({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.coustard({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.coustard({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.coustard({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.coustard({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.coustard({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.coustard({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static coveredByYourGrace(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e2e2deb5e6914da1e25b2a2f5161ff4e08d65d6e00d26081708efc7ffacca93a", 57040)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CoveredByYourGrace", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static coveredByYourGraceTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.coveredByYourGrace({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static craftyGirls(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dc184885668047ca66db5a530c0462f1b1ef2f2d6867b7f938c59dbc9d282de2", 61632)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CraftyGirls", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static craftyGirlsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.craftyGirls({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static creepster(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bb14e63f8fb5e6bd8706e47aea59d9e2b6b3da1b2f987d1468a6ba5cda2d1fc1", 62700)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Creepster", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static creepsterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.creepster({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.creepster({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.creepster({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.creepster({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.creepster({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.creepster({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.creepster({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.creepster({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.creepster({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.creepster({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.creepster({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.creepster({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.creepster({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static creteRound(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("62fbd9c68fa6485a1a4fde14a03ed6a5268f26365fff7614e5704531390f0363", 59264), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c8e915bc50126a1af673b8fbd3181aa9f8eac78545ec1b8d827ac5bac66b5cc5", 67216)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CreteRound", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static creteRoundTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.creteRound({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.creteRound({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.creteRound({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.creteRound({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.creteRound({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.creteRound({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.creteRound({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.creteRound({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.creteRound({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.creteRound({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.creteRound({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.creteRound({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.creteRound({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static crimsonPro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b66abfec21e34e91fc61b2ac08084816d4d166259ea2198ed01578a1ac727e5", 89240), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9abd9060a62aa38f10dc60738f37bada274814485a3b3bef4353cbc2503358cc", 89212), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("510241ec6793070724a690b137fdfb9f98422a611b8f81c1e6f22d345a0fef65", 89216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c758f7367d51b291ba0a17386117e7269f7a438bb2dc40acedc1574b113e43e2", 89248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a0668cef91f47f8b6609de80f66e247d934bc12467bed847c61ad8397297db31", 89292), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("37a3b4d93b35047eba32401d0e748ed133547287e16a5bacc9e40c85d85b489c", 89208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2fff124d10656b451037180b7611d390d0fb4f603400346db8986461325e2503", 89300), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1e12367e6d503736e81c46a7e8dec43a84b804f31bcd06c8cd2e318cac7888b3", 89264), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("02069dd1baa583bd54af1c82cd1979f3a078ee4087ddd6f64eb34b23c9370ee1", 91212), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("96b97a5f9ec116f9f218a3b7de6daa5e95e9c6cb1c49b21f12e2df59d5ff2380", 91168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("737b0264b20a8110302dc2f70673ca8320d865b82c59d69c354a1e54b2edde3e", 91044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("654dd004b7fefe64e3ef615227b16e1da3abce493c844e6359cebe3bc1e98f18", 91188), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c98a3ef2ed0a7bc571852f4b28fe383e22c671bf9696106fb88605680abfe9eb", 91192), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("dfc39b2565c337e814711b840e339b33b5f5b223042561963c34a8a4cfcd41c8", 91052), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a2dfc4edba8a2ecffbdf37c1e7ffc640034bbf2e83449b7e5df15e39cd78be80", 91200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a99ef7991d1f3adeaa296d774cdf32d4441511e024a0bf21a52b3cac625c49e9", 91156)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CrimsonPro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static crimsonProTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.crimsonPro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static crimsonText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("883d56072155a485051564cd3019bb34a608ddfa0553e2295413e7a59c67bd28", 186656), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("33025a7588fc7f2ca1b8eb2b599e2420ad23278ee100a8f7e11c881d385af57a", 98404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("37e75069b54a5c937eec2ba3fd3d193e3825fab2122bef2b86d86bc5ff1caab3", 76316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("15672e6c5d2b277c8dee2e6dcbffc17d3ba0c9a3018c446e199636f68dd227b1", 74068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6bfa338154c86d462eef6a8dc69f2443ecc35740bbdc2f2da06e7599c037cbc", 92296), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c79dc3f51f37e16300b571c6835d06bff022a018b65d9ea69f1f897137acc238", 74264)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CrimsonText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static crimsonTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.crimsonText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.crimsonText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static croissantOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a51f330afdb3504b94cb09686589076855186483e4e89665623ebe0f655ce6ec", 54696)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CroissantOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static croissantOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.croissantOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.croissantOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static crushed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8487a87e68819238f02206a3eab5aedf7deae9e72b1010c364816df3934ab08", 57404)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Crushed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static crushedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.crushed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.crushed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.crushed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.crushed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.crushed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.crushed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.crushed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.crushed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.crushed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.crushed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.crushed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.crushed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.crushed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cuprum(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bddf1f3b7162539ab2c939e699c275d83ee353437fc657257d945347dce5c66d", 69128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("27d4e15720e86dcbe0f0f3e93656c40e57203137b143f5a396d8a56e654963c8", 73796), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0a3719a13307973f16e4ebfb3980da3f7d190316e71ada51aa42650b95524c97", 68608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9bac99436b2027f87f8c0f692398a62b76be18874fbda4ea2b56aaa99553e6b2", 73828)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cuprum", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cuprumTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cuprum({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cuprum({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cuprum({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cuprum({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cuprum({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cuprum({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cuprum({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cuprum({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cuprum({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cuprum({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cuprum({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cuprum({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cuprum({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cuteFont(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("264e6741d6541397294f9de009ed33b609adf005445eaf7a346c99b03ae75feb", 598524)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CuteFont", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cuteFontTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cuteFont({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cuteFont({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cutive(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e0849ce3a9bd06c1d093ce26a2727da8b032430d3d39d191cfd79df0983d490", 41960)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Cutive", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cutiveTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cutive({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cutive({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cutive({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cutive({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cutive({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cutive({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cutive({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cutive({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cutive({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cutive({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cutive({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cutive({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cutive({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static cutiveMono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0582d0fd288afe72a3eeebdace411705bd456580eb96ee5ef7214afd771ebfce", 47056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "CutiveMono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static cutiveMonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.cutiveMono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dmSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e518fdb0a5c0ebe0d1d1b02a9025067837e79d235418ab9dc8366e7ce87fad55", 43504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("de4a1215c7928ebdd157181021531f87614894038bb9396b05826b7ae9595611", 44712), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("683cd0ce949642886f9652656cfe66d569a79d1530fcde104214769c266ae121", 43300), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c3126b61a6d535d42dd4e6e4eb66648863d4d4f9bf639d63da74d20cb3fa1fb4", 44576), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("940d8601e85100233071b73474474f0ea11612beecddd6da32efb7cd8a3971bd", 43236), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("579b8c8cd4a4fd71ee7ac563e399eacbcba63f3f8556516c95830d98bb9fbae9", 44512)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DMSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dmSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dmSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dmSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dmSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dmSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dmSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dmSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dmSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dmSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dmSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dmSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dmSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dmSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dmSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dmSerifDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e1157689ec181ea520aeee52f8f7f8c16e0ced52d30800c402aae31faf50985a", 56068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("007cfd580d7b1323a1b43156d2591b8119745361daba6117832dcbfb0146a36a", 50564)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DMSerifDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dmSerifDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dmSerifDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dmSerifText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8fe3c6727cf74e86cfd545dfe7e6aa3a1dbdff9563e84e085acd65c07f633744", 56120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("13b9bbb9c2b065c645eb14efbe2bc8dd2a4e41e635d12f8bc15b532e1d5fc628", 50372)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DMSerifText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dmSerifTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dmSerifText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static damion(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2b178966c9329bdd54a10c83e076dc1647443dddd2471c9aa477780c6852294c", 51972)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Damion", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static damionTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.damion({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.damion({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.damion({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.damion({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.damion({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.damion({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.damion({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.damion({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.damion({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.damion({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.damion({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.damion({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.damion({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dancingScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("40f021e25f9f4e2b67f5072ac941218596581a1621931f44173cbf5245b91fd3", 90100), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4a2aa446dc86aad49ec46eb66fb313889bded9ef23f286664bba90a2eb156f87", 89456)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DancingScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dancingScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dancingScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dancingScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static darkerGrotesque(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f789e82ef267fb0b5f0798267ba5e3340b661840b52e1de87f7830b7d87a180e", 40352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("60303e0b600c0176b00422a680228f744d38795fbd8d35344f494b02400628c1", 42704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a6e1eb6614b97b3298d1d253f5ed4399556da5b06bb191596cebfc813bdd3505", 42568), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3e516ad3d1d4cec56249227f367cba1e2830faa7cedbcf49abca81e7c202b434", 42552), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b56136288e57809ada8707a74f6756261c3763b3a2686398738c1fd25f157d9c", 42600), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cf5f4f44b908aeed8723415a103b1ad9c5550388d2c8e139adab630a61a74712", 42632), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eae6b24bfd325c090ef4a304519707f58942487ea7e118bfe036175f8c4690aa", 42032)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DarkerGrotesque", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static darkerGrotesqueTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.darkerGrotesque({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static davidLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8319053cbaa4074884c0364b74327548dbe246119e76a214a864d9d55a12353d", 91296), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("288d258f0790230352ec2d9b0eef7f533d14554250a99cd0b5cfc80c349d2b38", 91348), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d02a7be354414e34512a70b5f00901c7c3c4e7df88c6bab47e8ed2e50c770c71", 92540)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DavidLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static davidLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.davidLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.davidLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dawningOfANewDay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c8fb2c187b599f0368577f599628c83a2543f4c757231bb2c0843e98624eeb4a", 65320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DawningofaNewDay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dawningOfANewDayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dawningOfANewDay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static daysOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d74812297ac57cf4ce637c47f01cbcab907136f76e2a4028e2ad1e80bd7b8ab0", 65556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DaysOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static daysOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.daysOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.daysOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.daysOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.daysOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.daysOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.daysOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.daysOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.daysOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.daysOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.daysOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.daysOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.daysOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.daysOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dekko(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("71d66d24dfda326e074654507fa7b6be6a766f318cf01f17b000fdc6f870fb4d", 214656)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dekko", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dekkoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dekko({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dekko({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dekko({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dekko({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dekko({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dekko({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dekko({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dekko({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dekko({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dekko({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dekko({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dekko({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dekko({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static delius(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("882839f3551cbef380971b00494ffc16ba5b2f9841166599a0248fa4f6855cae", 77440)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Delius", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static deliusTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.delius({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.delius({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.delius({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.delius({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.delius({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.delius({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.delius({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.delius({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.delius({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.delius({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.delius({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.delius({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.delius({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static deliusSwashCaps(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8a724c6c792da2cb102b6583bf9f9ed02312ab78bbeeb3c6a6efb9ddb096ae29", 63004)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DeliusSwashCaps", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static deliusSwashCapsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.deliusSwashCaps({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static deliusUnicase(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3bbebd3cb94431156468b1ce457ee032a1f68d964171655b60f5ae2ecf0243cb", 32856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f761b09efebd15e0a91eabc186d565aec75f56f2b04f9cb1ed1f72d91be340ef", 36072)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DeliusUnicase", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static deliusUnicaseTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.deliusUnicase({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dellaRespira(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("62fa46916df65faadfa21dd5608cda99cea245fc2f736046a2118b3a95fa93ff", 51140)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DellaRespira", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dellaRespiraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dellaRespira({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static denkOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("213821a54136d58fd7013e4aca0f3b0307e9ec564c83ce75d6a9e63bfb6b1714", 36128)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DenkOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static denkOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.denkOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.denkOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.denkOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.denkOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.denkOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.denkOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.denkOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.denkOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.denkOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.denkOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.denkOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.denkOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.denkOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static devonshire(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c62bc196f0a12683281e3842a99600f4f4755582173bca74502c02f9cf997854", 67192)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Devonshire", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static devonshireTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.devonshire({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.devonshire({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.devonshire({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.devonshire({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.devonshire({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.devonshire({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.devonshire({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.devonshire({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.devonshire({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.devonshire({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.devonshire({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.devonshire({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.devonshire({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dhurjati(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee0b382be9acedd63b3e624d49e646e5951cb5e8d54c0724ad01128bd8690012", 546952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dhurjati", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dhurjatiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dhurjati({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dhurjati({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static didactGothic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c28f009d8ad88ab0414e29aabe1ad9f19a95836e772d9cb369f27a1ee0b23fa0", 132548)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DidactGothic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static didactGothicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.didactGothic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.didactGothic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static diplomata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ff25ccc70ef0385bf72a71864293132375bd427ee6e3f974f22a732523948936", 43060)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Diplomata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static diplomataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.diplomata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.diplomata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.diplomata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.diplomata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.diplomata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.diplomata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.diplomata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.diplomata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.diplomata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.diplomata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.diplomata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.diplomata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.diplomata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static diplomataSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("35ea29b9848142b1f5c17b6b53c1ee204e69fe31d85cd0d67ab75f358b968c33", 42396)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DiplomataSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static diplomataScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.diplomataSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static doHyeon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f24aa5cecd71141bf907f712b4e1a8d1ae20bfc48e6f4c397af431431965c7c3", 408356)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DoHyeon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static doHyeonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.doHyeon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.doHyeon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dokdo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b88083d5e2a376a3766403b0ff323016dd93814b3d540b48859e517dbcc28d08", 1385696)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dokdo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dokdoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dokdo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dokdo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dokdo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dokdo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dokdo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dokdo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dokdo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dokdo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dokdo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dokdo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dokdo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dokdo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dokdo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static domine(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b5d61cb478ce2e3fd32416939a39f3b9aa118d0eb76c107195e0857c44ada1c", 89788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5865b0de838f6cabefc862631b06e8c7e86a0b8865e9ee530819d8590dd23e6f", 91860)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Domine", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static domineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.domine({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.domine({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.domine({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.domine({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.domine({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.domine({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.domine({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.domine({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.domine({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.domine({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.domine({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.domine({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.domine({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static donegalOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("75cadf3ba9559e8ba497b68a3e7695d2c733b4ce2264119f7f181974902025ba", 44828)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DonegalOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static donegalOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.donegalOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.donegalOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static doppioOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("72f56b16a716f87ccdb2d2fa52196eb1c365c8b142e58ef5bc106a01345cdc28", 36952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DoppioOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static doppioOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.doppioOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.doppioOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dorsa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0126c6beb66497797a2fe86e3ceecbd95fadcc67cd7ba35e2b604acdda520730", 20796)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dorsa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dorsaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dorsa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dorsa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dorsa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dorsa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dorsa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dorsa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dorsa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dorsa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dorsa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dorsa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dorsa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dorsa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dorsa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dosis(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3ae9ee353b3e8df71d17a46208649ec71c145848f8db69eb86b9cc1c129304b7", 82420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("be02e69501081e964d549ca957d036bbb12e816c1d224d1ce145ca31499bdfa0", 82544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("313cd3d73107761779313dba36f6ec6a100a5a4daf06f4b78f8f733538936cdf", 83240), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1bef4924c728f63829085fe2ca4995a6a41c495df45c5830d51bf649e273031", 82808), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b8741fdb78479290fcd114044c58c9263670dd32db70b744dd56764a8d0b734", 82668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4124ad4492dbb70075dd1bce8976da33cbad57f2fc10eeedc7da35592285605d", 82876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4a7b18554b3247dd3b1384afabd828043b9a9417221c7480c2bb78a99bc4190b", 84236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dosis", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dosisTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dosis({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dosis({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dosis({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dosis({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dosis({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dosis({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dosis({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dosis({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dosis({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dosis({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dosis({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dosis({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dosis({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static drSugiyama(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("222640befef81fb644265039a2b7df8ab86103b0d4427b5a88b9fb9ebbbcd273", 39880)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DrSugiyama", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static drSugiyamaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.drSugiyama({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static droidSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1efe4b6a8b73a7069e3a5ede472fb84130f7ffaaded682d112e93f0d0fa5a9f", 25204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("32b87a290fa91f892687dcef391f2b06945d1be8f3dc243b55ffb118388368de", 25328)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DroidSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static droidSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.droidSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.droidSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.droidSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.droidSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.droidSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.droidSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.droidSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.droidSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.droidSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.droidSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.droidSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.droidSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.droidSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static droidSansMono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9dedfe943434b0c1c69af3c64930ea43797584f7c25bfe1bafe167c5b9ed0909", 65556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DroidSansMono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static droidSansMonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.droidSansMono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static droidSerif(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dcdbbe04f7d65d6dd062e948aad5cedf59b28322fcd555a4dbff9564ba77f032", 28380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f2412575e58a24ba7f60d09803924763e7420e8a18ef8535551454a69b0e2765", 23792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("11fcb243238a8c4df11d23a99078e060b56b2f23e44efcdf3323fde6290297fb", 28408), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5072734295fa76a5684706f1c6fab998057ea2dbd03ed74b92b6b105d694e505", 29980)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DroidSerif", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static droidSerifTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.droidSerif({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.droidSerif({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static duruSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("97e1b1a772ca2113d6a27390b0c7b2ce1a3b72cebf29a876a253b200136fd5b1", 50832)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "DuruSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static duruSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.duruSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.duruSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.duruSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.duruSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.duruSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.duruSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.duruSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.duruSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.duruSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.duruSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.duruSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.duruSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.duruSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static dynalight(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3380e0bde50ff63e8151f548155d2d265154e826a3fcd8e17eda92dd29d14064", 52732)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Dynalight", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static dynalightTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.dynalight({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.dynalight({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.dynalight({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.dynalight({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.dynalight({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.dynalight({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.dynalight({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.dynalight({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.dynalight({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.dynalight({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.dynalight({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.dynalight({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.dynalight({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ebGaramond(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("45b9fd8b021be544bd8edb0bce9007faafdc3029fdb0f19e4deb80b50e9c4adb", 231176)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EBGaramond", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ebGaramondTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ebGaramond({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static eagleLake(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6a898ae440d1344e4a9d2174f6ee6479f00108b9baa6830fa6535a8cae6185fe", 77584)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EagleLake", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static eagleLakeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.eagleLake({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.eagleLake({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static eastSeaDokdo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("28e44e5875cc0c761d9fa6492d1a738977cb5a555b57aa3016e44e2a138df2f7", 3175644)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EastSeaDokdo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static eastSeaDokdoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.eastSeaDokdo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static eater(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c8bc103f8051b7be6a60a18aaf892d18014b8c4d925fdcea5d77a5830c3cbb47", 83904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Eater", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static eaterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.eater({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.eater({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.eater({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.eater({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.eater({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.eater({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.eater({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.eater({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.eater({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.eater({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.eater({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.eater({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.eater({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static economica(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("73b7c6770eb6ca35b71cc345a389203c788cc27aac43302793865dc33771dcd9", 26708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ce63d04fe7b161c08efa83fba9b4d096be6f6390a294e904e16f2d7eecc90820", 27644), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2886009c049eeeb1a75ea749115fbfece59efeb95fcaf29b5f8a82a8c680ab99", 27148), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d8f54eb9ef53335c26d3f638df8a0bcbdd291dff65990970ea5cd5a2529dfd91", 26976)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Economica", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static economicaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.economica({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.economica({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.economica({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.economica({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.economica({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.economica({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.economica({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.economica({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.economica({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.economica({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.economica({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.economica({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.economica({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static eczar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6e04a6ef288e1fca3e9420bfd9752bfdc230a20ce55a05855a8896bdb763a8e", 196536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d91586e1decf2874b409ef01f87cf50e9725e5f419ea08e5158a6c0a06595fbe", 196484), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba1eb42528b2001e261653b3e56b8566ae08e9a3a6709b57e20f58b84b82a76a", 196224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("254b1a9878dd1e9479e9aab40683ad5d17b35782b413a724f71d89952f460b39", 195864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d9144eab6daf83585fcb44f4726902a8cbca81d5df060ed6f09787fd5192239f", 192624)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Eczar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static eczarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.eczar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.eczar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.eczar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.eczar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.eczar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.eczar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.eczar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.eczar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.eczar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.eczar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.eczar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.eczar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.eczar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static elMessiri(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("05a194beec1a2e2d57ac0ee1d517ad0b59142391481adbd18fee77752639ddda", 81504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9da80f76bf936a3cccb71afc2d2a95fcb8eb5be79a494c0b44e5e75f61031a05", 82784), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dc6415daf94f76a9dbea542ec17e7df4f5b01a18796c44448bd0c817cd2d433e", 82764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a25eabeb2e7f6f2cbe92e832bf052cb0bd0930c95b6457ee6cb8469552b97c63", 81596)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ElMessiri", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static elMessiriTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.elMessiri({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.elMessiri({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static electrolize(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c68d85c8396ce2228f3bd601b3423d838c24c546404f25a38db6c05e64a4521b", 34676)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Electrolize", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static electrolizeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.electrolize({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.electrolize({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.electrolize({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.electrolize({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.electrolize({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.electrolize({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.electrolize({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.electrolize({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.electrolize({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.electrolize({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.electrolize({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.electrolize({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.electrolize({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static elsie(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bc0b83b9cbe3b25809361a2f4e495bdc9f10756f669072da3bc89689a42c8845", 40644), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9aca439d3b5c4abdf62ae59fb1a643c185345724ebdb002f388d25d7926f8f98", 41932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Elsie", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static elsieTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.elsie({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.elsie({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.elsie({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.elsie({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.elsie({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.elsie({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.elsie({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.elsie({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.elsie({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.elsie({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.elsie({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.elsie({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.elsie({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static elsieSwashCaps(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5073c3bee53b70fcf6b284c6882db47468b86bb95077b497007cfecf47b76bdb", 37692), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b3610e846ce9868a9ba2c54980426523ef730f265ae56366cb7fa77fd9cdce35", 38904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ElsieSwashCaps", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static elsieSwashCapsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.elsieSwashCaps({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static emblemaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ae7300f04f026825b14eaefb3738782763992c203df0821debfdf47a5bd349ed", 61832)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EmblemaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static emblemaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.emblemaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static emilysCandy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("333e01b7709d7ade3e2afa1ce5b5d193cbb59ce4909a4bd8a9061d7f12368e33", 236800)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EmilysCandy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static emilysCandyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.emilysCandy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static encodeSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c0f6eafec00e65a8d851e33e6e7e658e34b858ffc9f2ee39ec4bf972891fdf0", 123088), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3e78947fa53e3e3269b141c073de12ac5c7ad7767084452cf00d157c8c0a623b", 126316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d81973e76c4a72a0723f8d83671c01e6a763e4c108b05dcb921abfe786017850", 126120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("726603f17d4dde111b9e7c3a3ceab5b48d4d9fa010f95c39308a05f7744918c7", 126176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1e6070ed7f7df855034f826d501716460f36b8d45f7920099539a66c5ccc44b5", 125848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7ed81c5a76ba3b44f2c7b4faaee7440283325e7bbe8efbbd976893ed9798166c", 126108), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f2bf7fce49ca2e3dd0d2fc1203ba30dea4e97ef171f1d693e9e21e23437dd8b8", 126352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("474df7202478321bede629db8dd5a6720566e44763591e17dc881df6a0b50144", 126980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("276a8dae33896588063889970f61a2b2ace3957ebb2024662e9637dc144c0e1a", 125896)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EncodeSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static encodeSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.encodeSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.encodeSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static encodeSansCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c2d65f9836891e7be8e4f366b0daa5300822ec7e50add6db5597d2947739ea20", 123152), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("138b74330c8e0d86094f3164019df7594d74187b1d46294fc1be869488146eb5", 126308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c2fbe98bd01eed6d6e9965149ece772f8df140fa27924151375ad388148a46a3", 125988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("864d5dbdc88484d744c5f412429aee361f61759144cb2a09436e172e49cb0396", 125864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d681997db3c7754ba70e3d8b22cbe560677787b73469a962a069f9e257235795", 125816), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c085d57fde1c82f5051fcdd197852a958132024196a3989c6ab00f550576534", 125612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a9dde6d2d55aa492820fd930f6d9358fe60b27d9deb328384adca6f7efd4984d", 126044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e295aa9a8ecab00ca9e9012a789c72ec620a1e03dabae570058ecf0b61ad43f0", 126828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("65117e9c412bff42a1dd46d75a60d81bf0f70390e437c1d689525a2c422e4a71", 125332)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EncodeSansCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static encodeSansCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.encodeSansCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static encodeSansExpanded(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("380345d9f11a5d51121f04ec7692992b4393552df2a3a7d880f4fee2445141d0", 123684), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4a7de0181c2afd610c6c4f4cdd0c1b277e273ce075ebc1aeac436fad20e45419", 125872), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9b50fe9a059788e12206f492db451f122f3ae30e6b8aa5944b51f4fa9b128373", 125664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f2fa9b86d419104b4b7ab7aa2d8507d9998032c843e7127317c103b55c3900c3", 125524), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ec9211a546cbefbb5fdbdca840aa8782bdbfdef2bc24a03e769b5676d869dd1", 125672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("57adaf522bbff1044518d732d894dc3b9619455577129c3806e15c41ab7a0cf0", 125848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ff65de1f2f27bec57c2af88329ff74b61c90a349cda06d054d87125aa4d4588", 126108), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("93137f85c3ca94e2b0d5d2501170e4b955208bf20d99d3279a12420033315efe", 126540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bc58d2db7b8afc49e3bc54a2ffd46ce334497d9361768e992654a18428895228", 125144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EncodeSansExpanded", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static encodeSansExpandedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.encodeSansExpanded({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static encodeSansSemiCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("05e33431ccd816003d590171a6110b72fc3f122c224c46c4f5339f4919b57873", 123124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("06726656f1a2937a42770740e0772bbcd1187d2bdbe2f5bfd42bab081286b643", 126604), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6ea764a1fca4cd3308fdc9f6284e890fe9ef8409ab991115bb08a4d0be1b544a", 126332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ec67d15d3d449c0b0cf65c4fc57fbca88395b306ff4f30d409b4c8eb4d06abbf", 126216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("972df21a043f38bbac81d476692cdd0ccea7537ceac026fe837daf17c4836aa4", 126012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("654f95bfaeb0563e8a7622832f25016d47e3f8e60e4dd59c2ef9cf3835f5e1b1", 126148), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("99c6ae51b272d20f915f0c4b8454b27ac9400423ba0a207b770a7dc3201f9d5c", 126476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7d33b1fd6f457c91d58d3287767a4f0089fa3fd5ee2c18539c597f8a895b3646", 127116), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7075bb5ddbdaca47f1356022fa375630ca868fc11d6ac6e53026c8bac0888b1", 126184)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EncodeSansSemiCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static encodeSansSemiCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.encodeSansSemiCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static encodeSansSemiExpanded(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dac238a8febf393531eee30878adc66774dcd33b426136f91db2c3094cdbbc87", 123324), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a57cc45a15668d01ed3de253cf2cdf14b05212ccf8f5ed876ecdf23610598f7d", 126728), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ce3f3d0f672e4bdcd7688f38c1ba9cb57ed89bab6f5028da4bb87ed3407edd2", 126540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7e3397e73831600b41c8b2381dae7b2f9fbaf91ad2dd7eda631a23dcfa4b9d95", 126584), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3fe7f827d5bc65690cf565f4e5a7662f8ae67d2871679b9cd6e8551a94ad4faa", 126272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1ab6bbce3162ec2c3cdd343f0ff38a4d8988517afb002ad887736c6a2df3a9d1", 126556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("35e2e50ea2e448f64fd31c6479eedc42e754710a0efb4e16fb6bc55724dc3b0c", 126828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aff573a59e5988f277836dfe45250f8fb62d9289084f3798c5b8d3adef115da9", 127356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f945eac695f316de1c89017007aef0369d2d9c13e4564a642da83224ea32e464", 126324)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EncodeSansSemiExpanded", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static encodeSansSemiExpandedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.encodeSansSemiExpanded({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static engagement(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("14dc139d3b6796ff833b0eb8daf08b16fcc822ca78db05a4bb8c6e65c16507ce", 75992)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Engagement", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static engagementTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.engagement({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.engagement({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.engagement({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.engagement({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.engagement({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.engagement({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.engagement({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.engagement({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.engagement({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.engagement({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.engagement({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.engagement({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.engagement({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static englebert(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5ceab7490f339b83c9f46a3baf7274203de3e060802b185fbd65c2aa9f5ec76c", 52632)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Englebert", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static englebertTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.englebert({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.englebert({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.englebert({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.englebert({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.englebert({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.englebert({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.englebert({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.englebert({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.englebert({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.englebert({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.englebert({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.englebert({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.englebert({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static enriqueta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8efdf359579cbd9731b621eb32ddd55b3311bb4f3efe2479e1b87a731deb2b3f", 53432), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("75092b77ab687551bb7a93707771fa18a40ebfe0621befe7dbaca438b8a8c954", 45192)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Enriqueta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static enriquetaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.enriqueta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.enriqueta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ericaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("718a969fb44854ce221ced461f15a49e4e53dea2478eb4fb6bac911b5dc5a99b", 25996)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EricaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ericaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ericaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ericaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static esteban(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f0226acf9a0738f8dba187bbb11a569ea1e5329575144243525a23e543276b37", 46456)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Esteban", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static estebanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.esteban({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.esteban({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.esteban({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.esteban({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.esteban({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.esteban({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.esteban({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.esteban({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.esteban({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.esteban({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.esteban({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.esteban({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.esteban({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static euphoriaScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("49720d65299334ddc97b89311f78ec792b2862791a226a49f7bb5f8e19d709a5", 38376)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "EuphoriaScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static euphoriaScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.euphoriaScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ewert(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e2a4aed1fe4d33019eb7c6a9273a251e7f28ac19b2820f61ef61329d32cb89a8", 70704)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Ewert", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ewertTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ewert({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ewert({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ewert({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ewert({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ewert({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ewert({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ewert({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ewert({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ewert({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ewert({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ewert({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ewert({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ewert({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static exo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2eda7d4b0bab32b1724ead985ca4ab23ba46b1647e60b50df836f3e142105e85", 109668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5315edfaf9326a2112d609345e056a733da22ecf1c3aed8f0a78d51539300ec7", 115720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b9271134900d316a8aa07b17a3850ad179e6c77b533419aad39926ab5fbbba5e", 109812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("58251d3b9daf7e91b2c9371c9800e0dbcd1374a54b0eee6b026a237c4d9fe63c", 116352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf846eb403540e7bfaae3e3975ff0577b88730403c02d4b2e57bb241e7294e1f", 109416), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("278cc62e59aeca97f6e14f44ded0943df0201e7aa692faff1b40a9e6d7b22dc0", 115868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ab24d45bd0887f54e98614ec395c5addfe82b0e8389b4721f5465954e1e2f060", 109144), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b79a6db3b900824a3c9cbd804a328bc0bd070b648e0615e9a45f5a5c0eb8dd63", 115404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cb038971b993fa7fa126ed43d4dc54e20af90eeb8213b0c2a9c735a2c82c0d4e", 108848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("224493dbc8c8852c0a452618d375990f1383d43ba5f9f4726b4d87ec6c6f50c0", 115204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("754632bf7096e73d05f2e15e3f52a82b34201bad1aa105d6e650de745d120eda", 108772), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("397a2c49640d1470bf9df914dfbbfa914148dd86642d25e248193a1f649b27dc", 114872), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3b0e87021af2542173d6c39db5a95d9e18ba59c0c9aa7ad37b6df04523947309", 108476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("75d249c747ae8332516fd6d2c3996d3f2c440f659339765dc8e13a97f942ad64", 114360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5e5a390588a0eb152906de109ebd9c65d662628da5f1afbb3d17bd4a237c873d", 108380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0c6ffd7e0358672dd7d40462c46a11562e062f1cab60d82d80b8a71737cb3141", 114288), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9d12eeaf10d56d2e39321c9d10253d25ccce5e188ab6684ec5eac5d7d9ac99be", 108500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5a6cc3dfdcfe4e6990da4fa3f55a861ed2ae701a0ae1a30d30b23daafa215604", 113996)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Exo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static exoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.exo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.exo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.exo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.exo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.exo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.exo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.exo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.exo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.exo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.exo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.exo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.exo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.exo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static exo2(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f19c0e2523de9afe6da463f303aefcf3e38b416875d48ef6c98328379e1a61ce", 73868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d39266e34642d4861ef777d4d3ae4150ae0b18b16d94713a78bb60cf03bf85b4", 79980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dbf766d9b363fe87cee0afda4c59bc8a59f1c8d0a0d245063c720108d85dd9d6", 75360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fb55978ca6abd55f49aab78def94b5c8b96bed1439a6dc4dae6dd1d0596ced50", 81004), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("64d41ba51bf8991e5322fbc8d80e400281604f70cd061562aad4bdf6aedd582e", 75152), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("110c181389ab4ffd19a1212a2c7b53e86dd2deefa76fbd3208663e85b34cd46e", 80724), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a0dfef91dddc6d2e9820c4faf4c31bfa1533f090efe935e91150ee1b4cc59f4f", 75456), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d7c5bd167ace5154cd5e8806a913d620cb479062db24c06433f7f38b3e6811cf", 80784), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f9b5326ebe6f800499e333e88b5d52d47d995cb1eb20ce541991deb5ae2792a4", 75568), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6abd6d5f1ca760d693fe03958a2e85de8ffeeabb5e2794bc2725ce8775807924", 81168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8999193c1336c6f666fba9f56ec1d12485be48c9f31a2e97e00056b311d2b79a", 77592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("73cdbc23b75cf90b91216670334c663046fe0b9d08f39991d5b9d26942b358a0", 81332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2fa1bb398f33123661ab6d19927457c499ee32ba16819269d005ec1a4343aaf5", 77316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("656cda11a815f2f5c7ef493608481f3ea6da47880dbcc3b6be65059319597393", 80652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("88f76cbd5e824b5c45fb8278750d69a37690ede91efd8901a27dc5f20c69de70", 77484), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fa96b010fc061593439675e03f0f7b4f36bcf4ef79b2f68d5820122313c84ac9", 80764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("78b737edc063f02e62ffc88e8b71820aa12f17972b3dc70d9cc6aa20cbf8bb81", 76568), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9c49337689c4c8e998cdfc92575356ddef9b8d31b07c19c2e7d466c806b5de15", 79492)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Exo2", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static exo2TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.exo2({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.exo2({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.exo2({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.exo2({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.exo2({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.exo2({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.exo2({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.exo2({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.exo2({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.exo2({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.exo2({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.exo2({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.exo2({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static expletusSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8e8194fbcb2069328e5c506a10ab38e405a359ec0ab5c0d2379659cdff0830db", 26352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("072928d584fe0a92e93d576c43798a1dc6d1bf065c7db59d28112cb4733cad2a", 27304), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b5cd6f4acc507801fef499ca08c7da56ff9e5df77a4ba14eac1718e7ccfe49e5", 26656), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b16455d3607896d0b779898db128a332df5ed111317da3f1341a85a07317b209", 50592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("732974a8456ad103e02e3ad28c0844e71113017aae30a88969af3ec454dc2043", 26636), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("935e18b8d6f075d9b37b0017bde129fd0e68ee0800f60eac4c68f6534c528aa3", 27828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f5f64f05469211d27b24f1b1f39e57ec0ca9e4211a24b28c336f629254bd482", 26620), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("77c1827497333ee775fc45b32a1c0c2da85ac489afa78e6ee3808130e850e355", 29012)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ExpletusSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static expletusSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.expletusSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.expletusSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fahkwang(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("07a682d6bc044cbd486744e34dcb061077bac07d9501f34c8f50b67aa2c02b7f", 79476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c9cba18dabd9762bcd5cd460bbc145d71a364a65255b3ff8514cb385997506c8", 82060), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a4f936e2bce0a9dc318b8e50537d34ffd7475cd6199842a810f7b9ef9072cdae", 79520), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a1ef09b096105c18faf5fadb52cbeb7979873ad7e9d50910b116ce244b4fe166", 82128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e288aad85ecd44f0568c3d218d1478f896a2e9656dea8978a0462f0432102f7", 79356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d39b9b3782631bd9e5ca85b327f2e86ade2f88ca6d30a9f85112209c08f703e5", 82044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f7b5bd7dd6726ca8619156e571f3ab9429a229e110e87eb4807508a6e603b055", 79100), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("99dff1eec80cee80e76e31de570b32a627c8b114c5f4a6edda2349c62ef7eb9e", 82064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b415ad58dda4167eef2957ac799ec99e305a626797d3f015c814096dcab8244f", 79136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a3cb35f606a6f504a703c26834f242e79e57064c9cc15b016acd7ead15c1c379", 82048), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9d4c87b61ab6b7a8c8fd345b20f1bdea3f0eaf90b1f3d014ba9a1aed4df71bc5", 78988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("02444f0d64cab232aa85ca6646af07c761791397753194217bec25ee19e4107e", 81940)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fahkwang", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fahkwangTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fahkwang({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fahkwang({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fanwoodText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("37c7865d9942ebc3e421992f87faa2a1c1f686716fd40054035736abd0938f1d", 119168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ebb9e6f0a9aad6a9a9a13de40ed43e94061e0aefeb1fc8ab3399b0a3307dfee8", 96316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FanwoodText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fanwoodTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fanwoodText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static farro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ca8a2c854888fbeb59e572d229d903a5793ba08741fb5effc6484dad0baca84b", 38668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("04c2276c71a6e273507190f49761498509d6b0b4dda77befd400b8b093ca1ad8", 38536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("43a287bb29da4b09c5492c818eeb5cab21180fcead8c66a9340ba185728d5ab5", 38584), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f000197888095e4fccd58e6e7af75f410a611fe4292e359d52d9110505fb0373", 38012)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Farro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static farroTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.farro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.farro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.farro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.farro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.farro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.farro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.farro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.farro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.farro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.farro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.farro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.farro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.farro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static farsan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("06d96e20a2d15a86aca97dc3632eec9628587c3c335c563af7181458c2e91c54", 243680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Farsan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static farsanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.farsan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.farsan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.farsan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.farsan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.farsan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.farsan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.farsan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.farsan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.farsan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.farsan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.farsan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.farsan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.farsan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fascinate(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f23d154a851bb211f83de2d4f7dd5242620662579daa75f0a4ac8e4c692a1832", 51484)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fascinate", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fascinateTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fascinate({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fascinate({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fascinate({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fascinate({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fascinate({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fascinate({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fascinate({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fascinate({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fascinate({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fascinate({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fascinate({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fascinate({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fascinate({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fascinateInline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c052c5d8595ae4b44c8e2c92cd12be41381064837072f05fc6a3f4807f1d80e7", 59188)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FascinateInline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fascinateInlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fascinateInline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fasterOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fbde65e70c94e07f0152fa5b1506d0a77cf338a94d29423fec1aa0730891cd04", 44372)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FasterOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fasterOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fasterOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fasterOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static faunaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("afbf7594d1feb78a9b5e6262887492adcf721a6e1d033b1c6d26aeba06bcc132", 30196)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FaunaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static faunaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.faunaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.faunaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static faustina(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b83e2bcd1f015e1e288c5870cf0301c94cff5d1d346b1c0b7d0e497ec7165a06", 83308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a7f8c492e8ce7588c67e918c52ae5a4c9517a62c3057c9aaa9f2a2f8bcc1278d", 84980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ced47c330edb05d2c4dc0cfe0e0b69f9b23cfce448a95ab12a7179b3f3e7d8e9", 88172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("02caa39209526de5d9a8cd33d2d06056bd7dd2c4f91748ddd6a5af7fb9abfa87", 90276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("617c505971ec93fa27bd52270f4a605f1f9e8c04efa06181c1f9e6a684cb907a", 88292), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5f2f74ee4758fad98604d34c6a8e8df131c924bfd4654546327cc02df81af527", 90052), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e680d2565c4001336be567bd147c16b8d88d21b36f499cd98e689a429568ebcd", 84148), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("32a38ed85ba3470cf4ff6929aae4fdb13233d68ba71b97ce606bc2ce782b0961", 86792)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Faustina", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static faustinaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.faustina({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.faustina({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.faustina({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.faustina({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.faustina({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.faustina({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.faustina({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.faustina({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.faustina({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.faustina({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.faustina({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.faustina({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.faustina({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static federant(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("64e759e186856942cf96caca16925f320d145c552c214f61546d51aad8e02bbe", 32556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Federant", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static federantTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.federant({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.federant({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.federant({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.federant({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.federant({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.federant({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.federant({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.federant({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.federant({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.federant({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.federant({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.federant({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.federant({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static federo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cefb7b8c896226fdb5493d3bd75dbb0baae167b10f60d892578bc75dc1acc5b5", 116756)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Federo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static federoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.federo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.federo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.federo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.federo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.federo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.federo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.federo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.federo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.federo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.federo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.federo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.federo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.federo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static felipa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1636ce9582e69c11f567c7e8cbea02601d37fb40da1e6affdd5b71a01c7cd36b", 39952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Felipa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static felipaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.felipa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.felipa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.felipa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.felipa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.felipa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.felipa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.felipa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.felipa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.felipa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.felipa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.felipa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.felipa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.felipa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fenix(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8601d9f9c9a93dcbc9a75b2e7e9e1f567e66ca628768e1567225078fee043e8f", 45096)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fenix", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fenixTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fenix({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fenix({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fenix({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fenix({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fenix({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fenix({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fenix({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fenix({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fenix({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fenix({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fenix({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fenix({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fenix({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fingerPaint(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6ab3ff7f8e0eaf096c590997201b069ff984623d2eae2b71d8712f4a94a504a9", 101364)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FingerPaint", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fingerPaintTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fingerPaint({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static firaCode(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("53d9824e306c207a6de228abf02372c59c9b2166fc2a5b38d40d9f8b2cca4f53", 140772), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("952b0d5a1d329fa4c8229aa97143ed9ff3f239f1b4bd84e4c14b6f4f1ccdd705", 140656), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eeca9b497781ac45524ddd9ca6fdfa383130e3d2a613045bc288fbeaf3796ce6", 140608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9272ceedc952a0945683c249045952038f3cd3c1cf0bd0bfda3a07417e44fd48", 140904), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e534947b075377251fa622cf2ae6881dd4073346a5fefda144b1406f45b9ade9", 141148)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FiraCode", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static firaCodeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.firaCode({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.firaCode({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.firaCode({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.firaCode({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.firaCode({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.firaCode({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.firaCode({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.firaCode({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.firaCode({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.firaCode({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.firaCode({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.firaCode({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.firaCode({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static firaMono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f17d60778f78f5928584a4f314a221b328dbce03da62fcc09caeebac82f76809", 131780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("003aa1dc6866482549cf715d4075e470701e918eadd47a035568d8d254f63e02", 131368), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4dab36f8faa3f89e09e177a6ef40eaacd307b98b2a38a14426be96ce9ed67a3b", 131392)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FiraMono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static firaMonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.firaMono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.firaMono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.firaMono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.firaMono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.firaMono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.firaMono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.firaMono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.firaMono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.firaMono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.firaMono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.firaMono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.firaMono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.firaMono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static firaSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c710b8842ec687cf4d723fa7cf54656e4600a5fc0b35581c6c5db5811eb3648", 363328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c12ca8dc162546809677cd3a931692841e7d605b092be571767436772cbca571", 377284), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0fdce9dc421c231fd5eb33b58fa54bfc22e73eb766fbf24c099102a3c9745a04", 367616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6fc161a574855f456dd5f6aca03b07bd5fbbda95409eaaeea8d32b83efdd82d4", 381668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0cf10b5f7c89c8b6cc74e27189f128a0632fcc969d1d71639d7df41a988241ea", 366972), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ed16991f9880c1cdf370062abe98f041f9c4227d7b7533bf2f7915cd203d33a6", 380468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25d5c70026b4ecf845ee6e70a5db8152c460c77457ee2c198f857b9dc194d2f3", 366252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("68cee55e27446a07ee1a11f047f9ce975c099a77beb93636576f205f1f79e949", 379696), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("92c4968351b66aa1751300d33479286d7efbba08a54f8e4ff3bf2f46a9cf39be", 366356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("61820fb5cb8cddf45429ac27bd1b3ddc92f5fa8df2558b86f251a7d3b02eb896", 379848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("63399ee49cc66340dce320237ad9177a3c4425f1e2e067f36fc16613bff0566e", 366296), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5bb43f8686cc19df2202a071cae38722fe0cc2a3a3fe6e23a2cf6a96f7744782", 380132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("87babfdf164afa1f458032e5d4166b48f6e1fe8599501da30592a5f2fb2dd18a", 366376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3b86fe4a8430dc147fd75bedeb04f37cb3fc160fcb9b905263e11f945cf8de60", 379804), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c11b26719603ed8ca563718737b415405dd2010a56408dc403bf6292e3c11561", 366128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9c5bac7e128fa9013ef3cdc329d8f441aea8fdca1051acdb22814bfcf14f8aff", 379332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3a957f6ef941a2c07855a9f053c3f0c03091299a68530247f3bb1c3c6ab574c4", 365756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d2813a992761a32da93a8230e2d86dbc1f4c430516ebc63b870d6865995d8233", 379500)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FiraSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static firaSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.firaSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.firaSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.firaSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.firaSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.firaSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.firaSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.firaSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.firaSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.firaSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.firaSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.firaSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.firaSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.firaSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static firaSansCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf9b3d9811dd234f65f59b0d76d65a3e1e0c670aebac4deba38952c2a936f715", 362440), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("90a6e0b1a1c39abb49b18aa5dbe06d7495f40394b01fab73b9e1e2bfec8a63f1", 376612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a88fd0b03c58284d60144855004f6888c1b91eb5a7d21ac6060d56968934163e", 366560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("07ba37d808679122d7388590ccc622b6f8f48bfad8116ba243f202818d5cd687", 380672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("028eb7598bbb6f3a2bf5ea109d7df59dc6518811cde6bc25a6f865eca25b8cee", 366388), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c87c9cbd8b98469f1021dcdc5e28dc336195b600990e646a06cd9e832b747236", 380244), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("169ee94c3194b600460cd09916275e7fb039fb87644ad57a8892658bba9306c3", 365908), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a80c7a96e3707ecec8c736d84d84610e8872d361a22b5dbe0ebc3edd438d0d73", 378688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("703cb9e1a6d80a19812381b5edceb1970b68ee76546ba8ae6ffed4c952fc475c", 366208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9ad537677b67359092459fe782eab5dbddc81f5a162d5e5089e46dab0d6d3dd5", 379868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c134a6d726ac821a9d923951743e3265e9f99a3853356396d759d0fb71cda42a", 365892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("59ba972744bb1ef52a903a84b4b035e2086ee740963c12a11f352474b9aa841e", 379376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29ce6255f4e521be2749f9557160ebbff60c5d160cd3a920e7bfc471c723dc3f", 366196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("02a6c070347c5261fef75b88834e9b34ca51774d98830932ac9082d60713a416", 379104), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a3fb82c69c6f36043219173b6f3137c43ead2f79f748d4a4a92ab045215eee54", 366556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("22f5b83e1b510958faf311954f84c3a505ac7ca89aa279ee4e6a9274ec38e37f", 379268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cbc26fda4428ab404d1e295ba3295da5cacf05e0851f8e4db99a4f65e1a0b382", 366044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d732a2087e508d3999de6ed5f8c8834fe6eed4e270dabbce0bdc668087bace49", 379108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FiraSansCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static firaSansCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.firaSansCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static firaSansExtraCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aa0b73aa84c42a6d80d67e8301430b1553b52c7bd68fb79ebe8a2ff750ff58d7", 361612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9f3e0c06798b24d5853a7192055d69133a9cbd73a9af9f24f62a00b0040d5776", 376268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bbe50e8aab5ce91f02434c94791440b79cfbc9ee514967d9db84519325fb09bc", 365232), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1c79fb24ec14754ab4fcb134db375dcab006d976fab22d0b109e35fdfcd23366", 380328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("40d22d65e7e493b473980345c73d89b480fede26e26e656d2f209dca5e38c1ff", 364864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("facbc467dbce58d849a1d881e13552a97aac95f1729e1fc2616bcbb139bc454e", 379592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86b9aeff0987b7a36348174495862b0223a80ca3b251901d0ee4e171911f3313", 364844), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a9b18a404b2171c7bd6f0b62b4a449ac30caaf7479ea04cf72848bf1e102975a", 378808), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7fcaa10bd6c77effd3a995f07ef8dcc91c68362f20f82be9f906ba8cd66e3a36", 365952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cf42464fc9f3e1569e0e1538e46fcc39fd02dba1db928aa594205dd74b6e7c72", 379444), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0763b0bd415a608f8406877206fbac60d4785217a0983cf5569a0a2ed2922a87", 365700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0f8d32c8579b66b9a1c5be889f3a3b21d4bd26f53af102bd2b4669b8407da059", 379196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f844b8d0ff4049bc54bf6eeb2fadd15e2e910f98d0a77a3ca693111015e8a365", 365784), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("07bfb33f5214d059269b95893bcb1220d50d72c1912c6b53f105a147900b7806", 379176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7a9cf07642c68b3200835e3a7e3688ed58ed76a3180a2e5cf9b94ce09e158671", 365784), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("16f3dcda792af199394d486b422a6a669c52ee944c7bacd532337e88d9840501", 379648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("99e363528f9256b35bd83f2a25a2e5f6739df4eeb724246bc87c5ab657192270", 366184), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("53c97db75ae729e99796dc36bad33e04ea9d0036b759f49f202c3b403c3df3eb", 380528)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FiraSansExtraCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static firaSansExtraCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.firaSansExtraCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fjallaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9bcbda294de33762d864eb998b9a19f1590afc95fe83a252472514751bd3ec21", 26548)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FjallaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fjallaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fjallaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fjordOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1d617688444b306b1af1ecd21190c110fcd2299e6164c66b9828f25bfaeeefa2", 54132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FjordOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fjordOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fjordOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fjordOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static flamenco(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5e1405fc92b58d9d35feb160e51edfaa54ace38f1e035d9fe2bfbf79a4087fe2", 34360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f5146448316dfb5f65a04e6a343c26f45f45587351d34559af1459a54eaa864c", 36340)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Flamenco", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static flamencoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.flamenco({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.flamenco({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.flamenco({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.flamenco({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.flamenco({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.flamenco({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.flamenco({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.flamenco({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.flamenco({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.flamenco({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.flamenco({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.flamenco({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.flamenco({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static flavors(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f56d6a319c30faa62651b4a9fde87c7e4a496c678e7fb6642dccfa9c815d29dd", 186224)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Flavors", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static flavorsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.flavors({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.flavors({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.flavors({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.flavors({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.flavors({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.flavors({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.flavors({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.flavors({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.flavors({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.flavors({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.flavors({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.flavors({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.flavors({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fondamento(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("75f9d66c336050a69b4366a5bd1cd8d8a0a5b7338dddd16b9af1f679ed3f6543", 86560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("78976bc375126e59b80ff99b8d26195e4332d5cc86505149fc21d183b60e8340", 78140)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fondamento", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fondamentoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fondamento({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fondamento({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fondamento({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fondamento({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fondamento({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fondamento({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fondamento({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fondamento({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fondamento({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fondamento({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fondamento({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fondamento({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fondamento({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fontdinerSwanky(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf7bb77a0222af06961048f7335a7c3ced76ac59796882a14738b145a87f9b7a", 45108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FontdinerSwanky", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fontdinerSwankyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fontdinerSwanky({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static forum(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3dd2cb0744af0bc963b13a121b6194f8d271243f3973b40041c90b6113d168b2", 204156)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Forum", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static forumTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.forum({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.forum({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.forum({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.forum({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.forum({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.forum({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.forum({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.forum({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.forum({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.forum({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.forum({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.forum({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.forum({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static francoisOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9732016aa4f374d99be54bb4dff92ffaa1133a4d293595c2bd7f621e01b38e85", 57756)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FrancoisOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static francoisOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.francoisOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.francoisOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static frankRuhlLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a5522476a201c815bdc0a30e19c5eb768edd4ddbe563647bf958a6326d7de351", 62032), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9a33b30005cd2b612a70785a7205c43bf5f1a43c839b44d7ab7ddb581503e7ea", 63180), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("009ea0ba06f79de2ac7a440b5f01b2aa767bbe10be39cfb151cef128d8c5c378", 62764), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf711279089d27a7d3707704287cee15972baf963565dccb30e23486a65697cf", 63068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1be4c921fb7b84259c4252c3caadda7f65b0ed5ad332ce0b680224f76e280363", 63056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FrankRuhlLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static frankRuhlLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.frankRuhlLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static freckleFace(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9c910c4a9c496679a818b2d0399b140f598d9f2f8b80bd1ad82b11b1aee3e93d", 120676)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FreckleFace", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static freckleFaceTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.freckleFace({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.freckleFace({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static frederickaTheGreat(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("532a820c85a4591fdb49ad776bcc3950cb9e66fec68cb9263fc47c65406e575d", 486172)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FrederickatheGreat", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static frederickaTheGreatTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.frederickaTheGreat({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fredokaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b002f69e5dfa418bb4943743c033c0ace0b62544c935797166842e3571c6e8c9", 43452)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FredokaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fredokaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fredokaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fresca(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a2fb3bbb67399806b72a60bce8a66e5e8c7260a33a6ac9368b6130534242f340", 32596)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fresca", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static frescaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fresca({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fresca({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fresca({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fresca({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fresca({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fresca({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fresca({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fresca({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fresca({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fresca({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fresca({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fresca({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fresca({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static frijole(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("82733a19e8b30ed4cd1325f58bf2631042b40495acd959d7dd5e38a7437ca7b1", 227444)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Frijole", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static frijoleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.frijole({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.frijole({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.frijole({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.frijole({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.frijole({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.frijole({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.frijole({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.frijole({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.frijole({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.frijole({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.frijole({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.frijole({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.frijole({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fruktur(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("78b40ffd5e4efdcbad2cda23700072933938f41123f3149b98ceef2c1abdea2e", 53120)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Fruktur", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static frukturTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fruktur({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fruktur({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fruktur({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fruktur({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fruktur({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fruktur({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fruktur({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fruktur({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fruktur({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fruktur({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fruktur({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fruktur({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fruktur({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static fugazOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bfd2016b130a197bdc3a7842cf6711aea8a2bc92fc2b0962ff9c9c266e680a07", 27820)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "FugazOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static fugazOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.fugazOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.fugazOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gfsDidot(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f1953ca586ed73b65dd476de045e1f32b7446b71165bff9533f465ac46c73741", 191144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GFSDidot", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gfsDidotTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gfsDidot({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gfsNeohellenic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bd8b39a679957cee00c5e50a23c2e6d3d6ba8d207873672a245c1de120f75028", 189340), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("44d41c717d709e6a615d33a24a85f8bd9bb4eff83466d4fafb85844a41ac142b", 164156), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("07ff63886ca5101d1a9bc31d7fb3f8dba0dfe2b725183cfb5349444e2ad8d4ad", 148172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3317aac2c90d40a458f2817b4d514af6fa109becec2a0735a3415f2fda7a4603", 161008)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GFSNeohellenic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gfsNeohellenicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gfsNeohellenic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gabriela(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2de2bbd02e6ea795828c6e6d6f6caf4fa1606b6a34d85e13e2700bba2b35e174", 60904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gabriela", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gabrielaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gabriela({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gabriela({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gabriela({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gabriela({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gabriela({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gabriela({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gabriela({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gabriela({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gabriela({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gabriela({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gabriela({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gabriela({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gabriela({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gaegu(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4b15c05b09479751067fd7c35435678b929504ea6e4a7e996ab5d09a77df6a9c", 1665520), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aee336135ec347654a2f36421c05f5d68a6017eec18e264e58e7aeda0f702951", 1687664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("047c721d06b371ebfb6f94beb758b1de181d8afc8c8e6eca6829405bd8a1cb91", 1588560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gaegu", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gaeguTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gaegu({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gaegu({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gaegu({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gaegu({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gaegu({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gaegu({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gaegu({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gaegu({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gaegu({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gaegu({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gaegu({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gaegu({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gaegu({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gafata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d93ec736426526ff4d866b0522a300711a10168b8198ae7985029233601b84ac", 37384)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gafata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gafataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gafata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gafata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gafata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gafata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gafata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gafata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gafata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gafata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gafata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gafata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gafata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gafata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gafata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static galada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("51eded8448fda4469fa2bddc7f049589ba69c75270cdf61adabbe4453abc8728", 155660)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Galada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static galadaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.galada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.galada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.galada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.galada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.galada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.galada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.galada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.galada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.galada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.galada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.galada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.galada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.galada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static galdeano(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("854bd50aee5dea55f44b1b53ec61e1810043d0a16cdc4adaf2cd764a30bb3424", 24820)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Galdeano", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static galdeanoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.galdeano({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.galdeano({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.galdeano({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.galdeano({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.galdeano({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.galdeano({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.galdeano({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.galdeano({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.galdeano({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.galdeano({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.galdeano({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.galdeano({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.galdeano({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static galindo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c0d36dd1f81706dfcb698113c2682bb84feeffd515b1fa33d5c947ecc09e9719", 57688)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Galindo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static galindoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.galindo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.galindo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.galindo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.galindo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.galindo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.galindo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.galindo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.galindo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.galindo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.galindo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.galindo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.galindo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.galindo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gamjaFlower(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e1315b2ce49da4d60b566f31827736a5b33670f46d95c26c4df7a7608f8634ea", 6240108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GamjaFlower", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gamjaFlowerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gamjaFlower({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gayathri(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6d8dba16325ef843155b024f792235ef54403fc4ce39f71ffe50c6a7cca110da", 149780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d5538d385b6f28efddc8cc7d5e5cf0dcbe3243febfcb81ba4112a03ab5901d1e", 148700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dac84e865cf4bf1f5f2bd54100f9b5ded81e0b2e3904ba8a3a6a992df1c13627", 149624)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gayathri", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gayathriTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gayathri({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gayathri({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gayathri({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gayathri({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gayathri({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gayathri({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gayathri({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gayathri({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gayathri({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gayathri({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gayathri({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gayathri({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gayathri({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gelasio(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2c178f975cfe7fd1383143d870be6652cd515bc4ce08487980cc8a24cb7d6658", 81660), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("89d39a153c70693460a8dfc8abc227627e98f02a750210cdf30eafeaa3c07eff", 83204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("065abbe7b6a9053e634e391d0b4b626891e33a25a559b218467c09f92b7cbae7", 82068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1f797bb1ec2839e88936d4386b44e04912d4d0dd8d71e154e831a3219ef0ccd2", 83592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b65a3501691d4bc3cf001ba7b5ce1b366cf394b48c365a5cdd65d100d824c21b", 82096), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("60cd6e57a0fbd73db6d7c92723083486d34b20aaca29bd13abfcdd63d30a6965", 83636), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f820053044147cdbb3843e05a662ec45de690ea2b00e3fa9d7b8ef154b1caa0c", 82276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("14cfaa5707e104d5c01401d62d8b27006faa96f78acc2952512962cd9a5059b1", 83448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gelasio", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gelasioTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gelasio({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gelasio({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gelasio({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gelasio({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gelasio({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gelasio({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gelasio({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gelasio({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gelasio({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gelasio({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gelasio({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gelasio({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gelasio({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gentiumBasic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86bcf47467c7c966ff4e8c216451273329982a4bbf3477b33615c1e5ff916fb2", 204224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d84eb1ad32e37c3f5e4a8eeaf077b66ec63a516eb0a631a71b3b17b0d6c43de1", 211200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("33b22faef221568e2734ae86ee972b4499a967b00f6d6ae128b1649a904044d7", 207812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b1ea05dbd54b903a6206abbb48c0183924236546ddb457db2f97273aa1d47fcd", 213608)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GentiumBasic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gentiumBasicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gentiumBasic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gentiumBookBasic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0323cf4ee5a40f059eff7a114c130fd29fb414699c37336d6d305d42e3d30318", 206468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("105db1c75307402ef0aaf8126c049e1910ec90f6a89c2745ac1fff1eb7525d03", 212700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("743cd21e49c299921cf5cdf719c179e0adc85a19aa73a142726805c1cb607f82", 207756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("73ca1eff2db69f993bfff34753f6f216404bceaeb657dbf84734a8bce6f279a5", 214236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GentiumBookBasic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gentiumBookBasicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gentiumBookBasic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static geo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1eea344681e2eab82088131eca8f88554cd2107b68a5bc70ac8e0eeb7877920e", 27012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6aff203bbf11c87ca0cbd331d3181277be2cc5f373a85fc6a0c898ed393d151b", 27932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Geo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static geoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.geo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.geo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.geo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.geo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.geo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.geo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.geo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.geo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.geo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.geo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.geo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.geo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.geo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static geostar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b9967368c76fa8693221781a74e18323bde42a1df8fff30b1d5b2dd2e654dc5", 41264)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Geostar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static geostarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.geostar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.geostar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.geostar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.geostar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.geostar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.geostar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.geostar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.geostar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.geostar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.geostar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.geostar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.geostar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.geostar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static geostarFill(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4be1af95d7c9c5f412f0bd7ca965a79a3691840d102dc4d542068f95fc8a04ac", 38800)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GeostarFill", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static geostarFillTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.geostarFill({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.geostarFill({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static germaniaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8b7dd1af0258695612f37eb7db169c99f09801337d690f6880dc4a7c351f830d", 33192)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GermaniaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static germaniaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.germaniaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gidugu(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8cbe8c40904c76d293cafa7611edff01d450f676f40d33e66863b5f7b10e7e1e", 185544)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gidugu", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static giduguTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gidugu({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gidugu({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gidugu({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gidugu({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gidugu({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gidugu({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gidugu({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gidugu({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gidugu({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gidugu({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gidugu({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gidugu({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gidugu({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gildaDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d46a827dcf6e69348a898d71938544f7f63de075eaea97cb6cb797bd3c234904", 36756)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GildaDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gildaDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gildaDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static girassol(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4ac0b37ea4560c8fe837a50cfdeb9b18f00c84d4fe2556fd1934257270c6c1a3", 31140)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Girassol", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static girassolTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.girassol({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.girassol({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.girassol({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.girassol({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.girassol({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.girassol({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.girassol({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.girassol({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.girassol({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.girassol({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.girassol({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.girassol({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.girassol({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static giveYouGlory(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("309c5df7e1fe41874a8f14de3edeb9c32a42ec3e31d17e863696920deb848095", 42564)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GiveYouGlory", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static giveYouGloryTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.giveYouGlory({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static glassAntiqua(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e175bb6abcc9cd23e8e7fff60b5a13a870ecafeb7aab3af67614547c14354aad", 62964)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GlassAntiqua", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static glassAntiquaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.glassAntiqua({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static glegoo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("91a94e2b397503a978c0e061d4d1f39323e741fd649d6f743538a8d947cc1f13", 226220), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("32ba529e1df310b4629e2a4b94b577e8d2b995647f1b0b02b97cbc401c43100c", 221232)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Glegoo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static glegooTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.glegoo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.glegoo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.glegoo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.glegoo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.glegoo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.glegoo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.glegoo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.glegoo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.glegoo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.glegoo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.glegoo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.glegoo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.glegoo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gloriaHallelujah(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ea0610b2d462be9ddfd55db487fd670e7b0855857d198cc6293f623adc66ff8", 56248)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GloriaHallelujah", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gloriaHallelujahTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gloriaHallelujah({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static goblinOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d2f4678ed209cc09bfe4cefb1df66ef95e21a1b2f6f71fdf1c8408b5135472f", 36712)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GoblinOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static goblinOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.goblinOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.goblinOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gochiHand(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e396d3d6d4147d9267b06c9619b938d34176559c67b48c046d971904edf8ce36", 36908)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GochiHand", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gochiHandTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gochiHand({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gochiHand({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gorditas(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("987a5551dac8207ac89158c984bb117eac9569a4def85c67405a6f7ee656ca7b", 76880), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1a73ab190434815fb46d5c9f8095a8d40543c248bd203391f3e120aebb2c223e", 78612)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gorditas", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gorditasTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gorditas({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gorditas({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gorditas({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gorditas({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gorditas({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gorditas({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gorditas({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gorditas({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gorditas({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gorditas({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gorditas({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gorditas({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gorditas({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gothicA1(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1ae3fbdff726cb716a361659f8efd51296b280ce94f4582c7eea6a69905050e0", 1315216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c2132aa2e6fae5ce3ac066aa23fc45e7a83571666c0b4cc9c4dd7bf734363f05", 1313548), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("91a462996301381a669ea6f51dc5030f155c0a85e896a575a5d80dfbd8471779", 1314204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a9676e8d54fdeef2976f9c8fde17f39fec21956933f3ee203655c2655f350e08", 1311208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d0781b8cc09648594a3bba783b1d463592a004fea48584b181b631e2bfc9956", 1311800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("94fbbaaaa3c999db13176f3b5a8cc657f1e471472f8efc8fd47d298191d6ea56", 1311192), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e689bf118e2ff1a2884e3170b3d1829ccfdd0147baf98523e7fe0494299969f1", 1310932), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("db82d9a4e6dabe467f8879d6c23074f7bb1b8ea95857527aec64201e53126f6d", 1310760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ad367f71a0970215c6e16efbe180999b11228c398745e8021187b0aa608fdd2d", 1312032)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GothicA1", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gothicA1TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gothicA1({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gothicA1({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gotu(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a8a68ca0799b2cb999b3b4c9ed791251063ffa4c8d870256ebc31438c8e3c5f1", 517000)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gotu", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gotuTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gotu({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gotu({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gotu({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gotu({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gotu({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gotu({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gotu({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gotu({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gotu({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gotu({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gotu({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gotu({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gotu({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static goudyBookletter1911(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a4ea1fd345de7df9251d754f6ecc38147180ed991b78a0979f3ec409ee987e8b", 53284)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GoudyBookletter1911", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static goudyBookletter1911TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.goudyBookletter1911({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static graduate(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("26483ff4a5a591dbbd59a7a59b4dfcfbc10b96f20b67a1b2af0da6fbc33dc2da", 22684)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Graduate", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static graduateTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.graduate({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.graduate({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.graduate({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.graduate({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.graduate({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.graduate({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.graduate({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.graduate({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.graduate({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.graduate({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.graduate({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.graduate({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.graduate({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static grandHotel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0804e7944e677d28eec42a45ba39935faadd27b2b1a8aab2e96c1736b7bb4e2d", 64596)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GrandHotel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static grandHotelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.grandHotel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.grandHotel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gravitasOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8173c77c59dd22de492971f099b97bde163e13062c6df365ffe3f201cf4de551", 41424)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GravitasOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gravitasOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gravitasOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static greatVibes(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a4131255cb3cb73cefc120a8d68c6888fa33a5c24045934a0353f0c199fe254d", 105956)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "GreatVibes", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static greatVibesTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.greatVibes({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.greatVibes({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static grenze(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0990a8c493d15ce4bc040461ac83778fbd658ffb4e5470ded379c5d932c0ad64", 62884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b76ab96616d0138d6376f8da6777f4dcd53174ecd6cc3d105f926d138412156a", 65344), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ea5652640e0126eca9dd8ec9af72afd38c03f0608cf8066ba85e8d3cc84b72f5", 63156), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("62177aecb9fc857767b77f93de0e28aaff0aa14d6743fcb2e074b3b17d10ed6a", 65532), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("306db261f5db582fb834c4d4bd749cd7bbd220410f22c0f91e9da3906fea195a", 62964), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8328aa2d7be6cb51506689c284e11d44e22a65cc87f444619d3e74029b3c6b4d", 65500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c881a6bd46175e518a6059d0c5fd2fef4f0e1ad8433e903ab0df21ac113772f6", 62924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("396353d483f4c64a4c320999b4a8ea7bd7d3fc2f3d1126d31dd62c2bd7474f60", 64960), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7685525db63573b7d2818041934dd2608e56fd7eaf5af7bcbb29f02b9cd5f948", 62892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("da991020ed06646693057a5dfc4dae9bed270609081f0e2167ff1b6d6893483a", 65556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c4b885545038f7f41fa22671f8e1d9becd9672ffe403f1267a77e244c2ebbe7f", 62772), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e85fde935308bfd3bcdc33373ab0a7296b4c852c9689504d830dd8a2c722828c", 65404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("59bbcbbac7dbc3b0875ff2e1f9b73917427553fe9494ce5072c9408e4805693c", 62696), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b408bf29942d61415edcf80e8d329a6c9d54eedf1b2a0be057164e93cda0029a", 65328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("10f31373e1d786f62febeb25a546f803218359aefe0c2e9d0247008665f54a92", 62844), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6c6bbecf82467b9cbc2bc5373b2132d2a72fc1ab1d19beab9247d96b9aeaf437", 65244), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e99c2c3ccee2de60f0fa0836977cfb7f1f5db667eaba9c59b205a9860377cb15", 62624), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("26ebaa2c75db3de90f21f701605ab5e085a7f4c1f23fcb5235a754a34ef4defa", 65320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Grenze", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static grenzeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.grenze({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.grenze({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.grenze({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.grenze({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.grenze({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.grenze({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.grenze({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.grenze({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.grenze({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.grenze({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.grenze({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.grenze({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.grenze({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static griffy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9f37c4a3b39667330abe546b4133f6acfb3799da67a89997fb46b39dbc3fc6d8", 208332)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Griffy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static griffyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.griffy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.griffy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.griffy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.griffy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.griffy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.griffy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.griffy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.griffy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.griffy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.griffy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.griffy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.griffy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.griffy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gruppo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6cf289ec6fe4592706aa68de1f9711e3f1967db26053962cfbddd4e51a7ac65e", 58988)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gruppo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gruppoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gruppo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gruppo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gruppo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gruppo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gruppo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gruppo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gruppo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gruppo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gruppo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gruppo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gruppo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gruppo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gruppo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gudea(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4b41bce93d5a05ba71bb86e2be22eb03b270fa198be7df07c9c5a818a1724c0f", 22884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ab00b4c571bb901b0d274550fab83154da5b8bb4529e382ae7d58962b0d05f80", 26980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1c48f399971799fe09414206e205ea8a5f37a1e17adc5ed4329ee9ddb9d074e", 22512)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gudea", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gudeaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gudea({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gudea({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gudea({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gudea({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gudea({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gudea({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gudea({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gudea({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gudea({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gudea({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gudea({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gudea({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gudea({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gugi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4fbf616bf21ec330d026a7115b7224fe9baf30418cdbb19b26eed6ebcd6ce2cc", 552880)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gugi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gugiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gugi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gugi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gugi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gugi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gugi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gugi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gugi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gugi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gugi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gugi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gugi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gugi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gugi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gupter(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("98ef59cfa0eb83781f6573b4ad1964bf98369e70db38156479c353702557fa01", 33868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("84381b04d635b2daeb369d9c0afa5ff2489d0cda8d9660ee7631bfdf82f2eaeb", 33688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0e63fe340f8e61f9d4d9c5bbc638e79930af1125c534f656814a99d3909674b0", 33692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gupter", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gupterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gupter({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gupter({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gupter({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gupter({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gupter({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gupter({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gupter({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gupter({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gupter({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gupter({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gupter({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gupter({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gupter({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static gurajada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9647a956c03e34f58b38200ffb45cc56377e8ba1c333ce052b8e20c3216198c3", 234900)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Gurajada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static gurajadaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.gurajada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.gurajada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.gurajada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.gurajada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.gurajada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.gurajada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.gurajada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.gurajada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.gurajada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.gurajada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.gurajada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.gurajada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.gurajada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static habibi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9177d379d59937eb418704aa1a5f16ff6bfa046d3828ba6f495ffe7c2d040c5c", 36236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Habibi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static habibiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.habibi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.habibi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.habibi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.habibi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.habibi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.habibi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.habibi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.habibi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.habibi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.habibi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.habibi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.habibi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.habibi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static halant(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("efbf1567d1ee285b609cc33198f6bf85b75ffc137871c0c74b770bda82fe5f96", 163344), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d2becc2fc9d31bd06f7378b501b26b4eb057167cc3722297588a277f45b05fba", 163064), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e6e6c9b73832eb91900f4298ec5c6b73e8d537163220299fa6213b8d702b9f37", 161020), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c38923af0ef17edd914dfb2737891b725cd1cc9dfc36bd72ba413213e99839a3", 159016), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d09a5ce42fc23e8619b6c817a9bc5522bc64ede74b5a75d99fe2815244ca6a8", 157804)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Halant", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static halantTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.halant({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.halant({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.halant({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.halant({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.halant({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.halant({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.halant({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.halant({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.halant({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.halant({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.halant({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.halant({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.halant({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hammersmithOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bbd2dab2dede4753a7b96c8c6c16d212a15b9feda00f0620edbe4cb62e1604fe", 57584)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HammersmithOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hammersmithOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hammersmithOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hanalei(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a5f5db562e15a26c9d07e75a9375af4b46c68460a9dbaaf21847567dafcf8619", 183760)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Hanalei", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hanaleiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hanalei({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hanalei({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hanalei({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hanalei({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hanalei({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hanalei({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hanalei({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hanalei({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hanalei({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hanalei({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hanalei({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hanalei({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hanalei({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hanaleiFill(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8a762eb869da8deb93071d72d31cc3f5d6ab83cbeff8da397a582e507aa65465", 91692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HanaleiFill", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hanaleiFillTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hanaleiFill({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static handlee(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("10f3e83c9fcbcd234b04cde9d1f8001a0255ea2bf3be48eb39ba87a44ff27fac", 39084)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Handlee", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static handleeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.handlee({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.handlee({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.handlee({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.handlee({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.handlee({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.handlee({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.handlee({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.handlee({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.handlee({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.handlee({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.handlee({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.handlee({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.handlee({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static happyMonkey(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("edf47e48fdc5ee842cf7de5d9333a50f1455140283974d5f0585583198b0b994", 55964)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HappyMonkey", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static happyMonkeyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.happyMonkey({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static harmattan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("41320202de91ac539042bef1e0b4e68bb221cb422a2afcfd15a946a73ac99f64", 528540)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Harmattan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static harmattanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.harmattan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.harmattan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.harmattan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.harmattan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.harmattan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.harmattan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.harmattan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.harmattan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.harmattan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.harmattan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.harmattan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.harmattan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.harmattan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static headlandOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("09bc81418bd95b221c7661eb2081838c8bd80b6bcd38c45d2e560ff3983c9fde", 75448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HeadlandOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static headlandOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.headlandOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.headlandOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static heebo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2f2d859884539805a307db5a1953174f56bbb1e6903e915be95fe2a03d9ccacf", 45672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eca72d49e0e063205daeaedb86fcdfc0cc36c5aaeb2d564ace316302e6ae62d9", 45524), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("afb3fdd559b309c81c88a054148d94587299a397f1e8a3798cfb7cc2d485369c", 44868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6655017f4c44bf09c5f66243feddb0c2cc8654284f24057da878243794d13286", 44708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("61bb78902136df2bcd0ef85590cbe95a59a3d85b975e0778906df1211029bd34", 44840), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c1324f3250d2f9405f19d63450423cd5a8a8cf6c6b7129e3afda9592f69c2df4", 44964), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("500b1881e185310128c33157aa1484b2a52573bfe32f11d60065e0deffe8471c", 45328)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Heebo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static heeboTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.heebo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.heebo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.heebo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.heebo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.heebo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.heebo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.heebo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.heebo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.heebo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.heebo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.heebo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.heebo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.heebo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hennyPenny(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f0a1cf7a7ff413b8e4b7efebd74b65892f11e78dc663ec993b133ccfd9177864", 78004)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HennyPenny", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hennyPennyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hennyPenny({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static heptaSlab(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("534d777769f5477f07228b5576ec1d9e5f8524ebb5568ee0c7ead05433221d78", 96352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("de95a9d08b1575d9f362c8b8fdd65bd2909ac29ad85189cbcc2d2bb7b79bae55", 96348), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4cd4b89cf596ab747187626051fcb2da9f1ee5facedc163666b009c58d2e6a4a", 96164), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fd8aa078be565bf9944c3c9a7158b16836fdcd409b6df1377b7ce805078acf7f", 95980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7d62a8746b071e53a6b32f2f3a0052555f9d40c47fecd5bd70697f632af7b585", 95988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b2cd08d92feb50e4548237182dede8320631fffad112e55ac8ffec9bd254dbc", 96144), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c732dc9ed4d5762dd9391ce2ed11a31606c9ec3305bef745bce6d06bdb2403df", 96504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d4ba935b82b68baaeb5bc719f5132fb28f94a27979e65e4ad25c5ff85d02303f", 96856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf562116fb32949fa7d908466470e1c6d03ae7bb83023d1428527ecec91d9201", 96924)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HeptaSlab", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static heptaSlabTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.heptaSlab({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static herrVonMuellerhoff(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8c993280c6ba0eaa30f678b4c9821389abad4632e23c3a1629655afe7f463395", 46576)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HerrVonMuellerhoff", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static herrVonMuellerhoffTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.herrVonMuellerhoff({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hiMelody(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("306d4c79415f43cc2f655c997e9edc971ad12227c39d46aef4fae766ba572d12", 6090832)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HiMelody", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hiMelodyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hiMelody({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hiMelody({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hind(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa60918477db30de0e2a697db644a3ada9014744668b10708e487b2731a95e70", 152472), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6c2ab346a94eb5613fbc0721b8b1b9062968050182abaa239ca636a32911d90", 152124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d4fd25d01c80707a336cb4b040f3a52767f1cd612f042572d044e0b575c4d05b", 151708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("98d33c7c6f79077dfb001ecff6aa383168fca5cebe664a277c74acff145e6685", 151452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e7dd62cde147432a10070b99d17f623f3c13f9c8796be3afa987f6e0707f030", 149692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Hind", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hindTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hind({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hind({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hind({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hind({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hind({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hind({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hind({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hind({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hind({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hind({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hind({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hind({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hind({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hindGuntur(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("83f2591cf78a025ae8e85ebecda4a590c393eb80bf83f18bace7e5d144b57bc8", 173452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("58962c61fd64e7df2aa4d0fbf8b7044df4531b4098533fd14348043d05fb8b42", 172528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1548c29a01fac4cf5904cd44cf584eaec84e08ed0b15f96638c1cb9ff8995583", 171468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("12aa908469a5d74ca315816664934ede78906a4593e2310e5ea1894cd964c2a1", 170280), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("751c8dd12898b1caafe20c6458531dce8773242b36537ea2e341d9a4bd01bafe", 169956)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HindGuntur", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hindGunturTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hindGuntur({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hindMadurai(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5d2a60f4ad6943bf7f1de4b16722cf8992b893d91bdb242860538507d4514dfa", 71760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fe0b759733d5d95da02f65af60da858c2e45e9fc35332036694fef1e4f2369aa", 71136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("367a1897906f0dafe97990639330a1ad8058b45f8d8deae93db5e40a9ae90f44", 71428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("559d4bdf4c6fc62a412864ae9323ea997294ef17fda3b84684d928c0e042c1a0", 71476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("59964f77b9fded7f3b4030894b5bde3bf552e70132670a0108ec2218ae31fb9b", 70344)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HindMadurai", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hindMaduraiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hindMadurai({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hindSiliguri(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ac4fb0e6616374786c8c79c069fb7ec555580917d9534053bbc5cfca7cc35a6b", 135788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4f3c785b698527e53bc193bce4c13e1eedc1eadefe7c65720c5eb0ddafcc78c4", 135144), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f112da1e6bbd4b1fbf998db772359e0812e0bf2acc7c60e21a0e99c24ec1e48f", 134792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c80fdec935e6023f68b5a13e7bde8edff218450fe58f3ca7c3fe6e454b4cdd54", 134828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3b363f06eb2b3264843731ba51fa467aba8cf06454281e9ceab83a3bc8c802ce", 133192)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HindSiliguri", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hindSiliguriTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hindSiliguri({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static hindVadodara(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("28ad92a17d66f3a0995bb68875c29dba3cdaf9fb43feb40a882e2eb2638b7d0e", 132940), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ceba975d8428bc0815764806b013c8ab2629dd726f64eedc432d9089567ba31", 132588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("99808cdfa62f14d0fb695cf7a37fd7987ec1f14b71dfd11d87f428432e5641c7", 132420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("931dba7983e3c75f3bcfc57cbb486114347aa39bd48e261bf327bfc5d2b2f7cd", 131916), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e717f555c38c3a3665cdb7fc053e8b12904225205d5eab82b472417208c7c483", 130448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HindVadodara", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static hindVadodaraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.hindVadodara({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static holtwoodOneSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e13ec5f1ab20c1d4d3cd916510331011904e2d9a5083dff4b0bdfa42c86a4eac", 36652)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HoltwoodOneSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static holtwoodOneScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.holtwoodOneSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static homemadeApple(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("492f1c4f1d496ff595958cd8454693eccded599173fc699c93cb2df8a2561201", 109592)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "HomemadeApple", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static homemadeAppleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.homemadeApple({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static homenaje(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("efaa8006929ef2ce2bc82593647ea2be59dcb513e048e4cb4b105cc66119d343", 21568)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Homenaje", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static homenajeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.homenaje({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.homenaje({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.homenaje({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.homenaje({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.homenaje({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.homenaje({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.homenaje({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.homenaje({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.homenaje({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.homenaje({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.homenaje({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.homenaje({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.homenaje({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ibmPlexMono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0b176030119e3bf8008cc3a1ab395de2490609893cbf42c9ad93a1b97131c1ad", 62804), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("49cc21b7b1c2e02aec83be236218fc1bf64c43ab6693d02e5f57dc5c4d580a42", 69308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("84f407c2acc498e7797432543eba48500150e851182f2706d2a48e4fc61aef13", 62428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("973e67e339972330580f84b47bc69af70b6ffb871605061a2c44830772432449", 69268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7860eafcb749cd16c35f7d63a81d0d83919b82475eeb29338cd5eea961a4bbfd", 62176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ad14a6133399a3b691d1311e56718da47fe30d69f6f48d68f43c25f62084f4d0", 68876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4e5360e6435ca0fda23ac8bde947e30a690395bedc6a0e0f9b360aceeb490851", 62712), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8b7513201954154b316d56ba7185e0f58200a044e0150145e17d797a98dcbb52", 69680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8bea2481c75885bfb6d132add1b2ac6d4ccdbedfa94dda1d4dc34e7d00ca8ffd", 62328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eb363301d9364248dd094562021ed86fc2b1b9e2351f313c635e72b14d98179f", 68924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b6f0266c5d40d72cd5d4051aaa3dc1836d7874fc40471cae205892e07fdd87ad", 62288), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("48174c08a0c28ee87d255c8380c23b2beca649d5ed46c8287c5062304417209b", 68600), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("089c2f087950891775cef79553f8c15f825bea671e0a1323f495354feb06d3b3", 62324), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3fdca15f4f471d5ef3f57c790ad9b09474ab6d24e75f300f10c9eb8219ddad39", 68980)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IBMPlexMono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ibmPlexMonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ibmPlexMono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ibmPlexSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("813b794a62b57fce9544b834ad183c1e5175f1825c2fa2067d3480518d81f446", 97392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("550fbb9acc0447f5ddf482b1659912f8f4076179a59e288fd71dc1e7d86885c9", 105688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f6209628705dc0331422f8e21345a1e1387a26fd07293496dbcc6a3551859177", 99360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("224494b659d44d626398ec8760d4b0e4ea459e0be556f8219de0ddf0f170cebb", 107380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86b8f04cfeba166a0a6eed0b57970518f638c9745fea6212e6805b004579da75", 99180), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("60e2fc65f3e87d1813c4a598c88cc21e21334a5b6b8e1d821dbb7b17edabbf21", 107012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8cd70b2671db7396694b0e2a1a3a9859018db199711237cdf67322e3d9060bbf", 98888), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d7e4bb3b1d26be9695d85cfc1cdaef4376e22aca80f216e22c43c28ce7969ae0", 106248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c8d348ccb6205cc4dd9833d972d8decd8b526df3d482aedc4aa47ae9f7bd46f1", 99256), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c576912fcd0266aba72ffcf4b1b7d770bdf1353f90c2a0bdc8686e8dd740eac6", 106664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("26aefb8b77b2efc1dd517b6c5baaca61435844c281e5a51125bd65213f2cc5e0", 99140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1aeff1379a138b4aa07f5fd0066ca778f321b9a1c8f1b234d858812b684ebb66", 106720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("13670a62ca981b5bc10df4425d93c3c41647b8934455c891e16f9384881606ef", 98260), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("64d98b387f5233a7cbc684f09cd4b5c622058a02d63fe1af27e247ee88e4573e", 105704)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IBMPlexSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ibmPlexSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ibmPlexSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ibmPlexSansCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("95cb5ef68ced474a2288be174bf62af93746ddbce9a8be785d59e05d46221cb9", 64480), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ea2881ac7cbb7d0a0d0d89b3c81e0ccbd79e1dd040b84f4b28c7ea083a958926", 68820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a51cec8648be38680ff0325b258659173e8d6cf8bf91ce3af4dfe72d96ad57bd", 64844), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("459eb773994095169ba8f6f04dfad1a45c205782fd393d467e9c8d3a21701fa2", 69132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c8260d42c2195a564a8bc5b74144874ac850ad48b4c507271d5fe4151f4802b6", 64424), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2b1c9ad90a1fb240d2e8ebb5f3a3d4a544c37662964daf7dc0941d047876b826", 68452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f14a51d14c32df9b6829dbd95e680ca603bb1f0e0c8a23f3d18f6e96f970eef", 64056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a2c2c799b5a7b8b957579016dedfd8bd110c064310c1a491a71ee84964ff0a56", 68720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("17c6dabfa0ed7d9b258acae9bd3a20e61dbd27fa029bd3df75a0deadaa90e24e", 63756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b605737f157c6f7c5977d9a151ff622fa93439d4b364d24f6431f52eb6a5affd", 67728), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("368b327e4f44c9bf4ba628ecb081c53e0e3f087a4c0822435fe6ad6527dbe958", 63804), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a4fd2820e497b76a6c413f52ce87fa7521d6ff5bd0fac82b9c53e48c5febf174", 67920), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("58ace9c95662b3ff47b0a066336d863bcc0515df78f5a23e9e424c1fbd4f451a", 63812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("064ee4d57bfdc62832b848b5c300e9abaadd59d151ca0279ad569edceffcf029", 68712)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IBMPlexSansCondensed", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ibmPlexSansCondensedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ibmPlexSansCondensed({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ibmPlexSerif(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7d42efee4f1a7ac97d078340d6652728fe15929c68ba6d23cb2bb12c08ade3c", 104216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2d6348f0337897dfd4f35a24aeb41df7d2026b073c6e62091ba3d4be45deccef", 114056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("22d162d23ce0e5ad78699d3f15d64aee792adff19238b2d5fff9ed6e4e2aeaa6", 106996), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eca320d0ebf030d252c42622bd633b638607e007a1106887d72c483f4ab3703b", 117848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b62452067d16ab5b1653fe5af7e516fd1d6a727050d37060d0f83941b25ff44", 106800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("66bf94992c7ae7e495fcd422302ec2554955bf1ee81cc891a365b889836f3386", 117812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("69cbfef212c06c3e226a30329e377aa4501105e862a1d1c6cd3fde2b6c15507d", 106692), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("454337a7189c7dcf2a8c37a8d69c51ece177de9ba36cb5133fc924e7bfd7042b", 117816), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9700f2e4399528de12a7e7ec1551047d64261256a776bcdd963c55963568f4b9", 107204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("92215eb3720b2d7e6181a7f1a7f330fc9668b05e48e1160a1d0bde3d1ebd34d9", 117868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("85939ee252119c0a4249c1d780751347047ccdc1fe552595be038544c3792788", 107392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4373c99de7c1eefefd7971019ac15ad2bc0db7cd3f62c3013925018d0586e38c", 117840), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fe6766f5ba5906651095f3917fbfa426cf5904f0f0c7490a7b6d246dae8d60b9", 106036), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8728efc5271b4928172f32a8701ff0e2cde5210bd8277aa95cd936d723eecceb", 116836)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IBMPlexSerif", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ibmPlexSerifTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ibmPlexSerif({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellDwPica(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("04268ecc548fa2dfe787958a051a8e1b42b355a945f5a4d47f003e70886debc3", 216968), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d2109f0f97280a92b37673b7bf664eee72f3b3874097dcbf1906740841b17fb0", 244584)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellDWPica", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellDwPicaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellDwPica({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellDwPicaSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6fb16b0108016bc27dd4f279a9d1e8247d0028f492cfca827753ea01a8423c83", 198012)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellDWPicaSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellDwPicaScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellDwPicaSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellDoublePica(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("450b7878b03e1b88b59cd3c88d5a9dab68e698f5e89d49f6bd99bd40514f1eff", 210916), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("63f80b5f83de7edd9b6a5674a903289d1c0f0679fefe1835d013e2c6910afacd", 255092)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellDoublePica", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellDoublePicaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellDoublePica({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellDoublePicaSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f63ae624a66cf32943ef34cf81b7d800305ce516f8396bd0b01895abf588d8d6", 197012)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellDoublePicaSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellDoublePicaScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellDoublePicaSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellEnglish(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f559be93fb1947f0551b021260410225bbafe0586dd5236d734d852bf0769f1", 194992), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("67701b098b491cf87633fd626de486662128571e48aee106245d472750bcd7c4", 202368)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellEnglish", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellEnglishTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellEnglish({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellEnglishSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b52b93a50244bb83984cf1b52863db1a14baf8f683fe002dd71199783477502a", 183932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellEnglishSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellEnglishScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellEnglishSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellFrenchCanon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3a31b3ab35a73617ff634ad3017bc55e23ceb3daa2bf23c00c25afa3331aade8", 145832), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("54332a8adf4fa4b9bd5ba4553b7f66a4e8c5ffb07d61701dbfee60bfac4394a4", 158184)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellFrenchCanon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellFrenchCanonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellFrenchCanon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellFrenchCanonSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("618df3e2380b8d244fa861a295bcae3cb41ac4f0cea67f01a815355fcd198ce8", 136188)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellFrenchCanonSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellFrenchCanonScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellFrenchCanonSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellGreatPrimer(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fede2a25cf42680231c7bfb90da7306e0962092c8e1074fbfc44ef59289257ec", 216552), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("020c8f65ef327b827d6e28ca2e4be8f019b4a81075f1c7c00a53993664b41b93", 249324)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellGreatPrimer", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellGreatPrimerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellGreatPrimer({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imFellGreatPrimerSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8894f603e127ce2093a63d487149eb1cf10f58b20ea4abbae6ac6635472dcc85", 203776)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IMFellGreatPrimerSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imFellGreatPrimerScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imFellGreatPrimerSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ibarraRealNova(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa62d319d71f5e7580a79ee36ecae3548c35a0e2d7892f8695afa7e237a3b660", 58948), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0f9205ed765c8774cf31fd539aee83f11aec36439f0fd12bfab29a491352b9f7", 62160), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("91c844d08ae013b372d204d91e5dd37e879057e12a50150929228512c78eec5d", 58676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("77e539a16bef74671e0c9ea382e533233bfa3f2b0219d2bd7d2d11db7502dc23", 62244), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a2ae8b1765ec3d56c893888f27607c49f613d48918f01ed3034e7c5119269948", 58544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("be0a49f8da3aff4a325e615fb9bd69330b92f562ff4c805471e29bca7ec57e72", 62316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IbarraRealNova", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ibarraRealNovaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ibarraRealNova({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static iceberg(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4863f9363951873a52e866b2ad79c760da5a5c1c076692511a8fae46789aedae", 16680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Iceberg", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static icebergTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.iceberg({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.iceberg({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.iceberg({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.iceberg({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.iceberg({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.iceberg({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.iceberg({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.iceberg({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.iceberg({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.iceberg({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.iceberg({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.iceberg({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.iceberg({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static iceland(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d15cc78dabadb60a047db08291c49cb8c2d05c29de29c7505de00383b8f447cf", 17548)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Iceland", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static icelandTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.iceland({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.iceland({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.iceland({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.iceland({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.iceland({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.iceland({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.iceland({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.iceland({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.iceland({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.iceland({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.iceland({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.iceland({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.iceland({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static imprima(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("40a584db206f3a44197d5245155bcca66a72cf6c2dd346e78ca4b30b36af92b4", 24864)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Imprima", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static imprimaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.imprima({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.imprima({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.imprima({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.imprima({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.imprima({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.imprima({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.imprima({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.imprima({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.imprima({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.imprima({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.imprima({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.imprima({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.imprima({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inconsolata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b710cb16b36b86fd08be8de67824345433e776ff152ce4d819f8dac26b76bb2", 70528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("499bfec42f5525e40e1acc5d044cce315e80cc9c1205db693cf68fd5a7b724d3", 74916)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Inconsolata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inconsolataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inconsolata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inconsolata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inder(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eb41a206e08e82f74d76415f5d8d2feeaf53587676b8ed6c2ea15bb2e88ccf8d", 31008)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Inder", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inderTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inder({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inder({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inder({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inder({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inder({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inder({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inder({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inder({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inder({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inder({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inder({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inder({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inder({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static indieFlower(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("61c24604992861512306296260abd7382a4e89dbe2d6e0d5ba3dbd1a15b95ff4", 60484)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IndieFlower", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static indieFlowerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.indieFlower({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.indieFlower({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inika(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b4a85642ea25e8b6a0657684af8ab67401b31b1f39ef952616d46f1ee711107e", 39652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e831ff700e7e5ee39b33fb1ae47d7f98ce526a136e1d90c4aaf1cbfbba0d4336", 38688)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Inika", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inikaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inika({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inika({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inika({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inika({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inika({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inika({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inika({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inika({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inika({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inika({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inika({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inika({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inika({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inknutAntiqua(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8fae03035a8fb6772fc7bcac683c4a01747a3902ede69b6897be980d35cd3c42", 279252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bad6e7b6f2580d3870d5242c04a7edbb0712500e639570759d1b76b16ad225af", 274980), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f7bad3658649b817553e3c3a1e3b75b8b1c2f93af24d3ee0c2f491f13695cee4", 277544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4249a7edc9acfbbb46d50638be038427a109d75df9478fd696a6d61ac2c6262b", 277284), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ed4800a911bc4a319bbb68949167b0e0c9149ae4542444b3643b0949f21dbebb", 275168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("58f6a2abd44b4a7ba81f42611ec481c40e08bed9129fec6f638b2dca583bf20d", 274600), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("068486e18282d9c5300c186834bd1a055d1d4d2697ac3498756bc41e999b676b", 269264)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "InknutAntiqua", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inknutAntiquaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inknutAntiqua({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inriaSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3bde5e08b5ec7274f1c28704b62bd581c28724f8cf4412d56a9e24435e927789", 45140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e33d8e62a895c0402146425676e4254906218e07c6adde8532ae0f436aff96ae", 46472), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("78a5989461a98cf7daa6612f5b9240f06cf592fcaeb0684a49a73d5616085753", 45356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("dea0c172e0ec1669869a55587b188534d474341d049a62012e316cdd79e82f22", 46704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7747b367f8106ba29552aff3126864e3d6b20c008e33d214252ca30fff47f65c", 44708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("70544f369add81b1bf7a0b8f3d4108c7bdca0f1426f9251c47d8d54ae6820b90", 46364)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "InriaSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inriaSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inriaSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inriaSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inriaSerif(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("843b3e9e758e66cd88535ad2c67fba727e83e342a871227e9d6dd1640acbd496", 55144), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f4537cff635316910c2b9f1449b29caaa2d9aaf852dc13bd2d82adc9070e861d", 54868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3e86dfe8f6fc1e2431b0a39040b2dc845fe91b448d1a75733f8a2e1d8dd54586", 55368), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("911f907aefd837c9e50f383f376f437fef8b69dee712ca4f5513ffc70769cc5a", 55020), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee42dcf7120d640f7b28930c80818aaec0e114784ea1935fbf0721429519d6c5", 55188), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("503bdc8982bd9fc8af24dadb68f8e5304ddeb3d2aa5f9135811977c9b4c4eb80", 54952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "InriaSerif", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static inriaSerifTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inriaSerif({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static inter(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("897d64cd0dfbeb56e7867aff5fb59519c0a18eaa535b4d4f9d636ac43028afb5", 257128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a8c528f80a6ad8d07eb0a822ff9763e3286ce1463b1cd881cafbc2d3d9018512", 256936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7cedc5ced62f88258ed3781a814ff426d7c63e5ef822bc77e66b393b3316ce86", 256628), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("74b0b48ce5240039e1a17c62f24f5abc322d3d77d4bf96efcdad6d637123cc9d", 256476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("177913939a2c83016eaf35b8dcf5b863fcb5d8e86fcb78a14ad753d055d06436", 257944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f0a9e5b2bc1eef6c3241a779a62cea7c34b88535d7e586390fdcdf28ab01d673", 258828), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("94c9d9a14fc9ae26fd08041b634823238718b745b8a34986ddfb57cf3db367da", 259260), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e5493c1e805b48142688a216308108352fd538721635d7f990c47996dcf8e2c4", 259864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a2a712f761390199ddad75da5123d6f97f529f5d6dab247f94ceb954a8fe381e", 260212)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Inter", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static interTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.inter({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.inter({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.inter({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.inter({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.inter({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.inter({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.inter({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.inter({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.inter({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.inter({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.inter({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.inter({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.inter({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static irishGrover(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("871e6c825a4e60667eb8131be9f23ace65f65e3f15a9c08c3a798797c9e361b2", 52272)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IrishGrover", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static irishGroverTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.irishGrover({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.irishGrover({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static istokWeb(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("69f0e211d11c1acf74b2c9076af79b8c4437700758d0282acf48674ef128953a", 137024), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("05eee5ff9d276f82970504c5e15e6097ae58262e043f86c6620a18611cdcf94e", 89568), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("000e33f7e7a72f87087ee83ef75edf7993294fc065f5f8e52ae6ca1c90c7517f", 92660), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c19d7189ef0fb5066351d3851d3a386722d97b98c62fc344ffce8f4f1889512a", 89608)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "IstokWeb", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static istokWebTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.istokWeb({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.istokWeb({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static italiana(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1324621b4067c2f4664c85776eaa7a358556c72c41adc3672d1e85e255b715a", 31560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Italiana", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static italianaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.italiana({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.italiana({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.italiana({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.italiana({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.italiana({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.italiana({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.italiana({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.italiana({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.italiana({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.italiana({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.italiana({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.italiana({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.italiana({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static italianno(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bfbaa565dcb115e0d8e8af969814850e25a50df02022afefd5b2ba3174c386e3", 137316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Italianno", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static italiannoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.italianno({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.italianno({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.italianno({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.italianno({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.italianno({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.italianno({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.italianno({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.italianno({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.italianno({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.italianno({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.italianno({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.italianno({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.italianno({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static itim(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d649b08c03fa8e37e169c6e7fc22372fe2c6f97d639fbcbe67f8702afb9ef1bc", 249260)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Itim", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static itimTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.itim({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.itim({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.itim({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.itim({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.itim({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.itim({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.itim({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.itim({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.itim({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.itim({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.itim({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.itim({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.itim({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jacquesFrancois(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d263121e53613f81bea06459cb1ac924693f48b654d9943d34776a3efa1fc52e", 42580)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JacquesFrancois", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jacquesFrancoisTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jacquesFrancois({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jacquesFrancoisShadow(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e4664490f27116a48b79a15fc06c1817e3669ac1d3ee0e65f80b093997b5e935", 56088)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JacquesFrancoisShadow", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jacquesFrancoisShadowTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jacquesFrancoisShadow({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jaldi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2fd0aecfd94af32615e102201a3d6b70dd7b98a317a4b6457f9d5683435f2680", 273184), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1eb9040b249dbbf98470eca20e05d667c64d16570d20f4f3b5c8082472d03566", 272924)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Jaldi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jaldiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jaldi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jaldi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jaldi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jaldi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jaldi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jaldi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jaldi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jaldi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jaldi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jaldi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jaldi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jaldi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jaldi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jimNightshade(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("69667733e323bd8537cd7e8ab6c0cde0b0d48e1f336695228e8a9de962feec29", 153264)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JimNightshade", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jimNightshadeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jimNightshade({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jockeyOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cbdbfa4fff4214a6685ff84262303ce8f4c9a4b6e563f149a8cc5322417aae81", 48560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JockeyOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jockeyOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jockeyOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jollyLodger(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("816f864e770d0e20f949a3c6064291765734593637efde29ea2295a773c7afa2", 39384)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JollyLodger", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jollyLodgerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jollyLodger({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jomhuria(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6dce267ed457cc6f5511cd60d4fbbc941e2c0cf029959a91effbd93815f66d47", 170560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Jomhuria", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jomhuriaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jomhuria({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jomhuria({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jomolhari(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3ee25009d9daf59851273c5b12d4656fbdfd943f715735eda3c58bbf19ebd677", 1002648)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Jomolhari", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jomolhariTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jomolhari({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jomolhari({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static josefinSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d9274027036e4bec6eeac49709c56529144d0714f2d42cfefabb8f29aa669110", 71844), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fe583724f6b3b6ff7f2a65b872c7a8be86957b1f03d8efb03b7c3a83271d22f0", 71124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2bfd7038e00c3bcb80df604697efc092891a519557503aab5b119fad6fb79d41", 70504), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7ab4a22bc24c0da9b9abeae23dcabe78ebe9cb10010845ffc5b916764b87f63a", 70336), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ad0ce8b3f694b796a43e60893235246f404c728782ef2719a3122b54b6aee1d6", 71316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e240205c12a00fd8fec9a99ee4ce68015307c91c1dc38586775ff103177bbf6b", 70608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1af031215debaf6e64b6373e58d995de8763c248952fcf2a5f2b03b1cff3e26f", 73004), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d8d67f5eb2f1bd5f94c9574d8aee64e7e1706e25d0e4715e73d236bf12efeca0", 71876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dd252f6382ade7107cb7955cfb5062f3b8b8546376fd9bdb6774fc830292db75", 70672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("de8609adb9deaf3cd40532c56050226a1aa22c9f100b56fd248fd4b77fd8fd88", 72656)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JosefinSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static josefinSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.josefinSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.josefinSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static josefinSlab(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("447b30a4f09ce882924bc14b5cb2d46ed8a09e31fbd138c82200fce2411f2612", 20404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9e521fdac6770840a2382fe98c7220bc471558f801d8965edf8573e7f30b69b5", 21704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ed15a28fd4c2b8d4813431c543e1e1d9293d3054ccc2ba5ef342f99ce5a44c08", 20896), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5e1991a7b37703dc6b6e746ddc357b7310c82534d6438bdb6f7ae3748790800e", 22096), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a95bda8e2687087242a1a437c00ed9c693590a2280a21d2a4734a3ad6dfce08b", 20448), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("61d7f09bf0f42191d6840eb606f9898b7faf7fe6493a630405fe91aac97327f4", 21468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1a3215f9937cb8a3b66779e1b69158645771177c7433046a9d0929ddc30e126e", 20744), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("efaff26fee494b1b09da8456684d5c03d3bb898803d186aa6a88154f10bfdfee", 22096), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("00f4364ef7f981110c8e894aa31ef2195629999eeb5bc8689c21745ec03cf534", 19936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("999b995ee79a2865d9ed663bd3b3d65fcd10a6c15198afb228ca225b210eac8c", 21064)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JosefinSlab", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static josefinSlabTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.josefinSlab({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jotiOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8f5feca23a0920be0f78e1eb58c62cdb9ef32b1c4142f6b1ebc3cf13e172683d", 45536)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JotiOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jotiOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jotiOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jotiOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jua(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6e140114334d538cd7aba3f5c53621623e62b941efa1a0fd2aa8d5dbea4c61e1", 1366212)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Jua", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static juaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jua({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jua({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jua({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jua({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jua({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jua({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jua({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jua({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jua({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jua({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jua({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jua({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jua({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static judson(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a0e44f8bee5db23549c40c2bdd46ee689a1d4427410df98883638059880eb73b", 120496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("434a445b96fb17f89c47a66f76abe63757bb6c0997d49bc83a86e2b0cca56b58", 111732), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b39af14b252a5cb398202d4738e995ef23ad94afe48fbd78fac58759d298f49e", 107400)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Judson", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static judsonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.judson({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.judson({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.judson({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.judson({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.judson({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.judson({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.judson({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.judson({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.judson({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.judson({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.judson({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.judson({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.judson({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static julee(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3f334d6179a0a109566471f8a12eb16eb9b7ce8b2fb4ae975450fc8a2dd71358", 30828)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Julee", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static juleeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.julee({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.julee({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.julee({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.julee({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.julee({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.julee({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.julee({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.julee({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.julee({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.julee({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.julee({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.julee({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.julee({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static juliusSansOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2453dedd8ffddbabbe0e7b6822b7cf607757d98524241a40596bb7ae18212156", 27868)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JuliusSansOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static juliusSansOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.juliusSansOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static junge(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("573f4ddfb30769905cf4446b3fc01243dd50c8d9ad1f810c91f3b009b109d031", 38872)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Junge", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static jungeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.junge({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.junge({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.junge({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.junge({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.junge({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.junge({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.junge({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.junge({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.junge({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.junge({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.junge({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.junge({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.junge({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static jura(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("77bf0cc35f4472e54d1b2daf9d1bfc5f02b062280d8dccd089869c247b4787ee", 130688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("33eb5cfd183074e05fa8299bd75531ec22a6a6d5f8778170d27310d95b1bbbb6", 131592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("77d5a89082924bbe692443c95c536a679eef0891bfbe46d7e30f206f8486631f", 132540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("85ee38dc27e08fef91f43a628bfb4a044e79102b07af8ea7d859b249c169aada", 134512), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8215e86097df83eb3473c6f3ee4d3c63cd00dce9d02b9cd816d27f4e13616183", 136056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Jura", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static juraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.jura({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.jura({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.jura({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.jura({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.jura({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.jura({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.jura({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.jura({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.jura({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.jura({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.jura({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.jura({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.jura({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static justAnotherHand(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1a03840122f7580fc7dfc0c3371d5450fd3b1c04f891bcc1e86780354e7c53d4", 164136)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JustAnotherHand", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static justAnotherHandTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.justAnotherHand({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static justMeAgainDownHere(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fc0ac5f253850191002f529e5fd66829627682a2f9740fe0345a4bb339da7438", 52984)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "JustMeAgainDownHere", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static justMeAgainDownHereTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.justMeAgainDownHere({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static k2d(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d221fa3a362d33d180e193b479bfddbf9e8ab02b545540d3a80121af669090de", 90864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2ee77370590db6101099fae848e5f0e4fad425bcb6a8bb711390100587eacf49", 94760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("84c5594915b66f9cd68b4acb3820acdf5be79979f881f4edbece711c1a63d0cd", 90688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("989bf534f4958d0d4655079703f5c6788e8cd7b1add81d08a1de93c354d69c1c", 94820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bad065e1eeca31036e60587a4472530b8db84eb93149d94f2b687a28c8b0af39", 90728), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1696fa34076cad6a8c919ffbe3247882c29a281086a573ddb8abc0c175794aed", 94808), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ebd6d32612d7badd90f78a25b0a45e1573bcbd0b93954b702d17188d178d9e87", 90976), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d7dc126127f8fcfeda097e5da4a1097f60e396ed7c4696060eaa0da6f1727366", 95068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("57c28cc8eae5e455cd2000ea358ed6be014ff9f0e69866e18a1e7b9c6345bce0", 91356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("00dc6e342b171a8e55a277d83326c4612d8f176cd576ee5f666636b13fc4ca18", 95456), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8ceb3795ff3e683d9c70a4d12f431d94434b2527d61dcc11d59f840bfd644a8a", 91488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3bff6acc9a59d6af0e9d2b3170d55987d1c96e9bb88ff5c20be84053cdb0dd81", 95596), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("42e6c8a5b79abf6121af3fc8777219f39b88045a96a42dfe628d28c2112a4e12", 91500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3d449eedd3718213cee306d0dd007fccf31827c55aa2d25b3d14ca933471e53b", 95704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8f35ce22ce957eeee7bffef62f142fb7bf751169767ad5ab73cd78ba6c135821", 91496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2141bd5b98bac331831e687a2131f46a8d23093831953a533451e0081a54f6aa", 95800)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "K2D", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static k2dTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.k2d({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.k2d({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.k2d({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.k2d({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.k2d({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.k2d({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.k2d({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.k2d({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.k2d({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.k2d({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.k2d({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.k2d({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.k2d({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kadwa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b5f18ab4eefeddcf41f6246b7bdc63d6971c57ff6d628b86fc955f8eacc2e01", 216352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2355f2b7cea1ab51a7388a8586f175dbb411a58e530e26b1f86b5a62ca80faa2", 208480)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kadwa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kadwaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kadwa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kadwa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kadwa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kadwa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kadwa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kadwa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kadwa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kadwa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kadwa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kadwa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kadwa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kadwa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kadwa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kalam(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("acc410247649f3164d61952a81b88737fb56977ac409e4d5f35d960e3b13747a", 220496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("546c956074b4cd1c7d9936a82b03a712ec46df693b5a0faa80d4233f6bc17d2c", 220796), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d48470c951c546b15999abb42141211e85484cffff16ce7612d07676efb9d0d8", 223060)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kalam", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kalamTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kalam({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kalam({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kalam({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kalam({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kalam({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kalam({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kalam({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kalam({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kalam({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kalam({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kalam({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kalam({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kalam({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kameron(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("31d4c66237b8a2353dcb28cc0c0fcf347f10cb20582071c7db1e3d2820bc9d29", 39420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba1c38d9290bf8209d9ff96941f976a43f44f9bd3eee9b066349fe39d6a0eef6", 40328)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kameron", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kameronTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kameron({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kameron({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kameron({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kameron({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kameron({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kameron({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kameron({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kameron({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kameron({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kameron({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kameron({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kameron({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kameron({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kanit(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ae2534d6b4ec69c677d8c2cf336e1ba3c802e9e316c028c99a8db43ebb63f70", 91856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("07d136289c506d3788ccbfcdf9e764427270b557b1b601d925bf997d002827ff", 101028), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5a7bd784e91a9a006ec021a5f891a29ac3d867878f998bb1c2d7cdeac7dcb6b2", 91724), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4171f0d7fdb919ffe44d9fb9fcccb08610ca5646f6e1f258e62ebe1b237d40b7", 101072), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("af3df5dc97d26cade1367d07a411e2ce209ab130f0d0f22c73594f2f9488f231", 91856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("684fbd0330c7997a7aa6d6b72454ed7dbcaab91d2c54be50157988c9669ff845", 100884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7996f53043acf5b6c782024a9c21ccd0bbab714f137cba3f64a2108709df989b", 91176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9367b66fe82713a777016d80d74986e22f272688d4fa1a7aaa2e8d999d31b0d4", 100492), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("696301b8ecd45c7227d2c5ff3a308bbf701b05428b121fa43523622416c87e12", 90588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6dd4b995a1dde18512697195090fb6bee9d0f44b124e8deb55d8619204637957", 99036), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ccc6cb20ad4fe61a7cd12f4124476933985e5e8c105008bf5549dee46d671fcb", 90688), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5f81f4c0eae984a4ba6dec488b4b74c2b72db9871111ee3b595473a73be34d5b", 99316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9844297d29f6a9c9d97cfa435750cc2933cc8d47b30e9c380e080d665310aaad", 89616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("84a74264e2a1b11040aa80b859501eb498938736938cc12e1838be482ca1681f", 99564), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ac86afa00dd8b070dc0325ff6ee63daee98cd4004aacce60aab9a9f147d3151e", 90344), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0d3cf6f6f9f8952c9fbffa0fba60279f3b0fee229b846a4ff1d127732642c3c8", 99912), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("593120b5c1292664ccee5994d9936265b8372449097d70ce0cdc3737408f0c1f", 89780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("887e5a2586587398cc15672b3f3fef3e35836150f74ff4c8f80a34895effe69a", 119368)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kanit", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kanitTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kanit({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kanit({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kanit({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kanit({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kanit({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kanit({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kanit({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kanit({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kanit({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kanit({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kanit({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kanit({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kanit({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kantumruy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b1d181333c6beb8df855376481f36dcaa1e27f9c6fe7ba0c990035a73aca6686", 43484), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9b0483d5bc7f567f83bda10131a033929865349c666f585d4feaa69600a60802", 42468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6e6b33a5b9d03c7ed3f4e94d9704262ca70dc513ac1f129964f79ccddba04e06", 41952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kantumruy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kantumruyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kantumruy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kantumruy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static karla(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f59c39b7fe5470c4c19a0bd67174cb94cdbe2053382046ea00b00fbfd5008a7", 16768), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8dfdedc9371e4b6c128ba66b488cc38a94142de7a6aec5633026651dbbe7fd50", 18500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("60f1379da84423da4c84a9d3ad1a1293ce82daf3c8337c5f3d027e5e0aa892c3", 17820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("11cdf8ae7a17fbd7e9d7e2b43ced2e092b6d3a77cd2846dbf42cf3d82ffcb5e8", 18624)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Karla", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static karlaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.karla({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.karla({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.karla({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.karla({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.karla({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.karla({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.karla({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.karla({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.karla({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.karla({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.karla({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.karla({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.karla({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static karma(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3efd1dc089cbb099173fc03a8bfc22d406db0671888af830ca7137e548369989", 213140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8852b0f721a3603b10be618c6a5ad02f581025568b8db801a75130da5f0c8d48", 213320), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2701feff031a171c4d982c100c27cf15d52d5051c49481762f43eeecc4bd54bd", 212556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("932cd064de412606a66f2a06a29ed0003de9669fe26d7f1f9f3e76bfc74dbb78", 213564), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("132e41c0f90df6a2646b59a685af793e0ce62b2b64245d2db081d1ab1f6889e8", 214132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Karma", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static karmaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.karma({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.karma({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.karma({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.karma({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.karma({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.karma({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.karma({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.karma({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.karma({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.karma({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.karma({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.karma({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.karma({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static katibeh(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("16765d8ec4094a1fc5253399ebcf655c81c391de1a03f36d75059b0118e154a0", 188360)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Katibeh", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static katibehTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.katibeh({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.katibeh({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.katibeh({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.katibeh({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.katibeh({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.katibeh({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.katibeh({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.katibeh({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.katibeh({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.katibeh({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.katibeh({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.katibeh({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.katibeh({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kaushanScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a873f20587d6d9f0fc829b52f62b3d79665f806ca3062b6d5c14e6450e10c623", 138340)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KaushanScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kaushanScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kaushanScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kavivanar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("18f829fa1d200c2774144c3fcc8eb4f393a7bf7e2c8e3d95ecf831dd96e498ae", 66336)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kavivanar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kavivanarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kavivanar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kavivanar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kavoon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2c2328be5a827d790cddbe56db46b1c94043f473e5d01286be1567e454a4038d", 52288)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kavoon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kavoonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kavoon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kavoon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kavoon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kavoon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kavoon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kavoon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kavoon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kavoon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kavoon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kavoon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kavoon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kavoon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kavoon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kdamThmor(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9fc30fa8d328331e5132a7c7bf04cc803ada727681101c00dce2c9e84732f191", 56332)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KdamThmor", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kdamThmorTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kdamThmor({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static keaniaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("39c288c7a1580666e2ebb839a9df6cfb69104742879e8e61900550b02a4f9fb8", 38764)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KeaniaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static keaniaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.keaniaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kellySlab(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0e2083c69e8813f4eaba66f9dbe4960cd23ce5e098577997c4a3ae8d09c15c31", 77792)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KellySlab", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kellySlabTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kellySlab({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kellySlab({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kenia(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("504cbb4c7a6888c5333bff718cde206f914f047b6247076cd4033f6457a2a9a6", 39060)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kenia", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static keniaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kenia({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kenia({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kenia({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kenia({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kenia({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kenia({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kenia({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kenia({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kenia({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kenia({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kenia({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kenia({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kenia({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static khand(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7cd4683a916646dd278fb0eb4426f6826ca4f0cc92ce083de087f2287fb11f98", 168560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("325e1b6938310cd0385a917b47fcadabece70ea8fa6356a276e20fb171d57af5", 168592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6dd2785eedd866d3f7e329ad7264d66157ec7a40ef41d48aab098287b5a8863d", 167652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2471269ec4d3228c379da2bc6e54db78b4c7b315613d0cd1e639539c7d92d75d", 167892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("609dc9682e1321a8db6ab6a4caeffe07395b8517327ee5ce936b365e586fb402", 167440)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Khand", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static khandTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.khand({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.khand({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.khand({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.khand({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.khand({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.khand({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.khand({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.khand({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.khand({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.khand({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.khand({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.khand({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.khand({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static khula(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("565c281fe5c11e451834dd30eda6e6d94a41c1a9c186c175541aa8ddef492d4f", 103456), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("743e9de20b77192c80fd43452b591fcc85ef36aa1dd7746171503962b5687046", 101668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("af7d4733894aa875443cf8921445981662df9f4f3ee13e8cc151dee7c9ca5dde", 101652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8536c085e0c982334e632c44c763535658fd643b50254fb20784b8f377a6231", 101984), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("976ee869557699be72a4b83bbb3362cc7be7de27930b5b671210b69063a49d2f", 103132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Khula", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static khulaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.khula({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.khula({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.khula({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.khula({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.khula({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.khula({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.khula({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.khula({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.khula({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.khula({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.khula({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.khula({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.khula({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kirangHaerang(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("419ae98f0574b7c2a5b81ce99a859d0db9335d7be00145712bad1d7d8881abb1", 3554608)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KirangHaerang", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kirangHaerangTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kirangHaerang({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kiteOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("34684b654cf048f7030568588f753ee06c120f4d68ba9426e47995af21a6aa8b", 37560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KiteOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kiteOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kiteOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kiteOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static knewave(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c3a13f54f0f82d09a1c116c40d693c4e9a6212437c8602f91acb88a205ea9fdc", 32412)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Knewave", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static knewaveTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.knewave({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.knewave({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.knewave({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.knewave({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.knewave({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.knewave({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.knewave({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.knewave({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.knewave({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.knewave({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.knewave({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.knewave({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.knewave({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static koHo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b4addbdb3d0cadc2f6c0149b90b29c059dc7f2be08d0b28292acb880db45124", 86716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("73dd6271884581477beeb0860878fd6b524f3e880cc020295c24e2bf1d41a70c", 90908), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("676e89293e4714a1c63fdd477c5dc88950461834031e2ea0437e65b31fc5a03a", 86412), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5c2ce20516635678f4f67581782cd3c0429b8cf361e732c24021bc1711fc609e", 90612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8128e00cc778e37cc7db7f518f22ca833399d8c4bdfac07fd1fd063435ba658", 86204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3225382b5d36a6963f8d1cc5fb60086a657ecb39882bab5259eda483f292af57", 90532), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("90a011adf31d93ee90f5e105dd20a7a69e7de53626672d10449e9bced87b5916", 85892), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cd0a466ebee7135ca6790a7908264c0457b65dbd9c927ec7082f43827d45f5d4", 90208), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7cf86562498ddfbbaa3a3b5d46e848407702a925472a4a3e76ab1ef1a7949106", 85700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cd527fcf4a07b728233b2d93e0ef12477bf9988918e604f16fd823a15a2c3639", 89800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c059ce850125c2f3bec60528a808fea56f6191b9b9bac380a4a38da9d2f42bfa", 85128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("16a471d3f9b251d19034945ede1cd8c304c08caba74db67fc08e01556ec0e3b4", 88844)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KoHo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static koHoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.koHo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.koHo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.koHo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.koHo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.koHo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.koHo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.koHo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.koHo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.koHo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.koHo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.koHo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.koHo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.koHo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kodchasan(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2edcba243e7c1435577d6a15a666013f9b4f4db824a08ac150024e2000e4b7de", 95536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6dabeb02077bcb1ee80b8aa519c66632dc2429a3cd60c6cabd5f91154288b103", 99884), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6eb43574315a2c2b393aa7ca05550b9b578bddd384857e454e5fbe82b515bfea", 96716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fb557cb4f6efc30f933535fb5248e6730fbdcd42302a4b7ee4a58357d71aa0a9", 100924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eeae77f326fa242ac959bdcb27637f93f6ca476033b7d1e36f106cd40c510317", 96988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ec040aba86add77fe833d612e33ecb85ef59b26b83c92a86771db7e3f11a8f55", 101700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25d7924da481a4595e389025f7a5d21b4bdcc49e7e9766bcdb939f3fe48a3f11", 97288), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("86198a3feb862a0d1abbba874238ef724e7f0e39221baf31690c24d363b75c52", 102088), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa4d9b59366b50f70d33afeb164cee9a13230055602bfdd410ceba9ec9c94132", 97376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bcc4ef0fab22eb3e1e2ef611c53721b1d133ddc5ae972a8e978c4b8024b6aa30", 102560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7df1e9c701a40ce05b3d8a4189480e045deff521a283218f2094f2cbbc434e17", 97212), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("37e6fe167fcb53ce25beebb7983c99d3fb3831d1891cb10d36bdffdcc9bef707", 102668)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kodchasan", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kodchasanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kodchasan({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kodchasan({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kosugi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("100d52cf4a5ea4cf706199b6573e20b6963747dbf39a6fa2bd5eace488da7cfa", 1918404)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kosugi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kosugiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kosugi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kosugi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kosugi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kosugi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kosugi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kosugi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kosugi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kosugi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kosugi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kosugi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kosugi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kosugi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kosugi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kosugiMaru(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9fbe25d62fc496dd41c965a6a410bcb248978277da1dedd4682e2b1d72c4ade9", 2558132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KosugiMaru", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kosugiMaruTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kosugiMaru({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kottaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0d0a0a70c6c66af4f55948fe817266bdb57b4ac8de0a0fe31f41350ccb139a41", 36576)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KottaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kottaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kottaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kottaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kranky(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6ede337ff9d5b44d7958a35407098749494ddd69efd07cad00c906439794d962", 198904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kranky", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static krankyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kranky({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kranky({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kranky({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kranky({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kranky({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kranky({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kranky({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kranky({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kranky({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kranky({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kranky({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kranky({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kranky({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kreon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("988fb49f563aec3452b26437e4cef99cd52bf368c5fb6c30e7b9e1419e4a3723", 37016), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("95de76c3d8f95714fbfda4a89b6cf0b74a4285d9d0f81908cbd91c7146109d83", 36852), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9d9092c90a6173026afefda0a94456688b33166363b733d8d42200e68837b012", 37648)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kreon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kreonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kreon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kreon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kreon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kreon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kreon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kreon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kreon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kreon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kreon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kreon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kreon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kreon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kreon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kristi(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6769ae6a5019b65b4c320170421385429bc0ab627affdc0b481ad8b7f7e2814b", 26988)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kristi", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kristiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kristi({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kristi({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kristi({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kristi({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kristi({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kristi({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kristi({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kristi({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kristi({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kristi({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kristi({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kristi({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kristi({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kronaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c3051123d5b341e07e0a0c83f46022f8c16edd2373a7405e1857ddbf3ac95132", 35168)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KronaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kronaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kronaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kronaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static krub(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e99da9729e8beb706a3f7dd95ff2b13b7e33f89ceabaf9f2330e61896b93fa39", 81664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("63f21c0600aea197624e3d1c2e40daafe5eabdfd3f3b604ef5a0240158275df3", 84648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c051f20fb436fad0503f887fa3835d2787be9ae5fbe5be539dc1532d24f8df2f", 81100), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e7745d1a884ad74618766af351077c4625adf1e3ba22d4d86f3aa7cf49306b98", 83988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d0e841ab6bf1b00cdeb73777db2ee1a1cfa53adda512b49fbd12511e8fd15169", 80988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9e23fec650c8fabcf0ecb628c198acb3c2a8cc928f9ab5814f5eafa81c9ceeaa", 84040), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2964f338dadae9da331e3cb292ca6fa5a8fe4eb8267fc4846b40115fbb645f2b", 80900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("defa6560ee637da7a34fda9c66033c4a5465e3bc8b92a02da190b58dfdd71ad6", 83856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6f875531446bca4ea9d68ff550096ba0371fb5c0b8fa84667d9de385848b424e", 80800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("af1dcba5de7428e1ddd0d849ddffc16f048518210fefe8a98bf21ff22234b3f1", 83792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("066231a170b822e951eb201a38fd17e6a13d82773be17af5e9b184928e32c6c7", 80756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bb202066513c0b7b93b2e8552d17feeaf2580daa45fdf8e88f3e98205ca2342e", 83796)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Krub", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static krubTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.krub({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.krub({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.krub({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.krub({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.krub({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.krub({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.krub({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.krub({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.krub({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.krub({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.krub({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.krub({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.krub({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kulimPark(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("840c4d3989e45ba899e1b3d09646ca3f9bef766fb66b167c5ea95b0726f44a0b", 42840), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8737e36ff5a77edc8d6596fcaa803b3cf72b11b077e0b7b0397fa81c2f03dd31", 44900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5f528827be704c4d4f91d75915cedac8ff4754733bcac2e61e48bdac1e6752eb", 43988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("62e148954a2bd0e9e8c26272bfc3eedaaeecdf3a318ade20223eb51d2b83abdb", 45800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d2dc8ced6a590e1bfbabfeaf4b27a7366fccc572cfee1fe459f22618ab3f1e58", 43976), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d3d40eaa8f0ae675fa6895c58f65a5c082236f54ee433a53963584e3f308f7c8", 45616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cea3878ffef1244f27d1495beb506d10f3206d59da7d09f737ac355fde66784e", 43876), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("62a7e064a37929edd5a709ff870cd8bafcf530cd6439f26277ab061d4128a8ad", 45616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("23e77b347e0afbacac1a4ba530b6fc6e0a7e166bd3edf29bdc414dd6497b806d", 43444), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("baa22986aa8baf32baf6fbbd27e630ee792aac59cbf10df4701f9cd85d3232cd", 45424)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KulimPark", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kulimParkTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kulimPark({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kulimPark({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kumarOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7aa5fb44eb6e2f7f5a30bf8ae90da684a6d448b161974422dee1109dcdb3cab", 94132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KumarOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kumarOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kumarOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kumarOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kumarOneOutline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b69d95adfdc90ffb8852e1828c7d227219b5374737613f23a88cfbb02439e915", 127824)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "KumarOneOutline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kumarOneOutlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kumarOneOutline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static kurale(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dfcb85ac1c2a3ca188df6595b0099ece1a830475577e1897d491f575e6746e56", 164312)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Kurale", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static kuraleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.kurale({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.kurale({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.kurale({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.kurale({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.kurale({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.kurale({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.kurale({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.kurale({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.kurale({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.kurale({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.kurale({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.kurale({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.kurale({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static laBelleAurore(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("604ab650c1e1ab2e45459ba2bc1302e120467025e2f3a9946978bb7e7e0d03a3", 58692)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LaBelleAurore", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static laBelleAuroreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.laBelleAurore({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lacquer(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d33d0518b8cf4ae8d6149c8bc8e7e19ced4124d6b80d47934fd4e7897cda55a", 203048)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lacquer", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lacquerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lacquer({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lacquer({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lacquer({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lacquer({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lacquer({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lacquer({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lacquer({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lacquer({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lacquer({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lacquer({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lacquer({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lacquer({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lacquer({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static laila(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8aac335fe109f453ca82438785143a3d54ca6b5860f929a066015b366dd23603", 203036), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba573905733e8e1ec12baa194825add1cb80997c3c08b032d6439d524eef298a", 203952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("445309cf766b79874168d66f2dc2f5eb067c865989ed496a8e2389411de9e18b", 202320), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f393a4935161c1ac8a55a20d2a1107e698de003ace696ae5c6db50c7bf8c0781", 202264), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a2cfeefaeb650171ed23e31b4fe85b7c5b8605f36e351821ffd3a351aeec6c17", 201144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Laila", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lailaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.laila({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.laila({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.laila({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.laila({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.laila({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.laila({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.laila({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.laila({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.laila({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.laila({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.laila({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.laila({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.laila({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lakkiReddy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7517025d73568d9d811b25e8c5ef20a9f9d94bb816d4f334668f3c2d2830d079", 379840)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LakkiReddy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lakkiReddyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lakkiReddy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lalezar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4fb2ddb0068e2bc905effaccf71a86ff357486d6a30804cd2e1a8109d0f165fc", 190024)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lalezar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lalezarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lalezar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lalezar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lalezar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lalezar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lalezar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lalezar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lalezar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lalezar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lalezar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lalezar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lalezar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lalezar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lalezar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lancelot(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a717264fe5246a5aae3c8706eb7368a7a36008880de093d205dadca67f8cfc97", 30668)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lancelot", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lancelotTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lancelot({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lancelot({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lancelot({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lancelot({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lancelot({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lancelot({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lancelot({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lancelot({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lancelot({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lancelot({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lancelot({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lancelot({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lancelot({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lateef(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("db6ed59fb822daefac366cd24ad8a0d2b7d9bf35e1ea45490ab50b3f50b0de88", 172748)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lateef", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lateefTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lateef({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lateef({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lateef({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lateef({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lateef({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lateef({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lateef({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lateef({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lateef({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lateef({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lateef({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lateef({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lateef({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lato(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e734a39ad0b4a1dffd327f552cce678e867791007200be49b6a93a6c7c71b27", 83268), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("00d4076b836620336e608f16588994045e53f8aca14d9e430205db56649a8a55", 78920), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9b25850654f3dd59daf526a3d63dcca1c435e231c9fa2dd949ccde9cea994366", 80608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4cf23877950718d8775e526ee06380072a1bba6692d47bb5fb623fefb650b74b", 79388), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a649aaf21573a59079c46db19314fd95648f531e610fa932101f2705616b2882", 80676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("484dd58cc095656f129f756067ede55183de20d70a6260c22ac747ed583672d6", 79376), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("407592da08cb1f6060fbc69262ad33edd0b61ec9160521455eca8f726bbd4353", 84716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6449b474d050304983a9431099406936e7f6978e22025a4a5ff8533871529bba", 79536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("abae7ec6de16f8108f1a3e1e3dc9edf11c5903ab89b3513821f4e079a51ae175", 81116), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("60407472b091a98e26c61f47900329eb3f971651fa76edc26d9f32f87e27f13f", 76532)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lato", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static latoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lato({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lato({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lato({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lato({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lato({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lato({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lato({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lato({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lato({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lato({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lato({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lato({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lato({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static leagueScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ffa526d6dea17c40fade9bfb691be36a5db63e9da4a760462b7df5dce51f4e51", 51724)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LeagueScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static leagueScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.leagueScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.leagueScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static leckerliOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4f4b119a522d79aaa310d37682ccbfd758366df5ab6009b1bd0ff022a5405a5f", 43164)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LeckerliOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static leckerliOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.leckerliOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ledger(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3d3e17668a2b5762ca671d8a2496ba50de6e3896eaada54fa3f74ad82f0daf43", 62272)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Ledger", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ledgerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ledger({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ledger({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ledger({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ledger({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ledger({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ledger({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ledger({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ledger({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ledger({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ledger({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ledger({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ledger({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ledger({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lekton(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("919f93dff330901c348455426b31bc6ad6270b29b4527387ab2f16ae1a8b1b37", 114272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5bdc665e2f574f3cde6b0db13ba296956f6736f4277decf03a015151ca063072", 34164), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("34d7bf522a1cd2ddb84bd57082d9651c5155029004a5a66c713dec61c865ab08", 113636)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lekton", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lektonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lekton({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lekton({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lekton({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lekton({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lekton({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lekton({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lekton({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lekton({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lekton({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lekton({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lekton({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lekton({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lekton({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lemon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("512e0e1aeb4008ca5b6b9a325a936751f306ba97d1a480fe76da5adfc1f404c8", 34600)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lemon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lemonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lemon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lemon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lemon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lemon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lemon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lemon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lemon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lemon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lemon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lemon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lemon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lemon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lemon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lemonada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cd1018b5355f76f3e9ff9d859172bbccef3a0e0bb0b6956ed913a2edba4e9673", 101408), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6c9760a51ed4b78cf2a172836b2cbc10f540963fdcaf88ef76d10cd4559ee07e", 101664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b17674113757a97537383dc22f4c28496ce5d1fc8274386430fd9d602216a6a7", 101480), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9f8159cd531775a6fab18432a618771064672ca7a1c6c7db49780d18de0d87d0", 101300)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lemonada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lemonadaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lemonada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lemonada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lemonada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lemonada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lemonada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lemonada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lemonada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lemonada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lemonada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lemonada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lemonada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lemonada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lemonada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendDeca(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8189083bf427d48fec9a74c5fc413be97f92e3b7533eb6682832054fc561e6a4", 65388)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendDeca", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendDecaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendDeca({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendExa(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fb84184cbd1e9470db5355e5c25309509f5f98bf0676304b47958907ba6f7e12", 65876)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendExa", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendExaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendExa({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendExa({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendGiga(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1239824b7d568f46db623f61bf9aa0fc21275920dbb5861fdd9d57f132aec548", 65932)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendGiga", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendGigaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendGiga({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendMega(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2a632f61e3b47867cf774fb3d70ed1a0007cf19ae44be394ea6b878c35648111", 65940)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendMega", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendMegaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendMega({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendMega({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendPeta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("417f097595c2e66cb6c0ddc8f6add4e4f493b24f53527848dc0d03462e133fd5", 66008)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendPeta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendPetaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendPeta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendTera(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5d4d1da38f1fe26a0b69152ff29cb43aa95028fdd9ceda04924ee0236771e324", 66040)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendTera", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendTeraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendTera({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendTera({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lexendZetta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e6de0f389e45c6725bfc8b444ce22b404d8ef5f4649f41b979fdf5cb1125dfd1", 65904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LexendZetta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lexendZettaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lexendZetta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode128(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a60bde92bb99e259f050c9d55ccd67ee6844aacf2e4af2b0e58f75109406ae95", 11724)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode128", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode128TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode128({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode128Text(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f4129dbbda4ac792c69c162a644275345c7a08c7619a041d31702eca3b14b308", 23364)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode128Text", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode128TextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode128Text({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode39(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a605309329470cf91b7f9343b36bcc438da6738fec78fce2ac7a62acf989e1c1", 7248)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode39", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode39TextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode39({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode39Extended(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("edfdd0513a19347cac4818ed891b4a30a77b1e694da00c3a0e6a1cb397e33c77", 9912)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode39Extended", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode39ExtendedTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode39Extended({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode39ExtendedText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d1a436e9eac25119a1f5a775ca357a2bceb9bd198386f7c5ea1d29e70aa83257", 21148)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode39ExtendedText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode39ExtendedTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode39ExtendedText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBarcode39Text(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ee70d574bc973714d8a7d914d0647a5125c638ce6a1f231fae84020e61b2576e", 12448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBarcode39Text", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBarcode39TextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBarcode39Text({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreBaskerville(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9823638a0177e6fb752280379b200fdaa407e687c8c8e2e7f67bb73b6098f478", 101356), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("47c63ebb507fc5ce683210642c5b0529745a907c2a98ca886eef85e798558b3b", 121336), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e4f9416f4d8d90e78dc3993de94575a0c44a72da6b4216e5f6346cfee242d201", 101584)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreBaskerville", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreBaskervilleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreBaskerville({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreCaslonDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c30a6ef1396c17e855a72b95f2848b064fceedce5de3bc974c99f5a75c48148f", 63388)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreCaslonDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreCaslonDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreCaslonDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreCaslonText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf61a45047b0948452918933bf02a0c550f66b703720c33a588f9d912c930525", 58628), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9127e87ed024695b4753bfa734aa694e4e7ca57ec318f8e69856ba19b8bbd8d6", 64300), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b9e7454ac79e153edca85178361ae1f5f7e9de7ade1e87c1bc514bdbd0baa5a", 58284)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreCaslonText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreCaslonTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreCaslonText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static libreFranklin(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a1f21b9a28ecb3d6ea935dfde51aee05540140c3a25253b0641b9444dda667c1", 57732), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("09e958f9da1c899ed89026561f56a7c052b9408db021ae9a897f9247aad44039", 61308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("97dcc6cedbef15bad22ec4941bcf10ede26cae6bbf0844281f0935c77e475130", 59320), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d7ed8c62c5358fda45d46e54541af5e0e8397f71242f11a485c04dc39a11218d", 63088), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("948626a8cfb11d7e06c5fafa6b5e1c4fa4be5db5351c6a223f2ca782b9795798", 59124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("34e2e0606ed438b0a6d4debccf0e4c6db3db50b9963425c4f53fa58c91e75aae", 63500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d81c9f4f52bd37777bfda74e64a609d354ef7ccbae5ccc54d946e46d0355ce5d", 59384), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a6f8c531931908db5a4f8c02ab8f7bb923b97ba2db982c240715f93114bcd958", 63856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("05ef5f27b97c4867b996bc39496419b7ece8741ac22d6eefe59e893a9a499089", 59800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("92e317ea35eba4231dde4a6c824a53ccfa8c615e10e8ecc6cae2d148cdff6b49", 64444), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b31f2f6914b461a54f80a39780a73cfc0e9fdb98c0025558fc780865881f4379", 59952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("51e7bd4a4cc8faf0e20e3a2f9ee81132e7a586a1cd64c19fa34654b505fd56ec", 64912), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("df03d679c9dba10b0ec29c9d44006aba2dd476ae7c3886c4b3e713665ca443fe", 60492), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a6883fda2b8a258fd408d8655880863ebf75e8eb0c22afc895f6e7f60d955d6c", 65272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("09d37126271e3ab9282776debe97a4652875fb69f4d98f773a1b6b8d37256299", 61056), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1a059fcf7d8cb61a71e33599611f5f014c20d34592f0ce2d4afb7ce9e3dfbbd8", 65812), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("41ab0fe0ad9c37f298d693d6b8e4c5f3cef041ad27ed08c25ee44af8653ee501", 61128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("136f29fe980b3eaed9bf88c730b2383f963681429fc8d55de10ce71392487a12", 65916)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LibreFranklin", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static libreFranklinTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.libreFranklin({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lifeSavers(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("04d39ceac525bd7119947e50ca506cd62efc8803e38347a7b1d07e401463bcee", 136132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("362b7da392f70200e34ca8d939a7739b45fdd4cb54b9aee41f6a1db39d13a08b", 109788)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LifeSavers", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lifeSaversTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lifeSavers({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lilitaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9bec8798e040c1fbce51e8a057cea3e28ed1d6af1f649b2abec2cba17eb20016", 28044)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LilitaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lilitaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lilitaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lilyScriptOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e8c1fa639d81f625fc5e1f8d3e2988ea5a29d0a6b0a0b6b6a617ee21af28ffc6", 37524)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LilyScriptOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lilyScriptOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lilyScriptOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static limelight(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba79f57019c587202d831e35a7e10e6dc9ab23546f46ec9da01aa4d25d509913", 63860)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Limelight", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static limelightTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.limelight({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.limelight({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.limelight({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.limelight({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.limelight({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.limelight({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.limelight({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.limelight({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.limelight({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.limelight({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.limelight({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.limelight({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.limelight({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lindenHill(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f32a2438962995a6cced863561c2653cdbd06a951ca2497da2a9275d3fb83fcb", 124796), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("312de55c585397a60a43de01015efb512a794ffb875c4edd86fcb2e8af39db39", 94492)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LindenHill", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lindenHillTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lindenHill({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lindenHill({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static literata(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f994a4c14415cfac63df0a88d12df379634376d190047a3aac8c1ccac859181b", 136204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1011ff34c164167eb8c8e3cca7b775188431d8992affa5794a30375c51b6d938", 136324), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("497b001be8a26d6015abe84fe17796af4a7dc95f03ad846ec89f4a5555f9f588", 136392), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("438f5478b62d5696ec3eb207a5421131200429183907d6e3b4beb353b7169c6c", 136280), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fbac7c28db9313dc90a0f798d878fbe937ab215b86a35aef428cbba8f8fa8594", 130704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4842145089ec9a11f9e11c7ebcfba39e857c3b88315313402619eb2a34bda353", 130820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("49a0d45ea7e35b031a48ab51d25b49734acf802145bcb84f0870c6629241d148", 130820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b5feaa5aa4ea544737c3a07671e847a9c6664d791d284ccd3866fe24d45f2927", 130680)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Literata", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static literataTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.literata({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.literata({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.literata({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.literata({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.literata({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.literata({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.literata({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.literata({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.literata({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.literata({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.literata({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.literata({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.literata({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static liuJianMaoCao(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b88821c3a72f98bbab2428a3b3f4a51c2f0eba1644fd8877d195afdf32143cdd", 4937244)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LiuJianMaoCao", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static liuJianMaoCaoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.liuJianMaoCao({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static livvic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("69cf7d68bd7ea7e4f1eea68a6ce1241109949e773f7342713cc8394cfc3a9350", 75488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bac5d8a0627f56ade7281b777b0753a1e5c0d8954b749c43c474cef3987fabb3", 76756), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4339e04cdaa30779650ab9cd08a8e6208806c5d3e61ae9934286f6a0fb3045e2", 75700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1e90ead4569f3a9562d934ed81529f5b9f77d31c3f3fb04d0761808cc8121c00", 77044), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1d4d9954fddbfe812dc3f05be50de4c32cc79db0ac03c061be82e347885a0d16", 75612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("56eb0ced8438e313f473ed5c0d4ee2b2a14fd14f795e437c8fe91da30d6bfa87", 77080), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("684c0977078ce7a0aa4baca696a867093d47a8b698ac6524e6cba0262e63cc57", 75488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ed0c728d0a90d1b99fd01bfbc0371e526ddad2ea79d269182c60cd5bb8241393", 77004), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c9399fe200dc52728dd923fc8ef5e8f2566eaa599bfcc903102b49126535701f", 75736), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eebd5e2f0a3762de32ae06a0aecd96d94322b7e078bc768455d63e202a74411f", 77136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("38ef1c46a21565d37981213d2daba4d8f216e1f0f25972c1003069f2c05df6d1", 75880), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4c557b68961f711648417be8fe965f0ee26452f0b78ade0beda7fdfa4a13b939", 77048), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("87b0c42cfd0f29daea2867b06adda2fdf978a1c565072fc54ba65774ef420c1e", 75936), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5431f875e19403b74700eaecfee54e157b5661d8a1fb32712bee2165274e7b03", 77016), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4a61243d45e4b7c886a8af1be0488f4cd259518fea160b655891a491dc90bd01", 76060), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("541bf67ff4d9b5b56c9d47e30220519bc5d38c2ca202037bf673fba3fe3a8b77", 77112)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Livvic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static livvicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.livvic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.livvic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.livvic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.livvic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.livvic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.livvic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.livvic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.livvic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.livvic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.livvic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.livvic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.livvic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.livvic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lobster(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ce455bfe5094ab723cf0b59871eb112f9f9acbe6d58811590b3d22a7236fa435", 257344)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lobster", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lobsterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lobster({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lobster({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lobster({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lobster({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lobster({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lobster({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lobster({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lobster({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lobster({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lobster({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lobster({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lobster({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lobster({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lobsterTwo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0c7a1501aa183946996d6a6dd00639131356d161f596511cf06339053570e634", 108456), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c0dbd5c04e410d8e4da9017651e742b0e62adac50ae9b77ad22cf0407e27e211", 111476), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("510f984a2bfaf23d533e8c389063fe40f2e0d02c2d16889ff79e565345b3aaa5", 106956), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("37a829bca6d8cab14c9768897a1dafc7fcc08b7b459ba3bd2a2e0dac406eead9", 110608)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LobsterTwo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lobsterTwoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lobsterTwo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static londrinaOutline(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f2c1c90df8f0b2111b8b45fe4112b8016fcde0874de248c3bd10e4f63da86e57", 79572)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LondrinaOutline", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static londrinaOutlineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.londrinaOutline({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static londrinaShadow(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("84cd8dae1b878c823a1c39d7d9e9893bae747ef212a4a917ab537193b2399287", 85464)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LondrinaShadow", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static londrinaShadowTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.londrinaShadow({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static londrinaSketch(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f0bd303136aee90e673136b6266fb6b196cc94ef0966d955269deffaecbffacc", 172392)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LondrinaSketch", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static londrinaSketchTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.londrinaSketch({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static londrinaSolid(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("85115a63ada513540474540a077cb696b1e089220014e3496bbb17c6d81ae8af", 51980)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LondrinaSolid", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static londrinaSolidTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.londrinaSolid({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static longCang(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("abadf560e9284e557329d5cac93ab26b805d175ed1d48da30b843ac4c21623a2", 5150448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LongCang", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static longCangTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.longCang({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.longCang({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.longCang({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.longCang({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.longCang({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.longCang({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.longCang({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.longCang({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.longCang({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.longCang({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.longCang({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.longCang({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.longCang({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lora(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ab4a36d4eeabba7b21d6d9f9cf3402c3cfc28c64a4fb06cb6c424de03a8c98b9", 116620), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5bda244cfbcaf07666bfff144e4e1e5809f93966fa537d9ba1a29fcfd7e0ebb5", 127672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aada77cdac3a872737be48f8c95b39befadbb124e16cc8b8e5076dd429400ea1", 114072), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b8238541d0dfa01767e098baf5d7942885a58372a7b97e09d2af15e9d295f2f2", 118464)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lora", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static loraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lora({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lora({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lora({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lora({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lora({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lora({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lora({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lora({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lora({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lora({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lora({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lora({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lora({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static loveYaLikeASister(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d7068a0e071e73ae0e18893c97cb33a901b4cd1482fed4150d017e6ac0f7a636", 271876)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LoveYaLikeASister", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static loveYaLikeASisterTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.loveYaLikeASister({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lovedByTheKing(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a37e323dc32cf1679842583e8ac1cf460c0cbf68f0367394bb943ad1f662a77b", 27432)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LovedbytheKing", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lovedByTheKingTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lovedByTheKing({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static loversQuarrel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2b3afd5d2a24b3641cc9053301da4dd11e595d360d1f052a9527036e96ab00e9", 61824)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LoversQuarrel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static loversQuarrelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.loversQuarrel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static luckiestGuy(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6a9e5eaeb4d4b04aa5e82f16dabc4206d86d2981ac19d033b535be88d1a773e7", 72952)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "LuckiestGuy", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static luckiestGuyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.luckiestGuy({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lusitana(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c6df963163bf20f6d3c7e20307b4e363715e13d9047b5707caa9407e11af4ebb", 30140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f5505e39683b141ee21482fcfc3818a5bb6f049abf15928c81caac05296eba18", 29236)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lusitana", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lusitanaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lusitana({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lusitana({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lusitana({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lusitana({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lusitana({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lusitana({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lusitana({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lusitana({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lusitana({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lusitana({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lusitana({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lusitana({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lusitana({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static lustria(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ba208c56243ec0aa08c1b911132f8649f5d87f93a699d115fbb59cf02e5bd636", 37352)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Lustria", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static lustriaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.lustria({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.lustria({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.lustria({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.lustria({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.lustria({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.lustria({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.lustria({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.lustria({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.lustria({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.lustria({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.lustria({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.lustria({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.lustria({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mPlus1p(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0654233f2cc095bd1af48724031070c0b16e3dd46fc5c29bd87070d485b7a366", 1766584), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("328d60a811d0715a23a96805dda2004f69c4b0a888dc1711c77a2d589650c97f", 1762104), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6d33f3ea856c224db5e2d573ab252d85cc66e3d2ec9981d4dded4cb5df17a345", 1753640), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("45129fd4450f7465b6ad68ee3a7f2579df75712cdedec1690b2f2b8e2a008400", 1753792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("42106dfc33cc933616115e3c69191bc75d0675df68106571eedbe23c14b5ad1f", 1761472), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("27bd65580cfc4564b1dc3ee85e12bdc336861dc586fd838a943bdef4a3bd8730", 1768720), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("21baffc573a6103dcd6c23b9ad751e3686f142c921212717fa3b4356e01a38bc", 1769116)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MPLUS1p", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mPlus1pTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mPlus1p({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mPlusRounded1c(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6d028025ec621f30d69f25f3b121f0eb6e4678e96d47f16d760f1fcf59248d2c", 2899200), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8e6655c0fc1e40abbfe6631bef1b71cf55ed1f706c0d130fa9fc82cfb1a644c7", 3284736), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ff70cb1f3f4fe4691c6ec7c7725c4a0aa37e2d1fa2704d659c9efcd304a6bb24", 3379736), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a6066483cf3c5b68c17d69a4a957e9a50dbe366ac10cbf88a9f3776744ec5048", 3422384), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c9070409f93c9e7a46a302d0205de1c15bdde3b59f65c32ff73315592afaf17e", 3532232), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a7b92c0902d7c3f543a4ecc04c44c8cf62f26c4bcc92ecb26e40ef9849277e61", 3617848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cadad2376795cd1bcdaae984a16f1fef7e2f18ca27fd2493f32f620867a1ef05", 3624724)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MPLUSRounded1c", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mPlusRounded1cTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mPlusRounded1c({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static maShanZheng(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b09c8b63681f2770158618c3110f15aa53948e2ef43d7bcbee34cfe43cdfa646", 5855516)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MaShanZheng", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static maShanZhengTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.maShanZheng({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static macondo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ecbf710a53864dd6307e2422a043a2a6904563df10226e7278fea2ef2d293dbd", 48728)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Macondo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static macondoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.macondo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.macondo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.macondo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.macondo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.macondo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.macondo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.macondo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.macondo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.macondo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.macondo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.macondo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.macondo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.macondo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static macondoSwashCaps(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4143af0ceceb156b80e5e2055d178d84cfca13b39056f49121b05c6b3843f1fd", 32968)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MacondoSwashCaps", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static macondoSwashCapsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.macondoSwashCaps({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e8f4edc7b74697883d4382000502d7429481f7ccc59b65ac62c28e99481cbc3", 40552), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4987425fde45e8da45ede3fad409b0ac00e32ca0255a60b44b8e1f701764346c", 40352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9e3c24ab83037a6d4fc5b72d068caaa6a0767414bd20d7defe31c562ced6d6e7", 40316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c3e70bf71ab0557ddd82906726c36d89e199792db1997040b1599f61e00acd78", 40136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("052e0e0f174e9e8ff63bf2a85f70db6cc59d3391a016a31ace8e20c49d0fa0d6", 40004), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b94e1f9c917ae40e5e6b8d95fe24de1817e37942aafb9b9310d5e0d4b049221a", 39924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7746a4ca1c6767a971c0db31ec18594fa5211adcc318e293d27b55efc36bded9", 40036)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static madaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static magra(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9af41cbbd0f37a100cfb6828248fbfbac10111faefb7b379eb4d74092ebd2f8b", 45488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ab81d03efbb8cfb766cdee7ef1e7333d196769ab264426971367541a4feee673", 44452)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Magra", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static magraTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.magra({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.magra({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.magra({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.magra({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.magra({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.magra({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.magra({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.magra({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.magra({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.magra({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.magra({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.magra({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.magra({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static maidenOrange(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f4952dcb36962c7d3f35f54be08eb204ab4600cfc9afad59f213d36b5ff5e8e6", 60316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MaidenOrange", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static maidenOrangeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.maidenOrange({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static maitree(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0739208db7083eb1320ec06ca68d5399840b972ed04401c338c373289f55ea74", 123008), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("19f05ca05c789289a2d8b35a68f7d2eb186a1bdbb47ff7d630f96485b8d06f67", 120308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("acbe712e2f0c98c52be38409f5b250521e6124b9af003a579b4c94e4e1ad0f49", 121608), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("40f80d32ae82b7f67fe5a2ba972ccaecdf4b1cafee213b04baf2deb885eaf0a5", 123172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa9e3fc69089c2a19cf33871b62432a04f1b7d8bbb7faa0150665802ed267f0e", 124716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0dd3d4080658f7cdb11b91c35ec62b8ff94caac9d5808f03343f66556b2f0ed9", 126316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Maitree", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static maitreeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.maitree({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.maitree({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.maitree({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.maitree({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.maitree({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.maitree({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.maitree({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.maitree({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.maitree({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.maitree({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.maitree({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.maitree({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.maitree({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static majorMonoDisplay(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9901077f5681d4ec7e01e0ebe4bd61ba47669c64a7aedea472cd94fe1175751b", 73196)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MajorMonoDisplay", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static majorMonoDisplayTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.majorMonoDisplay({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mako(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("db4609e335050755bb95ce1a179f4666e1a93d3fac9c679e99d96b472582d0a1", 64280)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mako", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static makoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mako({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mako({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mako({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mako({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mako({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mako({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mako({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mako({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mako({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mako({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mako({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mako({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mako({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mali(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e492669e95f03389c8fdab60ebc0fc25dc89f921dfa3b4156ed4ee3556b26a22", 104192), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9c4049d3990bfb82d515b0f6b44c0669352cf1d4f0ad71a6c39c4d800d91afc5", 107084), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7ea3a4d356e5cb938ea97489c60b148dd2e33b9bdc641f01c245b965a8028725", 104400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4aec4ec351696e4bc5a49deed841e02a84880d0fdc72dafdedce7154770dd8d0", 107256), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cc1fb36bca8387ebe3fdb1a9052a01ed8312a51a3ac265b51d93b7a6bf6ae45c", 104480), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("575418ad9604b624f1d09cbaa0d15edbdec2653423419c83fae61131d0f0fdc5", 107544), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("56baed7152d5e08635cc8a9e3a241afd0e7659f30374cb82033266959d273382", 104528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d1e4f0963402e82a0e541cc7ff0d371c1311270840c7059b94bd710b0953210a", 107536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3d34348744efcb7d239f7d07237bf644507c1d98545de940f5e36475267d7937", 104580), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("56a65ebf56f24e0082786c224207d28f9e3ac7d58473839ef4e014f58dddc92e", 107532), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7d22887c912c6d24c96e8a7bd85a8bec285b2f6e82cb0f1239c7d62df8d66db1", 103972), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0cf0f0229db8cba537f46efd1c9a4734268f6011e5e10fc1ad8981849edfc421", 107396)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mali", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static maliTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mali({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mali({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mali({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mali({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mali({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mali({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mali({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mali({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mali({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mali({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mali({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mali({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mali({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mallanna(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("81feb01d40b2b7875e496dde6320f6af4ca381b03d376608ba5d8f9a8eb72db4", 359540)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mallanna", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mallannaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mallanna({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mallanna({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mallanna({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mallanna({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mallanna({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mallanna({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mallanna({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mallanna({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mallanna({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mallanna({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mallanna({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mallanna({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mallanna({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mandali(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf8fcb272aa15d749c2b5a6660a64af1b0014a47b0fe3ed3394e761ce7637f1d", 368992)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mandali", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mandaliTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mandali({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mandali({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mandali({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mandali({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mandali({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mandali({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mandali({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mandali({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mandali({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mandali({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mandali({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mandali({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mandali({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static manjari(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bf27671bb835dda0357f930bf36e8187a3b84c55eee29c45942c1f24658669b6", 136496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f336f99d4a94b987c207d844c5dcf944f0499c38fa5136e75debe864ea9cb43", 136428), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3679ad318e4f3587d288eeeedd62d875b904a491a6163aecc418b38e359be2d4", 135944)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Manjari", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static manjariTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.manjari({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.manjari({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.manjari({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.manjari({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.manjari({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.manjari({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.manjari({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.manjari({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.manjari({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.manjari({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.manjari({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.manjari({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.manjari({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static manrope(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0e0aac7c30d815ffee8f590cf386f62ccea077282904c5bcc089f83e1e3fa6ba", 84572), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b00c95e47bd20d7096fc9bd66552bab89fdaee62611c600e651efcc4c1808b29", 84708), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f742b6ef495bb5b9f5b968a27c50281ca1f9822bb53ec99bb3757ff2f3febfd", 84680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1b26cd5641c96028ba3251bc1c3017c3b7f0f66db8bffa236e6a9fba9273dbe4", 84776), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2926db83b22f15d5dead94c407d4b830fe032adae54af4611e4a3b1d95e5059b", 84684), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("89fbadf5ffbbcf438d182a4931c241c4beb528b1c11c22290afc4b4b8c8f854d", 84536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f94757bb3fe3b1f1a20cdb49284c1a311dec4ed72554c5858d186fc93db7afaf", 85448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Manrope", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static manropeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.manrope({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.manrope({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.manrope({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.manrope({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.manrope({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.manrope({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.manrope({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.manrope({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.manrope({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.manrope({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.manrope({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.manrope({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.manrope({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mansalva(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7918b7006d7a856d653dd2465a093d28c6a2fd94aca6109ecd700d5e4c09dc7e", 79052)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mansalva", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mansalvaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mansalva({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mansalva({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mansalva({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mansalva({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mansalva({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mansalva({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mansalva({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mansalva({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mansalva({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mansalva({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mansalva({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mansalva({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mansalva({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static manuale(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cfd06fa1d33d937fd3d097835096788da1e29fe217c0e6619d7f4e92770987f2", 91676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b7144bb9db9fc28df1a2f22173a91396c535d078a58256b0937d0ed4916ac08d", 96700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bee63de104b5fab81c246551830fd9cf2910da15ffb1fe837913493df2612797", 94432), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b9d7d38e3301e49ed48cee4bdbfdf8bf85004f299e7d33795cc55fad29b5406f", 101664), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1b0e482a58bde31d3c0408ea84a5ce8287b1669e24bb7e75648b20ee859ade8b", 94576), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("023ded306bfcddff115b0b04ed36de8a5184275774cd972ce1fb34d8d917c61e", 101776), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("50014d6214dc09001362c4e4a770de808a95fc3f590d52d895c9eef86b71d68a", 91536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2a59ed27fb6985f70acb9fc94d9038ae63cfc4a2ddc5226dfecb7c8407b5a93f", 96612)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Manuale", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static manualeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.manuale({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.manuale({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.manuale({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.manuale({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.manuale({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.manuale({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.manuale({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.manuale({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.manuale({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.manuale({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.manuale({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.manuale({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.manuale({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static marcellus(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("da6549c2bc3ceec2f36d4caac4758fda610e67ff654b4c90304b83b55ee36084", 45588)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Marcellus", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static marcellusTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.marcellus({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.marcellus({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.marcellus({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.marcellus({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.marcellus({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.marcellus({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.marcellus({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.marcellus({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.marcellus({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.marcellus({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.marcellus({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.marcellus({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.marcellus({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static marcellusSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7c5ce48eb9c8ceab009d792056be549983c1b1322fca2784a6e75e7579b347f9", 47472)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MarcellusSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static marcellusScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.marcellusSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static marckScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f111edb73a2a290328fb706396fd239519a491528780e18030fc8b0265a1b669", 83616)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MarckScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static marckScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.marckScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.marckScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.marckScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.marckScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.marckScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.marckScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.marckScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.marckScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.marckScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.marckScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.marckScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.marckScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.marckScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static margarine(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86d801ed5c2e92441a7292c5dd8599a87757c63d0c8723543bcd44b504f37776", 148404)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Margarine", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static margarineTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.margarine({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.margarine({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.margarine({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.margarine({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.margarine({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.margarine({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.margarine({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.margarine({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.margarine({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.margarine({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.margarine({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.margarine({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.margarine({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static markaziText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0e5e6bb8cf276742072a5a22282dd79c7d532219e9a950faad9fcf21d2cf8cea", 120520), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d6f033a9cc38e8da2e1570b35f84c43b8312a13a2f126dfd89f67a322513d7eb", 120652), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("68bfe2ab439b778907c8544102bbbb7de31be886ff40a6bf5172cab6c7c23eee", 120692), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("342d38b7c70eeaf282e54f367d5ba4eba6d1c07b2c2363023084bcbed4d1c05e", 120648)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MarkaziText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static markaziTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.markaziText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.markaziText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.markaziText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.markaziText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.markaziText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.markaziText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.markaziText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.markaziText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.markaziText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.markaziText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.markaziText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.markaziText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.markaziText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static markoOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f84b713ecebd47ffa67dc6fea96096b65f6a1abfb9819f1014a1ed0d1a4c1455", 34436)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MarkoOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static markoOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.markoOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.markoOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.markoOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.markoOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.markoOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.markoOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.markoOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.markoOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.markoOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.markoOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.markoOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.markoOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.markoOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static marmelad(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9d26c08790a329b7df0bf3cd14c6102856d22040c14545f72c05a2f1f47633d6", 64620)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Marmelad", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static marmeladTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.marmelad({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.marmelad({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.marmelad({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.marmelad({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.marmelad({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.marmelad({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.marmelad({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.marmelad({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.marmelad({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.marmelad({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.marmelad({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.marmelad({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.marmelad({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static martel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c4024da71647bc66c6880037b41d29ad5ae7b5426518ad225ee14562d6dae75a", 120120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("138cff935a5284819d91b6908fed6fc1cb770eddf8d812c17ef1dc6092010fb9", 121516), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0bd68a5be6ee9107bc21ade86bd0199d47d96c7895a7a1c2c3080377779b268a", 121136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d22af0f3a51da296280637f9124f2579cf8b495c74ce080f84aca6ad6c12c889", 120600), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b81175087fcd5061785115771a9e1c7ab3c69ca0de682426b8338a372e23153", 120924), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3e03eaab1b6ec761214d4dc76edf835a3eafc1c7170942a240f46c25a571bd41", 121552), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8d00654db8f5901e4a51129ff21160fe34513ff2284309ccd0b00cc79684c7cb", 114876)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Martel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static martelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.martel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.martel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.martel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.martel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.martel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.martel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.martel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.martel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.martel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.martel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.martel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.martel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.martel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static martelSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1fc958d478da9b8b19e77c989d4fb6dbbd2f412a15b122ba72a2b11ee450907f", 107308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2115f8757576a27c80ccede4ba84e8febb53a0ec9f63840ab713b4d5e848f950", 107084), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f782be9e1cecfb4c75dd0bb7a8d88dce2794738a35bf5532079d99d4d529502d", 107068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("52f4a456d3927808cd2aa64f46cd6d63f7a938b904b289f66ab69c0db2e884a7", 106336), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fcf8c1bb73f62f8c3e86ed5126daf3eb4ee130c49e70f7ebdcaf27ae635bfc1b", 106340), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0860874935148b1b8ffd9705d6ccef02322d3972a1bf7a38e63a65cf542e6395", 106224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9145c71bcab8472ba22b19f9e4e898639945be5fed13f10cd4d399fd5eac5a83", 105840)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MartelSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static martelSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.martelSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.martelSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.martelSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.martelSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.martelSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.martelSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.martelSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.martelSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.martelSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.martelSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.martelSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.martelSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.martelSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static marvel(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3762fad5facc07dfebad111a683192dbddb8dc02a4a43406d2c79a4303b11b95", 38196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("aaf0a4ec8425cfad4c7d8c41f37da8d7de878baf6fe877de46e9bb6a21afa443", 40644), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("84edf56bb5528f4a5a646cc54e1df7f8b8f0acfcab08ba176e2140d05e3576dc", 36944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3b41fd323f8f2702af4eac210e3a7aaccc576298b28256bf11c98cba436c90c9", 40056)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Marvel", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static marvelTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.marvel({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.marvel({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.marvel({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.marvel({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.marvel({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.marvel({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.marvel({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.marvel({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.marvel({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.marvel({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.marvel({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.marvel({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.marvel({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mate(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5701b2952429c600058781ef4db8a7525ee3bfcdc98015ed08588eff40647848", 28168), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("30cd036adcb37680b470e2671c3973733f6900c1cc99419e1fde6201aa100018", 27660)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mate", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mateTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mate({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mate({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mate({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mate({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mate({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mate({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mate({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mate({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mate({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mate({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mate({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mate({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mate({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mateSc(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9105b12c369a593ea31abf9530db6e89458635e2c5584c36d4e9af55177be4b8", 29808)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MateSC", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mateScTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mateSc({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mateSc({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mateSc({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mateSc({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mateSc({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mateSc({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mateSc({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mateSc({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mateSc({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mateSc({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mateSc({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mateSc({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mateSc({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mavenPro(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20ff29ac0e19858eec2689ee81f18e45489d0afec4b61a21036d0c755edafcd7", 60872), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("afd784d77bd20f7e76864636023d94a988f8732c47ec791f79d096b11d1c327c", 61472), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1f1c606af4cb59fd55c5e9d478e3c109eb47ee3c48c458ab10edcbcde15f0562", 61364), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9a922f263eff247f7ccc3823865c2b9241e10c305b6c64b3754dbb06ce6b5e33", 60948)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MavenPro", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mavenProTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mavenPro({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mavenPro({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mcLaren(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ca48a5e17b0201057453d49c4271d139e5824b553505ad1c6fbbd7cbbbf4d1dc", 54088)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "McLaren", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mcLarenTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mcLaren({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mcLaren({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static meddon(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("50d2aafad12ffd4c696c904a7fdfa8fa855a6edc2d671fdd64af6375a052029e", 79884)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Meddon", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static meddonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.meddon({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.meddon({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.meddon({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.meddon({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.meddon({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.meddon({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.meddon({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.meddon({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.meddon({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.meddon({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.meddon({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.meddon({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.meddon({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static medievalSharp(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("93afbe692f662b93c6faf17b061d07ad7b343db38496d49e05bc31fcfaf585ae", 71108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MedievalSharp", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static medievalSharpTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.medievalSharp({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static medulaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("01411348aab468ebfca2f176a931010b30ec982ff382993310e5cc4d65e49904", 33636)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MedulaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static medulaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.medulaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.medulaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static meeraInimai(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("199785360f92220660b6a90e66afd8907c31df21ef4e4470e2af99c968017208", 72272)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MeeraInimai", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static meeraInimaiTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.meeraInimai({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static megrim(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("af75cd9219b5b5df8c1ebc7dff3232935d81325c33d502dfabc83f32a310831d", 32164)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Megrim", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static megrimTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.megrim({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.megrim({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.megrim({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.megrim({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.megrim({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.megrim({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.megrim({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.megrim({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.megrim({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.megrim({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.megrim({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.megrim({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.megrim({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static meieScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aefe23d9bdd07bdf03debfd770abb2ea2f50634e5b0803593abf3eb0b9a784c4", 53640)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MeieScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static meieScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.meieScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.meieScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.meieScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.meieScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.meieScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.meieScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.meieScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.meieScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.meieScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.meieScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.meieScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.meieScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.meieScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static merienda(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1132399bc1f3e2caf41c69cc4f7c590c83da549f8e9b8cf43dadc262df733048", 41028), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5f177984e147fff648e2e2bd9ca6e74e13c2be2d6d14b466b154b51e93df5f14", 34984)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Merienda", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static meriendaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.merienda({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.merienda({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.merienda({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.merienda({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.merienda({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.merienda({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.merienda({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.merienda({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.merienda({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.merienda({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.merienda({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.merienda({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.merienda({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static meriendaOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aa4c2d33606a440380daab12052cc4b38ac64de26f9dc46de18e3405571ea638", 30500)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MeriendaOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static meriendaOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.meriendaOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static merriweather(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8e88a5324d8b8b44503a016700f8509fb935a78d5668c821daa0092bfea21493", 73036), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("328531f24df7325999a988ae9020486990b3f719e0380ebc4c92287bf487a8ff", 77736), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7c2d3ddfee4c635410c77868a5443efcbf7f660b64d159ba2cbd7d03f43e02f3", 74308), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ec0e385dcae93a7bfa85adcf27ca8465f179fba9a112e05f07384561b29a4b1a", 77292), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("853dd62f5464fdb7677eeceedf17f771b710501d4fb15dd7076912d7430e92e3", 73672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("acca91ffc59368ee6894a41c9c417f5d2ec9f03c2c181b8e90013e49a401caf4", 77196), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("aeb362f6ad7c32d24b6a96265394b98c1da77b6620d79ecace57a083ff21c9d2", 74176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c6aef6fa65ac3afe1f4e813c13cc623329ddae356f8fa330370e3f1cd754f928", 76980)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Merriweather", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static merriweatherTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.merriweather({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.merriweather({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.merriweather({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.merriweather({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.merriweather({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.merriweather({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.merriweather({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.merriweather({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.merriweather({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.merriweather({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.merriweather({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.merriweather({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.merriweather({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static merriweatherSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f616380e06211b4f761656da4fa581a7d0342e10ef56f5be45bee9306dfc3a9b", 41572), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("05ca1d14a17191d43a6d7622e29059462800af4da0f507c95243b2bad8fa630c", 42068), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6bed429e28f419d7f2a83544104f8c0561a37b088ae9f84c2bcd7400c2589dea", 41204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2064c7a30f875f7364657c94031f67a4ec37225a03e604d81190ef884df6b744", 41616), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fa38d2e5c8adaa4e200490a344d5cf28495405d0d83c6a0620bef8510853c9ac", 41152), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("5c33c69255f4345f6510aeb92fb1edd05495c99313368face8b8c9f996bf5545", 41752), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("344758d11e4f83c18b0998f11d76dfc215dabfffa863207739c8a99248ec5f89", 41740), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("45321dfdc3c655bfed2b7abc7fb30131d49e307233bf42d8a8d477135890fc04", 42420)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MerriweatherSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static merriweatherSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.merriweatherSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static metalMania(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9495d91ee2029ca622be05cf5924ab5d44a3f54809cb02e792987386e0ba2265", 215332)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MetalMania", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static metalManiaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.metalMania({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.metalMania({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.metalMania({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.metalMania({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.metalMania({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.metalMania({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.metalMania({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.metalMania({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.metalMania({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.metalMania({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.metalMania({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.metalMania({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.metalMania({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static metamorphous(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("83d03fe24f83517affbc43ea6f81ba72a2accf111f2e33ccc4cfe1a857789185", 68972)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Metamorphous", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static metamorphousTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.metamorphous({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.metamorphous({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static metrophobic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fba0d5a8f2ffaa5c02bcfc5580a50f6b1dac80580d8d3a77073e6a74aa189b5c", 30912)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Metrophobic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static metrophobicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.metrophobic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.metrophobic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static michroma(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5799106e7f554ca9657d0f56c31b6babe55b321aefea779d8eae0c68dec1fd03", 46924)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Michroma", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static michromaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.michroma({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.michroma({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.michroma({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.michroma({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.michroma({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.michroma({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.michroma({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.michroma({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.michroma({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.michroma({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.michroma({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.michroma({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.michroma({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static milonga(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0754de34c73ed1446cebd4a2c6594cd4e24a2b8cd3512ad6e0d157285e9c2f7f", 128132)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Milonga", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static milongaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.milonga({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.milonga({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.milonga({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.milonga({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.milonga({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.milonga({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.milonga({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.milonga({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.milonga({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.milonga({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.milonga({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.milonga({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.milonga({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static miltonian(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("39ba52477439aa52410287a79a2d8064fb7b18f82af5f6ae22fd50b70e31d96c", 91816)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Miltonian", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static miltonianTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.miltonian({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.miltonian({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.miltonian({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.miltonian({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.miltonian({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.miltonian({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.miltonian({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.miltonian({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.miltonian({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.miltonian({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.miltonian({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.miltonian({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.miltonian({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static miltonianTattoo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e6b0d4cb984d618866e97a59156c448971703186b779d38d1402b650790004cf", 69528)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MiltonianTattoo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static miltonianTattooTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.miltonianTattoo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mina(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2cb3c2707dad5e0a5f21dbad8da10b86eb3b1da477394a33f4d47a819fafb82d", 151172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7dae008ee6a398a7d7b23f1fbdeeaced41fd8ba3b71cb12b94900ded063f6467", 152540)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mina", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static minaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mina({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mina({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mina({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mina({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mina({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mina({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mina({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mina({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mina({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mina({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mina({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mina({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mina({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static miniver(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5fee893072a2326d9baa9122deb089cd6f8d0645ee00cd02de22b415de3c7c54", 45408)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Miniver", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static miniverTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.miniver({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.miniver({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.miniver({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.miniver({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.miniver({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.miniver({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.miniver({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.miniver({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.miniver({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.miniver({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.miniver({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.miniver({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.miniver({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static miriamLibre(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c4dc8662662a1708ab4d397f59152bba9bde4ce4c524d9286d49d078a8c58dc6", 74628), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cbe1ade0a4a8eddd786eb1050d18d81c71465545f3f80392927a36af9035c775", 72092)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MiriamLibre", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static miriamLibreTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.miriamLibre({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mirza(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5b1ac6cb285ca3492e313a53d5252b9784bf7607f2835a2d44cb3cbad0168539", 177820), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("423532407cc832ef84cc8f08a3359f26b50e721c8aa0e00221e4215cc83440b3", 177352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4225215d0df4ad389c4ac29d48fddc531703776591ade64c23f6f995669d4078", 177188), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("306b412a39d9f93ca840c13ca62300eb5c7712e2afa94bd7ef2272b51131be6d", 177052)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mirza", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mirzaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mirza({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mirza({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mirza({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mirza({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mirza({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mirza({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mirza({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mirza({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mirza({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mirza({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mirza({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mirza({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mirza({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static missFajardose(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8de81a59ca34a15be7f6749a4f5247486c41ce79afb9b16e4212d54c0e5d9a89", 58824)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MissFajardose", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static missFajardoseTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.missFajardose({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.missFajardose({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mitr(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("13aa43b100ddb2ef3f574409c44d5148c96e262d636030f3546632afc8bec583", 140672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("42aaeccd38bab09aab541391f181cf90544aed031b28240064e03a597d820aff", 146132), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("51a838bb86fd8ae3d3b14861b86090b8e590d6cec16828f5ff85cc29e255fdd4", 148012), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a8c0fad121eecc6ccc06afd51a3ed04b7632eabd778490fabe406d010d492fb6", 148128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f52b41a04226fd35e8292e4074e68cf18847a0b362d1ea41038b6cebcad7953c", 147556), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("302b58d18b982fe3745338cc6ea87e5868436d2ba962262423c98cac9d161c47", 148144)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mitr", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mitrTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mitr({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mitr({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mitr({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mitr({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mitr({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mitr({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mitr({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mitr({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mitr({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mitr({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mitr({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mitr({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mitr({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static modak(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("999298cc9b836b6d428706a18192f20ce4f95b9ffc84c016dd59527f7735bdd4", 362296)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Modak", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static modakTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.modak({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.modak({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.modak({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.modak({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.modak({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.modak({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.modak({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.modak({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.modak({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.modak({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.modak({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.modak({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.modak({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static modernAntiqua(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("df7e73ec3e130e1a70e2680351228d3e058ceea718f4e7ab314b98ce3978d7f9", 70060)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "ModernAntiqua", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static modernAntiquaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.modernAntiqua({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mogra(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("11a1b64ecdf329dcbc068f036c2c09a2058b63bda66c3a541102b48e959c2a4e", 233848)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mogra", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mograTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mogra({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mogra({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mogra({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mogra({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mogra({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mogra({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mogra({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mogra({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mogra({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mogra({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mogra({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mogra({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mogra({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static molengo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c17cda006ffaf122363be2ad7ed8394c0bf59581bd9e5e9a7e7f5c0ed161a4c0", 34868)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Molengo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static molengoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.molengo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.molengo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.molengo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.molengo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.molengo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.molengo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.molengo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.molengo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.molengo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.molengo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.molengo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.molengo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.molengo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static molle(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d081c5d8d7d19361eaa68e5c05b211b519fa2d27ca94a3ec76da0a39f880acb9", 35904)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Molle", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static molleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.molle({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.molle({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.molle({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.molle({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.molle({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.molle({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.molle({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.molle({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.molle({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.molle({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.molle({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.molle({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.molle({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static monda(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b28adc169d42a434c7b435bab7f4c11ae50fdc1516bc03426f8835d8b70dbee7", 28212), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b05dc6798c3ea80d95c20709740c72bb72d07040538c1240f850c220292e3f6f", 29004)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Monda", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mondaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.monda({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.monda({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.monda({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.monda({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.monda({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.monda({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.monda({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.monda({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.monda({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.monda({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.monda({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.monda({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.monda({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static monofett(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ebeb36e324072bc8a4e7717f33c5c72271409af395fdf3b4f1e66b529addb881", 58108)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Monofett", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static monofettTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.monofett({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.monofett({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.monofett({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.monofett({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.monofett({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.monofett({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.monofett({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.monofett({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.monofett({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.monofett({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.monofett({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.monofett({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.monofett({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static monoton(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("432f7ab89e5991e379800eb285fad653a999a44aca1f9204e62060bbf932b2bf", 51556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Monoton", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static monotonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.monoton({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.monoton({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.monoton({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.monoton({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.monoton({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.monoton({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.monoton({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.monoton({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.monoton({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.monoton({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.monoton({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.monoton({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.monoton({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static monsieurLaDoulaise(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("def26258142aeeb4021fb91331bd0a7dae943c48caa8b09211393a16ed3c53c9", 54240)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MonsieurLaDoulaise", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static monsieurLaDoulaiseTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.monsieurLaDoulaise({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static montaga(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3b97268f12c527fb933009800e8d887c083f48fa733c69dba7961c887909d99e", 33908)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Montaga", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static montagaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.montaga({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.montaga({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.montaga({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.montaga({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.montaga({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.montaga({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.montaga({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.montaga({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.montaga({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.montaga({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.montaga({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.montaga({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.montaga({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static montez(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d2ffdd5ee7b2b6e5f8a08b9bc62a24eac29a4755576e27b7856e039043d596ea", 76776)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Montez", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static montezTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.montez({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.montez({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.montez({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.montez({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.montez({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.montez({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.montez({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.montez({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.montez({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.montez({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.montez({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.montez({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.montez({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static montserrat(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("13b843ab4d5acd6d99d06a88bbc492bd3ffb0d55b01f159c34a0a6237cb2f148", 151968), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("282f82e77ce6ec450987922f6c8c55456bd826c8a1557a007adeb4c460c6ce27", 151680), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b058309166a4bdbc1e36f0f4ca0b8349e9705f457bc71a190e34624de2062455", 153076), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("778b3406a7b740d7d857323720a66ef72ccb3b507b3488b2e56fb9c9f52977b8", 152248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("25cab2a480827c3b70f98fa4fe09b06a974b8afb996f60232b5acacb57acade2", 152908), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7b490e666930fe7f1379aa62b203966a6f284a9dc74b09e8dd5c59760da460f8", 151788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("470e93c06a9fffa6851375f54047917a9d774ed6027d9f044cd1bc8d4cd5630b", 152396), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("83e171717660560888d9a84b2a2b1409b6fb43b806ce9b96059c974be4126d64", 151288), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cec0f6e0bfbfaa352eb189f0eb220916dd278b02aaf824be87055ba5cc38d58b", 152092), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a61fc08703fd75883c389503641242523b7140ac0b6df6b22106902767e7bb2c", 150928), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5f82f6e55db43e905c6ab9d04395566b243c41798d6a53545ffbd10ed6c424c4", 152148), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("625ed5e1a74ead073b6562f04b509f83c2e1630b25ea4c98ccd3d275418c0308", 150648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("052bfd7f3dc788ae3f0d59dc8e5d65be0c1ec9acaa6fbe53dc70640f64c075bd", 151780), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7c882260e0b6664897eb1747188ca151cea2a966109ae534e0eb706aa990510d", 150528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8bac23178f38bab6018ed343c524a822a5bcbe2a021decbf30f85a9cb61aade0", 151776), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f2c00bb055d9f815d97ed28ae9e26ae9bff8d0ffa7c6e9ddd3cc47c070c922ea", 150292), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c64d95a01ae992dd8ff7474e55c16b2a05ea6c4e9aa944ccb51d4b1016232583", 149380), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6eac88b190248d68069db0de9c165f24aaffc22097fec98ba72710c2f9a96a71", 148416)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Montserrat", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static montserratTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.montserrat({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.montserrat({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.montserrat({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.montserrat({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.montserrat({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.montserrat({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.montserrat({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.montserrat({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.montserrat({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.montserrat({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.montserrat({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.montserrat({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.montserrat({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static montserratAlternates(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5c09b026797ce5fac448caefbdc866f5a81bf9cc625984ef1aa9403631484819", 111412), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w100, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c82e331c5ea52753b4551af7eff9d03c3662fb16fea5c00fa558120532424212", 114640), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3a0f2fd4ee372169bc19522956923e1ade9563dbf8789d7a74576eca54c0cb98", 111792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9e8fdaa328523c20fe857f63acd10406a6fe6165bc82fd41a676e77c55374087", 114648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("009e98fbd7f5568e68b9379e0d049e1f646ef5001f366eca34cd44c262443dbb", 111672), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d82d87be0bd762617314db90ed2694ea7a75e7aeb4e4da266a9581c67fd97d09", 114248), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b2f5d183ba5588c36e0f975cd5c154bfab1c4defaf7edcacb101f20a83721bb0", 111272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("a94551458451c010e364df974a12e6de5911fe56b117390ba8d52ac82dfaaec5", 113800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0ad6f1c378b9acd74dc8ac990b61607e3b218a3fbf0988f0ef5c508fa13fdab1", 110856), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4afe42c2aeb0bd46a2c9f199560bd2ebedb166d1e67618651870b8421499c300", 113540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2fec79e6e398e2c513322f7af66001553bf74c69cefe117fb05472b44f6d95ed", 111008), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3ef634325d5a61d0891d3a6eacd265a2983cf1e9e84caafc7bc2addf2f554d69", 113232), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("54d33b2d46c465e38dbbac2b2b8b5f0a6242270cf0d5511f0161c21e1f0d4ccf", 110620), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("95d8420481ab395146970da7489bd9b91f5c0437ac1806c84583787cdd4d9b58", 113136), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2dd175394efc14d9c412b3bad3e06b26a98655760909e676e5be12e642daee59", 110684), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("0ea02188bddfbe57ace54b7785d677eddcdd630d1073fdcda277f1186aaedf20", 112928), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4d1eed87eda713f3f729c721ae1754c382e1517f51f29be05babf98f8e985693", 109236), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("59d0191230f070e7792b5c21e8a1f3ebc0c132ed6564d765d8759903325bda9b", 111956)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MontserratAlternates", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static montserratAlternatesTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.montserratAlternates({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static montserratSubrayada(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bcf81f50b96cbae5ccbd3337f693c53bbbe2bb5717bb8637eeaf4d5dff5699c4", 24284), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6a2a4c0ee5aade485aa6bf9a1a43b1ef3fe0aa5dda27e70b0b9abe7625562124", 24316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MontserratSubrayada", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static montserratSubrayadaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.montserratSubrayada({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mountainsOfChristmas(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c2200cef227dc27280b133ec5d366a7a1c5e8956523b6a69490c6d3be875831f", 122496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("52a7b2b21269dc6d67187a7882fa4bbc19f093792adc852c62497c6495d129e6", 123356)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MountainsofChristmas", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mountainsOfChristmasTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mountainsOfChristmas({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mouseMemoirs(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("36717824ce8893e8e49e371730b587484db4b095302a60970bffe613c3a81960", 55516)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MouseMemoirs", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mouseMemoirsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mouseMemoirs({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mrBedfort(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e15139ad970a418042aa1bd423cac0ecbc77211a359ea93bf60c67ade7f97542", 37204)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MrBedfort", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mrBedfortTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mrBedfort({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mrDafoe(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7130e498cceb99869e8233972404152d7f191ca5b5e37435cbd7b31758dec294", 47928)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MrDafoe", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mrDafoeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mrDafoe({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mrDeHaviland(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d8eabbdbc1c25c4982d316b366f4cd39f1d12589d7442ec03923353e8b739132", 44624)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MrDeHaviland", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mrDeHavilandTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mrDeHaviland({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mrsSaintDelafield(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b864d74de51aa37c270217c9c01320fd78f8b1c23077b4ef0c20cb697a41d899", 49092)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MrsSaintDelafield", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mrsSaintDelafieldTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mrsSaintDelafield({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mrsSheppards(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e405bf3cb038e30fac744c48068e8e3687a50c1b5cff874a57476b07f44b3b04", 42336)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MrsSheppards", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mrsSheppardsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mrsSheppards({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mukta(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("4a09d53371d63ff1a2007025ba620e2d49a10d6fa1cfd9771079b881fb10260b", 302792), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("afd7468706fa0ed52e0b848541b4e7443296d0e40213e7903e1d85de5b78c259", 299500), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7a26594f60f0a156f11685565fac877993f2081741d7eafc7a67d82010f730f8", 303624), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a8691ddcdc7892d423b4906d2316da09de32309d3d68b21b5d3d640e28901896", 297420), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7d8e1e1ee78a611bd420d3ad4fb7812e49164acc68f473ee133666fe5376d477", 293224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e6fcac27938712ebc52654eee052ffee3cb5608feef54db55a22964fe8c7d974", 294800), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("861cea1030f95eb8f746e95524c8440b56afdd6606e07782193fe436cc52f46b", 294532)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Mukta", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static muktaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mukta({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mukta({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mukta({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mukta({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mukta({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mukta({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mukta({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mukta({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mukta({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mukta({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mukta({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mukta({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mukta({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static muktaMahee(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("deb2926281b06e4d02371cd3f6f4883d13a38514549e581c6269cb16250c5a63", 159216), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("448813ce747d7ccc8e7b380c48932fe537454f9a86ac18052fa515874298334e", 158236), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e185695b95ca5300e131bf6cf64a2442b7517874432a1a82f968ee61ed116717", 159340), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e224c5c38bb5fe5efb69e8392dfd476427211ddb37a97f4fd77b807d5aad8b7c", 155880), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f2c62fede24e5fe712f6f59500c550749c89e47b21cb749ea96f447ace17a57a", 155776), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0bde54d9dc9448b8d81abd2d849dade4e04c4b7c4ec8565ccb09e80f0fd2be99", 155836), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("561a2604bd143dc10cc3499ba4e3c7eef16b6705db72db31da22ad356b76feb5", 155592)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MuktaMahee", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static muktaMaheeTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.muktaMahee({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static muktaMalar(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ae35f34ee0aecd84455b8074812b101d5d11bc4ae0ada4a90c3e6963cf1b93c", 176484), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2d5b4747199d5f755d4d21f2dfb23f52cbeba3d94d82a526575d63a6be36c99b", 175612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e58544a43eef9e9b107ca973ca2d3233a1e15b8eddffcc73a3cb767a82c86fd6", 175612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("05e1d0c09c615550bb87408248e0d42ce654f55e0757f1fa6f4f93323f8c8121", 171128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e4f26dcbc25c0f26d1fce4a3558f4aacdf8089148a638079c3353f6049ae21e9", 171032), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bacffc5f82b7219e1a4ff85b030aca1a5f805e0a1224534a6f2bfb01e4bd61cc", 171620), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("848b7be10b4d701ac02f5f2208071858aa399b564d503cd2e4ca428d25886da9", 172316)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MuktaMalar", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static muktaMalarTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.muktaMalar({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static muktaVaani(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("29b1cbb5d158be22b06c5c6af360d55da720b6c8a7b9b218dd184cbfc2a97885", 346528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b273ecb298d23bd198fdcf92d8137f3bb392abc1843e055c814580f254f3a4d2", 354676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("89cee2e2edc87643ff46594bc56da0b32e9f4fd9acb8b87979dda5d4da2bccb6", 344512), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5da49257aaa42ad92f5abf8235b58834033471554455112dea55a3a00761f1c0", 351576), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7f14d4f17f14c4106a7fe56a9e591a9ef7d89e8dee221d5b4d359cac2667f138", 349868), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6e1e0572586f30b3b9b794997b0b26cc725d41d3348eda988662d14d1fdc89b4", 349956), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("09f9de8c00ef147925056cf61c1d7e324b50fd29b1fe15c95500c506ddd79aeb", 342704)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MuktaVaani", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static muktaVaaniTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.muktaVaani({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static muli(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("dbcba4190351f997830d7652727c7f42e0c882f325d1f75ba8a3c606f8ab0e23", 66880), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("939afc08c356b9f83c67ee2b78dec42c2f7e1eed1ade0be8b8fc1095d1429b04", 68176), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5de108957fcdaef883f06a6d0852f415189779437851b0d6d7abb06c9b717a86", 66540), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("7cc6d79998df498ec95b3c68aa52f263ad62a25202e7971a6b75de645da069c2", 67788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ea4701f9a5e0b0e4c96b45b1c04278e62159ddb385941274af0394132622a139", 66444), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e5a17a307589ccf860441ba4904d3819f0ce0a4d7001a6e4b7d0efd5858bcde8", 67632), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("10d78b9b78e06d25335389823e4383b15fea791de3324adb6497069821c2e214", 66332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9844bb9dc82723a3d8c41821d7ed75f37aa979969dbcf244e03676190a26c279", 67648), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3ab6877022dc43f69329d1c8e73ede36b36ef3cd49a833da18c388c6311a18c7", 66100), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("93112f6142019f2669649529f27d3d42f5bc8859bf1dadaaf1ab66b07492b366", 67360), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9ba6c90c1b1b2a61cc450ef443603f86e5acffbba7430c4d41e9ce1ef434b516", 66120), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("dc2a00ad0b251d39d19272f9277b6940bb685b29b9cecca33bfb4008d5188d2c", 67316), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a887d75b7f4ca0f8a220638d755864474c4a89972ef84be00ba81d5764519e8c", 66128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c1c38c7b31e983faf9ac1ba63d8a98cb93cdf7c854abd833e826a7bea94248c6", 67448)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Muli", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static muliTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.muli({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.muli({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.muli({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.muli({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.muli({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.muli({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.muli({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.muli({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.muli({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.muli({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.muli({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.muli({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.muli({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static mysteryQuest(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("45f3b5f241a077e28d45ad6f0d542f3d9f2e2204a6d7ba78f4438c3960639003", 41708)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "MysteryQuest", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static mysteryQuestTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.mysteryQuest({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static ntr(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("a81d9625c6e1cc5d20f097e68c4604194966a833b0bacfa533a882ad3fe92592", 197756)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NTR", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static ntrTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.ntr({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.ntr({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.ntr({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.ntr({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.ntr({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.ntr({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.ntr({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.ntr({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.ntr({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.ntr({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.ntr({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.ntr({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.ntr({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nanumBrushScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e99eadfe916b8afa1065e368b0c06a725089504ffa9cd2bb1832cbe59ecb4822", 2740080)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NanumBrushScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nanumBrushScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nanumBrushScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nanumGothic(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("384554f92bd4d754bd8750f8885c456c5264d6814731376178dd0727fcf2d98c", 2879864), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("66257cb7dbb7d38dd5d9b0c7a1f9df7ae828f4a2a79a37070603405220e9f32b", 2891140), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("560717e4c667f1bdf58f6426ef133e74637eb3c1868feff814bb8a5b707e6880", 2951544)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NanumGothic", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nanumGothicTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nanumGothic({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nanumGothicCoding(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("87aa4e424fb41b2eb66974966afbb9b9d113444c73ddfec8d9960d1c9f15ca2a", 1432612), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bfd061e7ac41bb2ac41c1b32e194b64a92ea19253afc0008d1a5e58e330434f9", 1458744)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NanumGothicCoding", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nanumGothicCodingTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nanumGothicCoding({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nanumMyeongjo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3df71af0cacc55f9ee8f8e5e35a48672e379aefb187f3ae133a8fd5100c3810f", 2167668), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c78488cd4af94bf04459b776f90fbe7942e11af15dda46bd856a1abc0523ae11", 2241272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2da8166e69673863a98b44792cb5b54e1a13b597c11dca437783e5a9336cfa9c", 2293712)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NanumMyeongjo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nanumMyeongjoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nanumMyeongjo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nanumPenScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2e0017c2efd9b7de2cf1b9d90c99ebfd4be478763a4f265915ce2302d928a6f4", 2533592)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NanumPenScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nanumPenScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nanumPenScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static neucha(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1e6e5577b90d7925c65ee7e36c988d5da0c8abd382abf4f7d7a5cbc0ab477a99", 74808)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Neucha", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static neuchaTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.neucha({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.neucha({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.neucha({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.neucha({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.neucha({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.neucha({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.neucha({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.neucha({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.neucha({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.neucha({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.neucha({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.neucha({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.neucha({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static neuton(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("52a1f786965c5e1a5ddb72c3453133e67248c6daa74320a01e034161e4476a0f", 36124), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("ff0297b52f6d34d72fb14e197dd0504d57fdb2769b98619facc41590e900c8e9", 35804), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2147893351f8ace96b011dcc7c1c826ba84daac170ed6538e0456e5ed8ffe947", 40944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8be52f34f889303ed24d24ec94bc56c8fb7130049db10eb3983aab619a05bcb5", 38564), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1c83bf4d18e666ffe37bb75b7005b9ad99f4166347cbce93e1f798c45954f87e", 37052), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("2ccde11ee55979183e280ea4860ec28e4fd88da81c66a8eee82963c4fe2befca", 36760)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Neuton", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static neutonTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.neuton({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.neuton({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.neuton({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.neuton({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.neuton({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.neuton({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.neuton({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.neuton({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.neuton({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.neuton({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.neuton({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.neuton({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.neuton({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static newRocker(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("20dd1e4e2d3c0003707b649a59ebb5a729e108cc20929f1a1c06bb03319b07d7", 128612)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NewRocker", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static newRockerTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.newRocker({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.newRocker({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.newRocker({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.newRocker({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.newRocker({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.newRocker({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.newRocker({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.newRocker({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.newRocker({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.newRocker({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.newRocker({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.newRocker({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.newRocker({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static newsCycle(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9dc74270959405ee468a6ea83452b01a8075067bf71cb96c8097511477f8aec6", 178676), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("301d13c6e3a40093c2244566226928b2e8bd2843d5cb06302c5c30b44c3d4bc2", 60472)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NewsCycle", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static newsCycleTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.newsCycle({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.newsCycle({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static niconne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c5d99f37c7fc29904227e4a5909347b604c87dbe244293db4353ba24f5263d28", 45568)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Niconne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static niconneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.niconne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.niconne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.niconne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.niconne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.niconne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.niconne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.niconne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.niconne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.niconne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.niconne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.niconne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.niconne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.niconne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static niramit(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e92669e514d741863c49ee66189090f4d5dca5b6a9d34ccbe435b2f5af660c42", 89528), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("d2d4697e15bf89f5f5ef604984ccc6a79f078de6f91e60deae5736de825110bc", 92352), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("cc8b41b318e8ef4a063f6a1d3c4b2b8b07029e70b412f4aff994ee4849efb09c", 89344), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8b5560e9959b3ffe8583ea5591a0852f3cb9dd7d8f256327fd1dfa761aebbc97", 91988), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b73b7564f064368ecc427a55f6f52ab3191726827cc1b6c8fe10059308a2c576", 89224), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f2f02627999eb05690e589cbb7e0c1ab1e977f24c976bbeafab5c8bb041cb23c", 91860), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d57314c8b28aa732f0904f616db80bd02f471e91a0c0620454016ddb37200371", 89172), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w500, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3c7d65b0b7438466a6707ae7ee57b82aad56e02798b2bd582110803cfd632e40", 91624), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("932bdc0ea4e9406b713a29b1a936c3bfba71853a8f834dcf9129914d6ed2f0e7", 89112), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("deb26883a193441eb594a0e8e42bac1d2d1ac822053c3bd7fcaf06161fbc281d", 91760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("67d40f2a9e3f3cc8c4e0873f0c6aa8b2db46210c344b6805eb7a3280b6430a85", 89328), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2d5a53eeb80546748e52c84452b17b60d1e4abfcd7e01f6d6f909ad0446c9f19", 91772)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Niramit", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static niramitTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.niramit({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.niramit({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.niramit({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.niramit({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.niramit({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.niramit({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.niramit({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.niramit({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.niramit({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.niramit({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.niramit({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.niramit({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.niramit({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nixieOne(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("087111fe60593408bf58ff7befff4b557a237a72d80e56ad3727d99693b4a087", 52532)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NixieOne", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nixieOneTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nixieOne({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nixieOne({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nobile(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("d0fcaab1c3dc981d4dcbe2840d5a12039de03b68f4f2736ac648e6eb339249c1", 35992), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("88fda8926ed6fdf634aeaf690e2d21e66e8e88231993df94bf3b2359a617491b", 44588), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("809ce5e05bb84a8872fd7ec295e71892fab43593a18179bb43c2a0f94cca53d2", 34836), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c889dceebe4337abc148cab8adbcb5ad8e6277635316b13a75afb02db100212d", 44532)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Nobile", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nobileTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nobile({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nobile({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nobile({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nobile({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nobile({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nobile({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nobile({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nobile({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nobile({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nobile({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nobile({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nobile({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nobile({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static norican(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f4fbc9fb71760f8b74862d7d705863f375de95bb99192acfeca61ab3185b6468", 46812)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Norican", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static noricanTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.norican({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.norican({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.norican({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.norican({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.norican({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.norican({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.norican({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.norican({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.norican({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.norican({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.norican({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.norican({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.norican({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nosifer(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("db6d798eb7a5adc1193a4757fba4b3bf0f2bf34f9456f9b72dd63e8c21a304e3", 43228)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Nosifer", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nosiferTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nosifer({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nosifer({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nosifer({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nosifer({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nosifer({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nosifer({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nosifer({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nosifer({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nosifer({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nosifer({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nosifer({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nosifer({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nosifer({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static notable(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("17b2981242270d0087017ea92cac3bb8bad89c43bd4d9907ded7255e92dbc8aa", 24588)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Notable", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static notableTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.notable({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.notable({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.notable({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.notable({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.notable({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.notable({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.notable({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.notable({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.notable({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.notable({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.notable({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.notable({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.notable({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nothingYouCouldDo(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("be0f234b092c9c449e02760df9a51ff0a1bb5867a70825d7074238c1e26e9664", 34872)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NothingYouCouldDo", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nothingYouCouldDoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nothingYouCouldDo({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static noticiaText(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("8aa05df6db1fd8277eb2791ce573473314c741b8b6b0779c1f5156a33c24e54c", 82260), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("eae99ba15e584587a39b40e2c6b930d2c6da34555025ef2fcecdad8b5d1096ec", 66644), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("16462e88dea5568eff3522e2b0e80ac4943e7ade072e98099a0ced914809837a", 81364), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("89293c9cb0897a9fbf4e63241a6b72e62599bf45fe58a6163b953a9c980ad1f8", 65616)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NoticiaText", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static noticiaTextTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.noticiaText({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.noticiaText({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static notoColorEmojiCompat(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("975e5d89d39fa5ce6e443f0acba2d714cdff5675202a3ce66012c61a5fec1698", 10236828)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NotoColorEmojiCompat", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static notoColorEmojiCompatTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.notoColorEmojiCompat({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static notoSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7ae7b625c88992d250a617f91f64e254aa6ea78ca904f1e5fc1f588f0bb9a4ef", 310656), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3b65d8f4cdb5997c9e205e125755bec66ef6cd73fadfbf1b6b8b8592d4a952e3", 211128), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f16366c45a8cac801cadd57c692f16cf4c967e3758cf25a911f7df101c23dc11", 307772), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("2b36c5bae3f90cb9def112b8d15a224e0f0e4a0a75a5d83718690c6927872140", 214176)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NotoSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static notoSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.notoSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.notoSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.notoSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.notoSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.notoSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.notoSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.notoSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.notoSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.notoSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.notoSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.notoSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.notoSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.notoSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static notoSerif(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("756d85930a29b444fc130d6ab854e9f796a951dff740c2bedb926522aa2db185", 219488), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("3a8f4b27348c68ceb866bc4d52c0eae507c8cf764c1ab8d398805aeb89e40eb6", 220592), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b8ab5cf0042204e461a5d83a980849507daa6ef58dda05725bcfa7403675eb0d", 220292), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("fff456cbd82e58d6ca98db85fc03a22b982377a0f7e36525541d06b1eaaa1db0", 233960)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NotoSerif", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static notoSerifTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.notoSerif({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.notoSerif({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaCut(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("543ab5f33cdf7dc59059344f4a7edc567bd3041f068be2f42c28b47d67dcd3ba", 52852)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaCut", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaCutTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaCut({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaCut({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaCut({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaCut({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaCut({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaCut({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaCut({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaCut({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaCut({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaCut({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaCut({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaCut({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaCut({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaFlat(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("532bddc6fc21c8561e5bcd3b4e0378be147a5f2eaff0e7e9624374551f0c4a2b", 53976)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaFlat", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaFlatTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaFlat({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaFlat({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaMono(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b8d5ca79e024fdc4cd75176241d8d2b12f485ddee89219d04d8210d4f53e8919", 156104)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaMono", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaMonoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaMono({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaMono({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaMono({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaMono({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaMono({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaMono({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaMono({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaMono({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaMono({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaMono({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaMono({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaMono({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaMono({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaOval(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("73667c60ecac141cd425d3162ed4340d8b511095054d82311ae58c07da3deba4", 56484)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaOval", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaOvalTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaOval({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaOval({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaOval({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaOval({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaOval({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaOval({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaOval({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaOval({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaOval({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaOval({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaOval({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaOval({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaOval({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaRound(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("153aad90d58ece4ea5c7af76531c3fac5f2cfd1c45563654100ee416c5250af1", 53704)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaRound", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaRoundTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaRound({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaRound({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaRound({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaRound({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaRound({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaRound({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaRound({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaRound({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaRound({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaRound({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaRound({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaRound({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaRound({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9a1e6015bbc608ce441cf104443e50cf0a417624044e945f9d6f4bd0fbfd3e96", 66560)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaSlim(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("1b56497df8d2fd1b918c16eb9ff0e33f3d57c66a8c3b83e0d23aa0124ae67ca5", 53708)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaSlim", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaSlimTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaSlim({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaSlim({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static novaSquare(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e0a393378490eb55bf6732aca6c44a808436009d82e3d1c08bfe96e079af967c", 49156)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NovaSquare", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static novaSquareTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.novaSquare({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.novaSquare({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static numans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("77ee8c9adcd406c31bd7c13355d741311f9644b995946fe712a47d15fe49907e", 39320)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Numans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static numansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.numans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.numans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.numans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.numans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.numans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.numans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.numans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.numans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.numans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.numans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.numans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.numans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.numans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nunito(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6b0fb0ec88912f1ff7a203e8c74ec905e0f2333d071fcb6aa512434f693ed426", 84536), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("e542c8162e83b8b4a246d9752149784b7a910e9079625dfe29dfa33afcdacd7f", 85516), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("b6d1ca92958aefa0ca13e7461a345871a0c815ceddf57dff8f143c5cefe954ac", 84496), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("bac03390f60c9c7b5298d6e7849699b7c337daf835bb93fdff988865b0590410", 85628), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("86b77a6cf443c94b0310523682920874155c008981b3bb827cff87b769309527", 84452), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("8d666361a790f47bc95f249d2c144967589066f4c39f08d2d6a9afa7bf65570d", 85404), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("73212904c911defbb848aea031cf5c7bc5285462708823e12fdb1038f8488039", 84440), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("f3dd598262205c5e81b5834c0a103e1fd79a067d9fab79eee988633314bd4f91", 85572), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("443daf06190f4c7abd94b7917adb41656e6014e81c12eb036656d63f2b0c08a3", 84332), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("895450a4f7d173b7729b5b09d6b86710da891fa88870c08630abc1c3c186f8ea", 85344), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("18790abbb2d00a39aa0f2ddf3af3a275ce1328915d899d44e31fc996c651dc5d", 84280), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("18558eee9acc53f9de8633498a026360f25c82ef2a1e12b2ec7b9e736237be90", 85276), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("51945e9a938a0ff892a18d5e623e439bd2c363d1cf2e13251b78f545f1de1d09", 84400), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("b3cebdbb4bdd22cce2495c53142cf925a2e430788ce890e6692637f5d4bb5af4", 85376)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Nunito", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nunitoTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nunito({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nunito({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nunito({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nunito({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nunito({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nunito({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nunito({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nunito({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nunito({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nunito({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nunito({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nunito({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nunito({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static nunitoSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("70c2474c36bf599083e387d302c27f28e5439ccd1d15425222ba9855b31f6e11", 72256), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w200, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c77baab8ad61508949ffaf4c0fc2381d7f31ddc2f12f24bd32fda15d0f02970a", 73272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5af44ca8126245c16771271ce081fc4c5f5801d190ca549007575c51ec1c91da", 71848), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("acfe4eb8ed22882df2b122cfe78b0bd761d3025ed62826d5335856d565237582", 72916), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("3b369d5939d0bdfcbe583bb27259c6f6616b01b0948a86dade1dd3ec128c3898", 71716), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("988d1d496236aa9ab3e63745e0d5d82783762ea4d3a21d1940ffa2ff7111b664", 72700), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("62d9b0c17a7423bf90868c8da851ce9b40f15422fe0604d85f036703a60f6807", 71704), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("79fc6cab022106d0daaf1abc5b854c8a876df8e831445c71bc095e8be2a9bd1a", 72760), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("471cb67b6491aee31f19c1ba10edb324872722bfd6b848706ba31614fe6e1655", 71640), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("cf6f24fcf4a51b61957a7b72cb3e4c38fc3a9260e5323ee20a7b24bb2c522255", 72560), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7778244928e2e17a87dc2b7bf3a424a284ce6d4cdd2bd9a3f27fbbb31e7a1dcb", 71468), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("c0bbb1deb95af6b335d94ee8dd132d4ba26aaee59cd749c84bf1c7609a164748", 72264), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("76da9a3301eb15a1f2488e15b4385547bcde1c10b13035937296cef72d4deee6", 71596), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w900, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("1ef6bb692fd273ef402051d20962975c507172596da00ed72faf7907d1e00118", 72484)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "NunitoSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static nunitoSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.nunitoSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static odibeeSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("60c83726ff6c690c3a0e1bcdbb9ff0e6b85667b08a959d6fcc925159de6c5122", 28464)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OdibeeSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static odibeeSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.odibeeSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static odorMeanChey(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("50cfa9e8e065a77d82613a14408be3f61743af92c0b938b32e0fba703c21f027", 294900)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OdorMeanChey", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static odorMeanCheyTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.odorMeanChey({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static offside(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("c98690ef66d169347f8cc0792c75158c05d2b92130f122f890ac9cbd756c13e7", 30792)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Offside", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static offsideTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.offside({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.offside({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.offside({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.offside({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.offside({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.offside({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.offside({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.offside({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.offside({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.offside({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.offside({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.offside({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.offside({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static oldStandardTt(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("0fc6378f19416dfb6ed096305aeb6abee213fa26cbab142c18d51d02e9eeb452", 149944), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("9510de290956127c311e2965471c31d5c34905c6172d5b9af444bf336c9d956d", 164788), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("235d7e3e4dfc767cd24f3c17574e5fffc001f69a5af3942f47726c123762776a", 149128)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OldStandardTT", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static oldStandardTtTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.oldStandardTt({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static oldenburg(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("f8c67d292b49c2c0beb3655aa66d9ec6090cc7c03dcfd25c4dbc5518bc9c2ba4", 46200)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "Oldenburg", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static oldenburgTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.oldenburg({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.oldenburg({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static oleoScript(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("e45b8be9acc97bbb496e30675fa48edc79f4cfe2e8c66346914c8264acbe18b3", 34932), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("5742e5a26ecfd414f7f87868d0fb5fefead55b1227f381bfefe5243750279804", 34580)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OleoScript", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static oleoScriptTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.oleoScript({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.oleoScript({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static oleoScriptSwashCaps(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("9375d47eb832ce8884342c974dccc6d94746d0e57dd79232ee81a5ab8c9d36a5", 40040), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("fefbbb389f88ec3c2fdca446b6cd4543a073c75e48b59a1ca1c1fc03ef8756b1", 39736)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OleoScriptSwashCaps", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static oleoScriptSwashCapsTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.oleoScriptSwashCaps({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static openSans(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let fonts = new (T.LinkedMapOfGoogleFontsVariantL$GoogleFontsFileL()).from([new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("eacd6dddc04472f7143fcfe208f2e1bcd372f6baa8574529deaa2d5961e4d990", 187204), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w300, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("49c8ebe40f102f7ad2dd433e64a028047fc85d52d305404b99d691e7c6de6c84", 190952), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("7b37b8abba9dcb01b9474da19527db14307fd9211e34e4d8a3d77dc9a19f2753", 186620), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w400, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("4d84c30311be3a86ed8993c8180488f191020fae18ee4ccbd0208384a37e5fcc", 190900), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("bfdb79179948b408b6573789e358547c8b4b589b73a7eaf8781b17c452785032", 187252), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w600, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("ee3556d7dd065b889a31834e7e604d8501cc86bf4d360e5e2d0291abb30c8a86", 190272), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("39b0f5fd8bd8495e7ba04ea5bd88e0fa7ed612a5c54b6f83bc77a7715c517d88", 187976), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w700, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("6ec2660f3bd03b0f3f097fbc1c23f351f7582dc5c8859eaf84be1fd2a074089a", 190768), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.normal}), new google_fonts_descriptor.GoogleFontsFile.new("6b5975e42b3d385f32384d58429336513a51ab0845da7723ee788a0046c844a9", 187396), new google_fonts_variant.GoogleFontsVariant.new({fontWeight: ui.FontWeight.w800, fontStyle: ui.FontStyle.italic}), new google_fonts_descriptor.GoogleFontsFile.new("22818920197a7a95e75e2f91378fcc7e5f802f6067e933050b85732b71e3755e", 191556)]);
      return google_fonts_base.googleFontsTextStyle({textStyle: textStyle, fontFamily: "OpenSans", color: color, backgroundColor: backgroundColor, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, textBaseline: textBaseline, height: height, locale: locale, foreground: foreground, background: background, shadows: shadows, fontFeatures: fontFeatures, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, fonts: fonts});
    }
    static openSansTextTheme(textTheme = null) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9, t2$10;
      textTheme == null ? textTheme = theme_data.ThemeData.light().textTheme : null;
      return new text_theme.TextTheme.new({headline1: google_fonts.GoogleFonts.openSans({textStyle: (t2 = textTheme, t2 == null ? null : t2.headline1)}), headline2: google_fonts.GoogleFonts.openSans({textStyle: (t2$ = textTheme, t2$ == null ? null : t2$.headline2)}), headline3: google_fonts.GoogleFonts.openSans({textStyle: (t2$0 = textTheme, t2$0 == null ? null : t2$0.headline3)}), headline4: google_fonts.GoogleFonts.openSans({textStyle: (t2$1 = textTheme, t2$1 == null ? null : t2$1.headline4)}), headline5: google_fonts.GoogleFonts.openSans({textStyle: (t2$2 = textTheme, t2$2 == null ? null : t2$2.headline5)}), headline6: google_fonts.GoogleFonts.openSans({textStyle: (t2$3 = textTheme, t2$3 == null ? null : t2$3.headline6)}), subtitle1: google_fonts.GoogleFonts.openSans({textStyle: (t2$4 = textTheme, t2$4 == null ? null : t2$4.subtitle1)}), subtitle2: google_fonts.GoogleFonts.openSans({textStyle: (t2$5 = textTheme, t2$5 == null ? null : t2$5.subtitle2)}), bodyText1: google_fonts.GoogleFonts.openSans({textStyle: (t2$6 = textTheme, t2$6 == null ? null : t2$6.bodyText1)}), bodyText2: google_fonts.GoogleFonts.openSans({textStyle: (t2$7 = textTheme, t2$7 == null ? null : t2$7.bodyText2)}), caption: google_fonts.GoogleFonts.openSans({textStyle: (t2$8 = textTheme, t2$8 == null ? null : t2$8.caption)}), button: google_fonts.GoogleFonts.openSans({textStyle: (t2$9 = textTheme, t2$9 == null ? null : t2$9.button)}), overline: google_fonts.GoogleFonts.openSans({textStyle: (t2$10 = textTheme, t2$10 == null ? null : t2$10.overline)})});
    }
    static openSansCondensed(opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in o