define(['dart_sdk', 'packages/rxdart/src/utils/forwarding_sink.dart', 'packages/rxdart/src/utils/error_and_stacktrace.dart', 'packages/rxdart/src/streams/timer.dart', 'packages/rxdart/src/streams/never.dart', 'packages/rxdart/src/streams/zip.dart', 'packages/rxdart/src/subjects/subject.dart', 'packages/rxdart/src/streams/replay_stream.dart', 'packages/rxdart/src/streams/value_stream.dart', 'packages/rxdart/src/subjects/publish_subject.dart', 'packages/rxdart/src/streams/combine_latest.dart', 'packages/rxdart/src/streams/concat.dart', 'packages/rxdart/src/streams/concat_eager.dart', 'packages/rxdart/src/streams/defer.dart', 'packages/rxdart/src/streams/fork_join.dart', 'packages/rxdart/src/streams/from_callable.dart', 'packages/rxdart/src/streams/merge.dart', 'packages/rxdart/src/streams/race.dart', 'packages/rxdart/src/streams/range.dart', 'packages/rxdart/src/streams/repeat.dart', 'packages/rxdart/src/streams/retry.dart', 'packages/rxdart/src/streams/retry_when.dart', 'packages/rxdart/src/streams/switch_latest.dart', 'packages/rxdart/src/streams/using.dart'], (function load__packages__rxdart__src__transformers__with_latest_from_dart(dart_sdk, packages__rxdart__src__utils__forwarding_sink$46dart, packages__rxdart__src__utils__error_and_stacktrace$46dart, packages__rxdart__src__streams__timer$46dart, packages__rxdart__src__streams__never$46dart, packages__rxdart__src__streams__zip$46dart, packages__rxdart__src__subjects__subject$46dart, packages__rxdart__src__streams__replay_stream$46dart, packages__rxdart__src__streams__value_stream$46dart, packages__rxdart__src__subjects__publish_subject$46dart, packages__rxdart__src__streams__combine_latest$46dart, packages__rxdart__src__streams__concat$46dart, packages__rxdart__src__streams__concat_eager$46dart, packages__rxdart__src__streams__defer$46dart, packages__rxdart__src__streams__fork_join$46dart, packages__rxdart__src__streams__from_callable$46dart, packages__rxdart__src__streams__merge$46dart, packages__rxdart__src__streams__race$46dart, packages__rxdart__src__streams__range$46dart, packages__rxdart__src__streams__repeat$46dart, packages__rxdart__src__streams__retry$46dart, packages__rxdart__src__streams__retry_when$46dart, packages__rxdart__src__streams__switch_latest$46dart, packages__rxdart__src__streams__using$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const forwarding_sink = packages__rxdart__src__utils__forwarding_sink$46dart.src__utils__forwarding_sink;
  const error_and_stacktrace = packages__rxdart__src__utils__error_and_stacktrace$46dart.src__utils__error_and_stacktrace;
  const timer = packages__rxdart__src__streams__timer$46dart.src__streams__timer;
  const never = packages__rxdart__src__streams__never$46dart.src__streams__never;
  const zip = packages__rxdart__src__streams__zip$46dart.src__streams__zip;
  const subject = packages__rxdart__src__subjects__subject$46dart.src__subjects__subject;
  const replay_stream = packages__rxdart__src__streams__replay_stream$46dart.src__streams__replay_stream;
  const value_stream = packages__rxdart__src__streams__value_stream$46dart.src__streams__value_stream;
  const publish_subject = packages__rxdart__src__subjects__publish_subject$46dart.src__subjects__publish_subject;
  const combine_latest = packages__rxdart__src__streams__combine_latest$46dart.src__streams__combine_latest;
  const concat = packages__rxdart__src__streams__concat$46dart.src__streams__concat;
  const concat_eager = packages__rxdart__src__streams__concat_eager$46dart.src__streams__concat_eager;
  const defer = packages__rxdart__src__streams__defer$46dart.src__streams__defer;
  const fork_join = packages__rxdart__src__streams__fork_join$46dart.src__streams__fork_join;
  const from_callable = packages__rxdart__src__streams__from_callable$46dart.src__streams__from_callable;
  const merge = packages__rxdart__src__streams__merge$46dart.src__streams__merge;
  const race = packages__rxdart__src__streams__race$46dart.src__streams__race;
  const range = packages__rxdart__src__streams__range$46dart.src__streams__range;
  const repeat = packages__rxdart__src__streams__repeat$46dart.src__streams__repeat;
  const retry = packages__rxdart__src__streams__retry$46dart.src__streams__retry;
  const retry_when = packages__rxdart__src__streams__retry_when$46dart.src__streams__retry_when;
  const switch_latest = packages__rxdart__src__streams__switch_latest$46dart.src__streams__switch_latest;
  const using = packages__rxdart__src__streams__using$46dart.src__streams__using;
  var with_latest_from = Object.create(dart.library);
  var time_interval = Object.create(dart.library);
  var take_until = Object.create(dart.library);
  var switch_map = Object.create(dart.library);
  var switch_if_empty = Object.create(dart.library);
  var start_with_many = Object.create(dart.library);
  var skip_until = Object.create(dart.library);
  var on_error_resume = Object.create(dart.library);
  var flat_map = Object.create(dart.library);
  var exhaust_map = Object.create(dart.library);
  var $do = Object.create(dart.library);
  var dematerialize = Object.create(dart.library);
  var window$ = Object.create(dart.library);
  var throttle = Object.create(dart.library);
  var sample = Object.create(dart.library);
  var pairwise = Object.create(dart.library);
  var debounce = Object.create(dart.library);
  var backpressure = Object.create(dart.library);
  var buffer = Object.create(dart.library);
  var transformers = Object.create(dart.library);
  var notification = Object.create(dart.library);
  var materialize = Object.create(dart.library);
  var sequence_equal = Object.create(dart.library);
  var replay_subject = Object.create(dart.library);
  var start_with_error = Object.create(dart.library);
  var forwarding_stream = Object.create(dart.library);
  var start_with = Object.create(dart.library);
  var behavior_subject = Object.create(dart.library);
  var subjects = Object.create(dart.library);
  var connectable_stream = Object.create(dart.library);
  var streams = Object.create(dart.library);
  var rx = Object.create(dart.library);
  var rxdart = Object.create(dart.library);
  var $length = dartx.length;
  var $every = dartx.every;
  var $forEach = dartx.forEach;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $whereType = dartx.whereType;
  var $_set = dartx._set;
  var $toList = dartx.toList;
  var $any = dartx.any;
  var $addAll = dartx.addAll;
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $toString = dartx.toString;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $where = dartx.where;
  var $last = dartx.last;
  var $reversed = dartx.reversed;
  var $fold = dartx.fold;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ListOfboolL: () => (T$.ListOfboolL = dart.constFn(core.List$(T$.boolL())))(),
    boolLToboolL: () => (T$.boolLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.boolL()])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureLOfvoid: () => (T$.FutureLOfvoid = dart.constFn(dart.legacy(T$.FutureOfvoid())))(),
    FutureL: () => (T$.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    JSArrayOfFutureL: () => (T$.JSArrayOfFutureL = dart.constFn(_interceptors.JSArray$(T$.FutureL())))(),
    StreamL: () => (T$.StreamL = dart.constFn(dart.legacy(async.Stream)))(),
    JSArrayOfStreamL: () => (T$.JSArrayOfStreamL = dart.constFn(_interceptors.JSArray$(T$.StreamL())))(),
    ListL: () => (T$.ListL = dart.constFn(dart.legacy(core.List)))(),
    TimeIntervalL: () => (T$.TimeIntervalL = dart.constFn(dart.legacy(time_interval.TimeInterval)))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    FutureLOfvoidToboolL: () => (T$.FutureLOfvoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.FutureLOfvoid()])))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    ObjectLAndStackTraceLTovoid: () => (T$.ObjectLAndStackTraceLTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectL(), T$.StackTraceL()])))(),
    ObjectLAndStackTraceLToLvoid: () => (T$.ObjectLAndStackTraceLToLvoid = dart.constFn(dart.legacy(T$.ObjectLAndStackTraceLTovoid())))(),
    NotificationOfNull: () => (T$.NotificationOfNull = dart.constFn(notification.Notification$(core.Null)))(),
    NotificationL: () => (T$.NotificationL = dart.constFn(dart.legacy(notification.Notification)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    StreamOfvoid: () => (T$.StreamOfvoid = dart.constFn(async.Stream$(dart.void)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    TimerStreamOfboolL: () => (T$.TimerStreamOfboolL = dart.constFn(timer.TimerStream$(T$.boolL())))(),
    TimerStreamLOfboolL: () => (T$.TimerStreamLOfboolL = dart.constFn(dart.legacy(T$.TimerStreamOfboolL())))(),
    NeverStreamOfvoid: () => (T$.NeverStreamOfvoid = dart.constFn(never.NeverStream$(dart.void)))(),
    NeverStreamLOfvoid: () => (T$.NeverStreamLOfvoid = dart.constFn(dart.legacy(T$.NeverStreamOfvoid())))(),
    TimerStreamOfvoid: () => (T$.TimerStreamOfvoid = dart.constFn(timer.TimerStream$(dart.void)))(),
    TimerStreamLOfvoid: () => (T$.TimerStreamLOfvoid = dart.constFn(dart.legacy(T$.TimerStreamOfvoid())))(),
    WindowStrategyL: () => (T$.WindowStrategyL = dart.constFn(dart.legacy(backpressure.WindowStrategy)))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    intLTovoid: () => (T$.intLTovoid = dart.constFn(dart.fnType(dart.void, [T$.intL()])))(),
    KindL: () => (T$.KindL = dart.constFn(dart.legacy(notification.Kind)))(),
    StreamControllerOfboolL: () => (T$.StreamControllerOfboolL = dart.constFn(async.StreamController$(T$.boolL())))(),
    StreamControllerLOfboolL: () => (T$.StreamControllerLOfboolL = dart.constFn(dart.legacy(T$.StreamControllerOfboolL())))(),
    boolLToStreamControllerLOfboolL: () => (T$.boolLToStreamControllerLOfboolL = dart.constFn(dart.fnType(T$.StreamControllerLOfboolL(), [], [T$.boolL()])))(),
    VoidToFutureLOfvoid: () => (T$.VoidToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [])))(),
    ErrorAndStackTraceL: () => (T$.ErrorAndStackTraceL = dart.constFn(dart.legacy(error_and_stacktrace.ErrorAndStackTrace)))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidToLvoid()])))(),
    dynamicAndStackTraceLTovoid: () => (T$.dynamicAndStackTraceLTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, T$.StackTraceL()])))(),
    FutureOfListL: () => (T$.FutureOfListL = dart.constFn(async.Future$(T$.ListL())))(),
    FutureLOfListL: () => (T$.FutureLOfListL = dart.constFn(dart.legacy(T$.FutureOfListL())))(),
    VoidToFutureLOfListL: () => (T$.VoidToFutureLOfListL = dart.constFn(dart.fnType(T$.FutureLOfListL(), [])))(),
    VoidToFutureL: () => (T$.VoidToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [])))(),
    voidToFutureL: () => (T$.voidToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [dart.void])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: notification.Kind.prototype,
        [_name$]: "Kind.OnDone",
        index: 1
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: T$.NotificationOfNull().prototype,
        [errorAndStackTrace$]: null,
        [value$0]: null,
        [kind$]: C[1] || CT.C1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$0]: "WindowStrategy.everyEvent",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$0]: "WindowStrategy.eventAfterLastWindow",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$0]: "WindowStrategy.firstEventOnly",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$0]: "WindowStrategy.onHandler",
        index: 3
      });
    },
    get C6() {
      return C[6] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5], T$.WindowStrategyL());
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: notification.Kind.prototype,
        [_name$]: "Kind.OnData",
        index: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: notification.Kind.prototype,
        [_name$]: "Kind.OnError",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.constList([C[7] || CT.C7, C[1] || CT.C1, C[8] || CT.C8], T$.KindL());
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:rxdart/src/transformers/with_latest_from.dart",
    "package:rxdart/src/transformers/time_interval.dart",
    "package:rxdart/src/transformers/take_until.dart",
    "package:rxdart/src/transformers/switch_map.dart",
    "package:rxdart/src/transformers/switch_if_empty.dart",
    "package:rxdart/src/transformers/start_with_many.dart",
    "package:rxdart/src/transformers/skip_until.dart",
    "package:rxdart/src/transformers/on_error_resume.dart",
    "package:rxdart/src/transformers/flat_map.dart",
    "package:rxdart/src/transformers/exhaust_map.dart",
    "package:rxdart/src/transformers/do.dart",
    "package:rxdart/src/transformers/dematerialize.dart",
    "package:rxdart/src/utils/notification.dart",
    "package:rxdart/src/transformers/backpressure/backpressure.dart",
    "package:rxdart/src/transformers/backpressure/window.dart",
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/rxdart-0.25.0/lib/src/transformers/backpressure/throttle.dart",
    "package:rxdart/src/transformers/backpressure/throttle.dart",
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/rxdart-0.25.0/lib/src/transformers/backpressure/sample.dart",
    "package:rxdart/src/transformers/backpressure/sample.dart",
    "package:rxdart/src/transformers/backpressure/pairwise.dart",
    "file:///D:/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/rxdart-0.25.0/lib/src/transformers/backpressure/debounce.dart",
    "package:rxdart/src/transformers/backpressure/debounce.dart",
    "package:rxdart/src/transformers/backpressure/buffer.dart",
    "package:rxdart/src/transformers/materialize.dart",
    "package:rxdart/src/streams/sequence_equal.dart",
    "package:rxdart/src/subjects/replay_subject.dart",
    "package:rxdart/src/transformers/start_with_error.dart",
    "package:rxdart/src/transformers/start_with.dart",
    "package:rxdart/src/subjects/behavior_subject.dart",
    "package:rxdart/src/streams/connectable_stream.dart",
    "package:rxdart/src/rx.dart"
  ];
  var _subscriptions = dart.privateName(with_latest_from, "_subscriptions");
  var _latestFromStreams$ = dart.privateName(with_latest_from, "_latestFromStreams");
  var _combiner$ = dart.privateName(with_latest_from, "_combiner");
  var _hasValues = dart.privateName(with_latest_from, "_hasValues");
  var _latestValues = dart.privateName(with_latest_from, "_latestValues");
  const _is__WithLatestFromStreamSink_default = Symbol('_is__WithLatestFromStreamSink_default');
  with_latest_from._WithLatestFromStreamSink$ = dart.generic((S, T, R) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamSubscriptionLOfTLToFutureLOfvoid = () => (StreamSubscriptionLOfTLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfTL()])))();
    var TLToNull = () => (TLToNull = dart.constFn(dart.fnType(core.Null, [TL()])))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var StreamLOfTLToStreamSubscriptionLOfTL = () => (StreamLOfTLToStreamSubscriptionLOfTL = dart.constFn(dart.fnType(StreamSubscriptionLOfTL(), [StreamLOfTL()])))();
    var StreamSubscriptionLOfTLTovoid = () => (StreamSubscriptionLOfTLTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionLOfTL()])))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    var EventSinkOfRL = () => (EventSinkOfRL = dart.constFn(async.EventSink$(RL())))();
    var EventSinkLOfRL = () => (EventSinkLOfRL = dart.constFn(dart.legacy(EventSinkOfRL())))();
    class _WithLatestFromStreamSink extends core.Object {
      add(sink, data) {
        let t1, t0;
        EventSinkLOfRL().as(sink);
        SL().as(data);
        if (dart.test(this[_hasValues][$every](dart.fn(value => value, T$.boolLToboolL())))) {
          sink.add((t0 = data, t1 = ListOfTL().unmodifiable(this[_latestValues]), this[_combiner$](t0, t1)));
        }
      }
      addError(sink, e, st = null) {
        EventSinkLOfRL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t0;
        EventSinkLOfRL().as(sink);
        t0 = this[_subscriptions];
        t0 == null ? null : t0[$forEach](dart.fn(it => it.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid()));
        this[_subscriptions] = null;
        sink.close();
      }
      onCancel(sink) {
        EventSinkLOfRL().as(sink);
        let futures = T$.JSArrayOfFutureL().of([]);
        if (this[_subscriptions] != null && dart.test(this[_subscriptions][$isNotEmpty])) {
          futures = this[_subscriptions][$map](T$.FutureLOfvoid(), dart.fn(it => it.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid()))[$whereType](T$.FutureL());
        }
        return dart.test(futures[$isNotEmpty]) ? async.Future.wait(dart.dynamic, futures) : null;
      }
      onListen(sink) {
        EventSinkLOfRL().as(sink);
        let index = 0;
        let mapper = dart.fn(stream => {
          let t0;
          let i = (t0 = index, index = t0 + 1, t0);
          return stream.listen(dart.fn(it => {
            this[_hasValues][$_set](i, true);
            this[_latestValues][$_set](i, it);
          }, TLToNull()), {onError: dart.bind(sink, 'addError')});
        }, StreamLOfTLToStreamSubscriptionLOfTL());
        this[_subscriptions] = this[_latestFromStreams$][$map](StreamSubscriptionLOfTL(), mapper)[$toList]({growable: false});
      }
      onPause(sink) {
        let t0;
        EventSinkLOfRL().as(sink);
        t0 = this[_subscriptions];
        return t0 == null ? null : t0[$forEach](dart.fn(it => it.pause(), StreamSubscriptionLOfTLTovoid()));
      }
      onResume(sink) {
        let t0;
        EventSinkLOfRL().as(sink);
        t0 = this[_subscriptions];
        return t0 == null ? null : t0[$forEach](dart.fn(it => it.resume(), StreamSubscriptionLOfTLTovoid()));
      }
    }
    (_WithLatestFromStreamSink.new = function(_latestFromStreams, _combiner) {
      this[_subscriptions] = null;
      this[_latestFromStreams$] = _latestFromStreams;
      this[_combiner$] = _combiner;
      this[_hasValues] = T$.ListOfboolL().filled(_latestFromStreams[$length], false);
      this[_latestValues] = ListOfTL().new(_latestFromStreams[$length]);
      ;
    }).prototype = _WithLatestFromStreamSink.prototype;
    dart.addTypeTests(_WithLatestFromStreamSink);
    _WithLatestFromStreamSink.prototype[_is__WithLatestFromStreamSink_default] = true;
    dart.addTypeCaches(_WithLatestFromStreamSink);
    _WithLatestFromStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(R))];
    dart.setMethodSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getMethods(_WithLatestFromStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_WithLatestFromStreamSink, I[0]);
    dart.setFieldSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getFields(_WithLatestFromStreamSink.__proto__),
      [_latestFromStreams$]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(async.Stream$(dart.legacy(T)))))),
      [_combiner$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(S), dart.legacy(core.List$(dart.legacy(T)))]))),
      [_hasValues]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.bool)))),
      [_latestValues]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      [_subscriptions]: dart.fieldType(dart.legacy(core.List$(dart.legacy(async.StreamSubscription$(dart.legacy(T))))))
    }));
    return _WithLatestFromStreamSink;
  });
  with_latest_from._WithLatestFromStreamSink = with_latest_from._WithLatestFromStreamSink$();
  dart.addTypeTests(with_latest_from._WithLatestFromStreamSink, _is__WithLatestFromStreamSink_default);
  var latestFromStreams$ = dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.latestFromStreams");
  var combiner$ = dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.combiner");
  const _is_WithLatestFromStreamTransformer_default = Symbol('_is_WithLatestFromStreamTransformer_default');
  with_latest_from.WithLatestFromStreamTransformer$ = dart.generic((S, T, R) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _WithLatestFromStreamSinkOfSL$TL$RL = () => (_WithLatestFromStreamSinkOfSL$TL$RL = dart.constFn(with_latest_from._WithLatestFromStreamSink$(SL(), TL(), RL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var StreamLOfTLToboolL = () => (StreamLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [StreamLOfTL()])))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class WithLatestFromStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(R)) {
      get latestFromStreams() {
        return this[latestFromStreams$];
      }
      set latestFromStreams(value) {
        super.latestFromStreams = value;
      }
      get combiner() {
        return this[combiner$];
      }
      set combiner(value) {
        super.combiner = value;
      }
      static withList(T, latestFromStreams) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.legacy(T), dart.legacy(core.List$(dart.legacy(T))))).new(latestFromStreams, dart.fn((s, values) => (() => {
          let t0 = _interceptors.JSArray$(dart.legacy(T)).of([s]);
          t0[$addAll](values);
          return t0;
        })(), dart.fnType(dart.legacy(core.List$(dart.legacy(T))), [dart.legacy(T), dart.legacy(core.List$(dart.legacy(T)))])));
      }
      static with1(T, S, R, latestFromStream, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.legacy(S), dart.legacy(R))).new(_interceptors.JSArray$(dart.legacy(async.Stream$(dart.legacy(S)))).of([latestFromStream]), dart.fn((s, values) => fn(s, values[$_get](0)), dart.fnType(dart.legacy(R), [dart.legacy(T), dart.legacy(core.List$(dart.legacy(S)))])));
      }
      static with2(T, A, B, R, latestFromStream1, latestFromStream2, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with3(T, A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with4(T, A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with5(T, A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with6(T, A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with7(T, A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with8(T, A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6)), dart.legacy(H).as(values[$_get](7))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      static with9(T, A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
        if (fn == null) {
          dart.throw(new core.ArgumentError.new("Combiner cannot be null"));
        }
        return new (with_latest_from.WithLatestFromStreamTransformer$(dart.legacy(T), dart.dynamic, dart.legacy(R))).new(T$.JSArrayOfStreamL().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9]), dart.fn((s, values) => fn(s, dart.legacy(A).as(values[$_get](0)), dart.legacy(B).as(values[$_get](1)), dart.legacy(C).as(values[$_get](2)), dart.legacy(D).as(values[$_get](3)), dart.legacy(E).as(values[$_get](4)), dart.legacy(F).as(values[$_get](5)), dart.legacy(G).as(values[$_get](6)), dart.legacy(H).as(values[$_get](7)), dart.legacy(I).as(values[$_get](8))), dart.fnType(dart.legacy(R), [dart.legacy(T), T$.ListL()])));
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), RL(), stream, new (_WithLatestFromStreamSinkOfSL$TL$RL()).new(this.latestFromStreams, this.combiner));
      }
    }
    (WithLatestFromStreamTransformer.new = function(latestFromStreams, combiner) {
      this[latestFromStreams$] = latestFromStreams;
      this[combiner$] = combiner;
      WithLatestFromStreamTransformer.__proto__.new.call(this);
      if (this.latestFromStreams == null) {
        dart.throw(new core.ArgumentError.new("latestFromStreams cannot be null"));
      }
      if (dart.test(this.latestFromStreams[$any](dart.fn(s => s == null, StreamLOfTLToboolL())))) {
        dart.throw(new core.ArgumentError.new("All streams must be not null"));
      }
      if (this.combiner == null) {
        dart.throw(new core.ArgumentError.new("combiner cannot be null"));
      }
    }).prototype = WithLatestFromStreamTransformer.prototype;
    dart.addTypeTests(WithLatestFromStreamTransformer);
    WithLatestFromStreamTransformer.prototype[_is_WithLatestFromStreamTransformer_default] = true;
    dart.addTypeCaches(WithLatestFromStreamTransformer);
    dart.setMethodSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getMethods(WithLatestFromStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(R))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(WithLatestFromStreamTransformer, I[0]);
    dart.setFieldSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getFields(WithLatestFromStreamTransformer.__proto__),
      latestFromStreams: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(async.Stream$(dart.legacy(T)))))),
      combiner: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(S), dart.legacy(core.List$(dart.legacy(T)))])))
    }));
    return WithLatestFromStreamTransformer;
  });
  with_latest_from.WithLatestFromStreamTransformer = with_latest_from.WithLatestFromStreamTransformer$();
  dart.addTypeTests(with_latest_from.WithLatestFromStreamTransformer, _is_WithLatestFromStreamTransformer_default);
  with_latest_from['WithLatestFromExtensions|withLatestFrom'] = function WithLatestFromExtensions$124withLatestFrom(T, S, R, $this, latestFromStream, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with1(dart.legacy(T), dart.legacy(S), dart.legacy(R), latestFromStream, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom'] = function WithLatestFromExtensions$124get$35withLatestFrom(T, $this) {
    return dart.fn((S, R, latestFromStream, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom'](dart.legacy(T), dart.legacy(S), dart.legacy(R), $this, latestFromStream, fn), dart.gFnType((S, R) => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfSL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), SL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFromList'] = function WithLatestFromExtensions$124withLatestFromList(T, $this, latestFromStreams) {
    return $this.transform(dart.legacy(core.List$(dart.legacy(T))), with_latest_from.WithLatestFromStreamTransformer.withList(dart.legacy(T), latestFromStreams));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFromList'] = function WithLatestFromExtensions$124get$35withLatestFromList(T, $this) {
    return dart.fn(latestFromStreams => with_latest_from['WithLatestFromExtensions|withLatestFromList'](dart.legacy(T), $this, latestFromStreams), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(T))))), [dart.legacy(core.Iterable$(dart.legacy(async.Stream$(dart.legacy(T)))))]));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom2'] = function WithLatestFromExtensions$124withLatestFrom2(T, A, B, R, $this, latestFromStream1, latestFromStream2, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with2(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(R), latestFromStream1, latestFromStream2, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom2'] = function WithLatestFromExtensions$124get$35withLatestFrom2(T, $this) {
    return dart.fn((A, B, R, latestFromStream1, latestFromStream2, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom2'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(R), $this, latestFromStream1, latestFromStream2, fn), dart.gFnType((A, B, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom3'] = function WithLatestFromExtensions$124withLatestFrom3(T, A, B, C, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with3(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom3'] = function WithLatestFromExtensions$124get$35withLatestFrom3(T, $this) {
    return dart.fn((A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom3'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, fn), dart.gFnType((A, B, C, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom4'] = function WithLatestFromExtensions$124withLatestFrom4(T, A, B, C, D, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with4(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom4'] = function WithLatestFromExtensions$124get$35withLatestFrom4(T, $this) {
    return dart.fn((A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom4'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn), dart.gFnType((A, B, C, D, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom5'] = function WithLatestFromExtensions$124withLatestFrom5(T, A, B, C, D, E, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with5(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom5'] = function WithLatestFromExtensions$124get$35withLatestFrom5(T, $this) {
    return dart.fn((A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom5'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn), dart.gFnType((A, B, C, D, E, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var EL = () => (EL = dart.constFn(dart.legacy(E)))();
      var StreamOfEL = () => (StreamOfEL = dart.constFn(async.Stream$(EL())))();
      var StreamLOfEL = () => (StreamLOfEL = dart.constFn(dart.legacy(StreamOfEL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), StreamLOfEL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL(), EL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom6'] = function WithLatestFromExtensions$124withLatestFrom6(T, A, B, C, D, E, F, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with6(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom6'] = function WithLatestFromExtensions$124get$35withLatestFrom6(T, $this) {
    return dart.fn((A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom6'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn), dart.gFnType((A, B, C, D, E, F, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var EL = () => (EL = dart.constFn(dart.legacy(E)))();
      var StreamOfEL = () => (StreamOfEL = dart.constFn(async.Stream$(EL())))();
      var StreamLOfEL = () => (StreamLOfEL = dart.constFn(dart.legacy(StreamOfEL())))();
      var FL = () => (FL = dart.constFn(dart.legacy(F)))();
      var StreamOfFL = () => (StreamOfFL = dart.constFn(async.Stream$(FL())))();
      var StreamLOfFL = () => (StreamLOfFL = dart.constFn(dart.legacy(StreamOfFL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), StreamLOfEL(), StreamLOfFL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL(), EL(), FL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom7'] = function WithLatestFromExtensions$124withLatestFrom7(T, A, B, C, D, E, F, G, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with7(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom7'] = function WithLatestFromExtensions$124get$35withLatestFrom7(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom7'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn), dart.gFnType((A, B, C, D, E, F, G, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var EL = () => (EL = dart.constFn(dart.legacy(E)))();
      var StreamOfEL = () => (StreamOfEL = dart.constFn(async.Stream$(EL())))();
      var StreamLOfEL = () => (StreamLOfEL = dart.constFn(dart.legacy(StreamOfEL())))();
      var FL = () => (FL = dart.constFn(dart.legacy(F)))();
      var StreamOfFL = () => (StreamOfFL = dart.constFn(async.Stream$(FL())))();
      var StreamLOfFL = () => (StreamLOfFL = dart.constFn(dart.legacy(StreamOfFL())))();
      var GL = () => (GL = dart.constFn(dart.legacy(G)))();
      var StreamOfGL = () => (StreamOfGL = dart.constFn(async.Stream$(GL())))();
      var StreamLOfGL = () => (StreamLOfGL = dart.constFn(dart.legacy(StreamOfGL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), StreamLOfEL(), StreamLOfFL(), StreamLOfGL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL(), EL(), FL(), GL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom8'] = function WithLatestFromExtensions$124withLatestFrom8(T, A, B, C, D, E, F, G, H, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with8(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom8'] = function WithLatestFromExtensions$124get$35withLatestFrom8(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom8'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn), dart.gFnType((A, B, C, D, E, F, G, H, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var EL = () => (EL = dart.constFn(dart.legacy(E)))();
      var StreamOfEL = () => (StreamOfEL = dart.constFn(async.Stream$(EL())))();
      var StreamLOfEL = () => (StreamLOfEL = dart.constFn(dart.legacy(StreamOfEL())))();
      var FL = () => (FL = dart.constFn(dart.legacy(F)))();
      var StreamOfFL = () => (StreamOfFL = dart.constFn(async.Stream$(FL())))();
      var StreamLOfFL = () => (StreamLOfFL = dart.constFn(dart.legacy(StreamOfFL())))();
      var GL = () => (GL = dart.constFn(dart.legacy(G)))();
      var StreamOfGL = () => (StreamOfGL = dart.constFn(async.Stream$(GL())))();
      var StreamLOfGL = () => (StreamLOfGL = dart.constFn(dart.legacy(StreamOfGL())))();
      var HL = () => (HL = dart.constFn(dart.legacy(H)))();
      var StreamOfHL = () => (StreamOfHL = dart.constFn(async.Stream$(HL())))();
      var StreamLOfHL = () => (StreamLOfHL = dart.constFn(dart.legacy(StreamOfHL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), StreamLOfEL(), StreamLOfFL(), StreamLOfGL(), StreamLOfHL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL(), EL(), FL(), GL(), HL()]))]];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom9'] = function WithLatestFromExtensions$124withLatestFrom9(T, A, B, C, D, E, F, G, H, I, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
    return $this.transform(dart.legacy(R), with_latest_from.WithLatestFromStreamTransformer.with9(dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(I), dart.legacy(R), latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom9'] = function WithLatestFromExtensions$124get$35withLatestFrom9(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom9'](dart.legacy(T), dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(I), dart.legacy(R), $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn), dart.gFnType((A, B, C, D, E, F, G, H, I, R) => {
      var AL = () => (AL = dart.constFn(dart.legacy(A)))();
      var StreamOfAL = () => (StreamOfAL = dart.constFn(async.Stream$(AL())))();
      var StreamLOfAL = () => (StreamLOfAL = dart.constFn(dart.legacy(StreamOfAL())))();
      var BL = () => (BL = dart.constFn(dart.legacy(B)))();
      var StreamOfBL = () => (StreamOfBL = dart.constFn(async.Stream$(BL())))();
      var StreamLOfBL = () => (StreamLOfBL = dart.constFn(dart.legacy(StreamOfBL())))();
      var CL = () => (CL = dart.constFn(dart.legacy(C)))();
      var StreamOfCL = () => (StreamOfCL = dart.constFn(async.Stream$(CL())))();
      var StreamLOfCL = () => (StreamLOfCL = dart.constFn(dart.legacy(StreamOfCL())))();
      var DL = () => (DL = dart.constFn(dart.legacy(D)))();
      var StreamOfDL = () => (StreamOfDL = dart.constFn(async.Stream$(DL())))();
      var StreamLOfDL = () => (StreamLOfDL = dart.constFn(dart.legacy(StreamOfDL())))();
      var EL = () => (EL = dart.constFn(dart.legacy(E)))();
      var StreamOfEL = () => (StreamOfEL = dart.constFn(async.Stream$(EL())))();
      var StreamLOfEL = () => (StreamLOfEL = dart.constFn(dart.legacy(StreamOfEL())))();
      var FL = () => (FL = dart.constFn(dart.legacy(F)))();
      var StreamOfFL = () => (StreamOfFL = dart.constFn(async.Stream$(FL())))();
      var StreamLOfFL = () => (StreamLOfFL = dart.constFn(dart.legacy(StreamOfFL())))();
      var GL = () => (GL = dart.constFn(dart.legacy(G)))();
      var StreamOfGL = () => (StreamOfGL = dart.constFn(async.Stream$(GL())))();
      var StreamLOfGL = () => (StreamLOfGL = dart.constFn(dart.legacy(StreamOfGL())))();
      var HL = () => (HL = dart.constFn(dart.legacy(H)))();
      var StreamOfHL = () => (StreamOfHL = dart.constFn(async.Stream$(HL())))();
      var StreamLOfHL = () => (StreamLOfHL = dart.constFn(dart.legacy(StreamOfHL())))();
      var IL = () => (IL = dart.constFn(dart.legacy(I)))();
      var StreamOfIL = () => (StreamOfIL = dart.constFn(async.Stream$(IL())))();
      var StreamLOfIL = () => (StreamLOfIL = dart.constFn(dart.legacy(StreamOfIL())))();
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var StreamOfRL = () => (StreamOfRL = dart.constFn(async.Stream$(RL())))();
      var StreamLOfRL = () => (StreamLOfRL = dart.constFn(dart.legacy(StreamOfRL())))();
      return [StreamLOfRL(), [StreamLOfAL(), StreamLOfBL(), StreamLOfCL(), StreamLOfDL(), StreamLOfEL(), StreamLOfFL(), StreamLOfGL(), StreamLOfHL(), StreamLOfIL(), dart.legacy(dart.fnType(RL(), [dart.legacy(T), AL(), BL(), CL(), DL(), EL(), FL(), GL(), HL(), IL()]))]];
    }));
  };
  var _stopwatch = dart.privateName(time_interval, "_stopwatch");
  const _is__TimeIntervalStreamSink_default = Symbol('_is__TimeIntervalStreamSink_default');
  time_interval._TimeIntervalStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TimeIntervalOfSL = () => (TimeIntervalOfSL = dart.constFn(time_interval.TimeInterval$(SL())))();
    var TimeIntervalLOfSL = () => (TimeIntervalLOfSL = dart.constFn(dart.legacy(TimeIntervalOfSL())))();
    var EventSinkOfTimeIntervalLOfSL = () => (EventSinkOfTimeIntervalLOfSL = dart.constFn(async.EventSink$(TimeIntervalLOfSL())))();
    var EventSinkLOfTimeIntervalLOfSL = () => (EventSinkLOfTimeIntervalLOfSL = dart.constFn(dart.legacy(EventSinkOfTimeIntervalLOfSL())))();
    class _TimeIntervalStreamSink extends core.Object {
      add(sink, data) {
        let t21;
        EventSinkLOfTimeIntervalLOfSL().as(sink);
        SL().as(data);
        this[_stopwatch].stop();
        sink.add(new (TimeIntervalOfSL()).new(data, new core.Duration.new({microseconds: this[_stopwatch].elapsedMicroseconds})));
        t21 = this[_stopwatch];
        (() => {
          t21.reset();
          t21.start();
          return t21;
        })();
      }
      addError(sink, e, st = null) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
        return sink.close();
      }
      onCancel(sink) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
      }
      onListen(sink) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
        return this[_stopwatch].start();
      }
      onPause(sink) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
      }
      onResume(sink) {
        EventSinkLOfTimeIntervalLOfSL().as(sink);
      }
    }
    (_TimeIntervalStreamSink.new = function() {
      this[_stopwatch] = new core.Stopwatch.new();
      ;
    }).prototype = _TimeIntervalStreamSink.prototype;
    dart.addTypeTests(_TimeIntervalStreamSink);
    _TimeIntervalStreamSink.prototype[_is__TimeIntervalStreamSink_default] = true;
    dart.addTypeCaches(_TimeIntervalStreamSink);
    _TimeIntervalStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(time_interval.TimeInterval$(dart.legacy(S))))];
    dart.setMethodSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getMethods(_TimeIntervalStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_TimeIntervalStreamSink, I[1]);
    dart.setFieldSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getFields(_TimeIntervalStreamSink.__proto__),
      [_stopwatch]: dart.finalFieldType(dart.legacy(core.Stopwatch))
    }));
    return _TimeIntervalStreamSink;
  });
  time_interval._TimeIntervalStreamSink = time_interval._TimeIntervalStreamSink$();
  dart.addTypeTests(time_interval._TimeIntervalStreamSink, _is__TimeIntervalStreamSink_default);
  var interval$ = dart.privateName(time_interval, "TimeInterval.interval");
  var value$ = dart.privateName(time_interval, "TimeInterval.value");
  const _is_TimeInterval_default = Symbol('_is_TimeInterval_default');
  time_interval.TimeInterval$ = dart.generic(T => {
    class TimeInterval extends core.Object {
      get interval() {
        return this[interval$];
      }
      set interval(value) {
        super.interval = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return T$.TimeIntervalL().is(other) && dart.equals(this.interval, other.interval) && dart.equals(this.value, other.value);
      }
      get hashCode() {
        return (dart.notNull(dart.hashCode(this.interval)) ^ dart.notNull(dart.hashCode(this.value))) >>> 0;
      }
      toString() {
        return "TimeInterval{interval: " + dart.str(this.interval) + ", value: " + dart.str(this.value) + "}";
      }
    }
    (TimeInterval.new = function(value, interval) {
      this[value$] = value;
      this[interval$] = interval;
      ;
    }).prototype = TimeInterval.prototype;
    dart.addTypeTests(TimeInterval);
    TimeInterval.prototype[_is_TimeInterval_default] = true;
    dart.addTypeCaches(TimeInterval);
    dart.setMethodSignature(TimeInterval, () => ({
      __proto__: dart.getMethods(TimeInterval.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setGetterSignature(TimeInterval, () => ({
      __proto__: dart.getGetters(TimeInterval.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(TimeInterval, I[1]);
    dart.setFieldSignature(TimeInterval, () => ({
      __proto__: dart.getFields(TimeInterval.__proto__),
      interval: dart.finalFieldType(dart.legacy(core.Duration)),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    dart.defineExtensionMethods(TimeInterval, ['_equals', 'toString']);
    dart.defineExtensionAccessors(TimeInterval, ['hashCode']);
    return TimeInterval;
  });
  time_interval.TimeInterval = time_interval.TimeInterval$();
  dart.addTypeTests(time_interval.TimeInterval, _is_TimeInterval_default);
  const _is_TimeIntervalStreamTransformer_default = Symbol('_is_TimeIntervalStreamTransformer_default');
  time_interval.TimeIntervalStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var TimeIntervalOfSL = () => (TimeIntervalOfSL = dart.constFn(time_interval.TimeInterval$(SL())))();
    var TimeIntervalLOfSL = () => (TimeIntervalLOfSL = dart.constFn(dart.legacy(TimeIntervalOfSL())))();
    var _TimeIntervalStreamSinkOfSL = () => (_TimeIntervalStreamSinkOfSL = dart.constFn(time_interval._TimeIntervalStreamSink$(SL())))();
    class TimeIntervalStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(time_interval.TimeInterval$(dart.legacy(S)))) {
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), TimeIntervalLOfSL(), stream, new (_TimeIntervalStreamSinkOfSL()).new());
      }
    }
    (TimeIntervalStreamTransformer.new = function() {
      TimeIntervalStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TimeIntervalStreamTransformer.prototype;
    dart.addTypeTests(TimeIntervalStreamTransformer);
    TimeIntervalStreamTransformer.prototype[_is_TimeIntervalStreamTransformer_default] = true;
    dart.addTypeCaches(TimeIntervalStreamTransformer);
    dart.setMethodSignature(TimeIntervalStreamTransformer, () => ({
      __proto__: dart.getMethods(TimeIntervalStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(time_interval.TimeInterval$(dart.legacy(S))))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(TimeIntervalStreamTransformer, I[1]);
    return TimeIntervalStreamTransformer;
  });
  time_interval.TimeIntervalStreamTransformer = time_interval.TimeIntervalStreamTransformer$();
  dart.addTypeTests(time_interval.TimeIntervalStreamTransformer, _is_TimeIntervalStreamTransformer_default);
  time_interval['TimeIntervalExtension|timeInterval'] = function TimeIntervalExtension$124timeInterval(T, $this) {
    return $this.transform(dart.legacy(time_interval.TimeInterval$(dart.legacy(T))), new (time_interval.TimeIntervalStreamTransformer$(dart.legacy(T))).new());
  };
  time_interval['TimeIntervalExtension|get#timeInterval'] = function TimeIntervalExtension$124get$35timeInterval(T, $this) {
    return dart.fn(() => time_interval['TimeIntervalExtension|timeInterval'](dart.legacy(T), $this), dart.fnType(dart.legacy(async.Stream$(dart.legacy(time_interval.TimeInterval$(dart.legacy(T))))), []));
  };
  var _otherSubscription = dart.privateName(take_until, "_otherSubscription");
  var _otherStream$ = dart.privateName(take_until, "_otherStream");
  const _is__TakeUntilStreamSink_default = Symbol('_is__TakeUntilStreamSink_default');
  take_until._TakeUntilStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _TakeUntilStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        return sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkLOfSL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t23;
        EventSinkLOfSL().as(sink);
        t23 = this[_otherSubscription];
        t23 == null ? null : t23.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t23;
        EventSinkLOfSL().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.cancel();
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
        return this[_otherSubscription] = this[_otherStream$].take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.bind(sink, 'close')});
      }
      onPause(sink) {
        let t23;
        EventSinkLOfSL().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.pause();
      }
      onResume(sink) {
        let t23;
        EventSinkLOfSL().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.resume();
      }
    }
    (_TakeUntilStreamSink.new = function(_otherStream) {
      this[_otherSubscription] = null;
      this[_otherStream$] = _otherStream;
      ;
    }).prototype = _TakeUntilStreamSink.prototype;
    dart.addTypeTests(_TakeUntilStreamSink);
    _TakeUntilStreamSink.prototype[_is__TakeUntilStreamSink_default] = true;
    dart.addTypeCaches(_TakeUntilStreamSink);
    _TakeUntilStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getMethods(_TakeUntilStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_TakeUntilStreamSink, I[2]);
    dart.setFieldSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getFields(_TakeUntilStreamSink.__proto__),
      [_otherStream$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_otherSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T))))
    }));
    return _TakeUntilStreamSink;
  });
  take_until._TakeUntilStreamSink = take_until._TakeUntilStreamSink$();
  dart.addTypeTests(take_until._TakeUntilStreamSink, _is__TakeUntilStreamSink_default);
  var otherStream$ = dart.privateName(take_until, "TakeUntilStreamTransformer.otherStream");
  const _is_TakeUntilStreamTransformer_default = Symbol('_is_TakeUntilStreamTransformer_default');
  take_until.TakeUntilStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _TakeUntilStreamSinkOfSL$TL = () => (_TakeUntilStreamSinkOfSL$TL = dart.constFn(take_until._TakeUntilStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class TakeUntilStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get otherStream() {
        return this[otherStream$];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_TakeUntilStreamSinkOfSL$TL()).new(this.otherStream));
      }
    }
    (TakeUntilStreamTransformer.new = function(otherStream) {
      this[otherStream$] = otherStream;
      TakeUntilStreamTransformer.__proto__.new.call(this);
      if (this.otherStream == null) {
        dart.throw(new core.ArgumentError.new("otherStream cannot be null"));
      }
    }).prototype = TakeUntilStreamTransformer.prototype;
    dart.addTypeTests(TakeUntilStreamTransformer);
    TakeUntilStreamTransformer.prototype[_is_TakeUntilStreamTransformer_default] = true;
    dart.addTypeCaches(TakeUntilStreamTransformer);
    dart.setMethodSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeUntilStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(TakeUntilStreamTransformer, I[2]);
    dart.setFieldSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getFields(TakeUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T))))
    }));
    return TakeUntilStreamTransformer;
  });
  take_until.TakeUntilStreamTransformer = take_until.TakeUntilStreamTransformer$();
  dart.addTypeTests(take_until.TakeUntilStreamTransformer, _is_TakeUntilStreamTransformer_default);
  take_until['TakeUntilExtension|takeUntil'] = function TakeUntilExtension$124takeUntil(T, S, $this, otherStream) {
    return $this.transform(dart.legacy(T), new (take_until.TakeUntilStreamTransformer$(dart.legacy(T), dart.legacy(S))).new(otherStream));
  };
  take_until['TakeUntilExtension|get#takeUntil'] = function TakeUntilExtension$124get$35takeUntil(T, $this) {
    return dart.fn((S, otherStream) => take_until['TakeUntilExtension|takeUntil'](dart.legacy(T), dart.legacy(S), $this, otherStream), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      return [dart.legacy(async.Stream$(dart.legacy(T))), [StreamLOfSL()]];
    }));
  };
  var _mapperSubscription = dart.privateName(switch_map, "_mapperSubscription");
  var _inputClosed = dart.privateName(switch_map, "_inputClosed");
  var _mapper$ = dart.privateName(switch_map, "_mapper");
  const _is__SwitchMapStreamSink_default = Symbol('_is__SwitchMapStreamSink_default');
  switch_map._SwitchMapStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var EventSinkOfTL = () => (EventSinkOfTL = dart.constFn(async.EventSink$(TL())))();
    var EventSinkLOfTL = () => (EventSinkLOfTL = dart.constFn(dart.legacy(EventSinkOfTL())))();
    class _SwitchMapStreamSink extends core.Object {
      add(sink, data) {
        let t25, t25$;
        EventSinkLOfTL().as(sink);
        SL().as(data);
        let mappedStream = (t25 = data, this[_mapper$](t25));
        t25$ = this[_mapperSubscription];
        t25$ == null ? null : t25$.cancel();
        this[_mapperSubscription] = mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_mapperSubscription] = null;
            if (dart.test(this[_inputClosed])) {
              sink.close();
            }
          }, T$.VoidToNull())});
      }
      addError(sink, e, st = null) {
        EventSinkLOfTL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t25;
        EventSinkLOfTL().as(sink);
        this[_inputClosed] = true;
        t25 = this[_mapperSubscription];
        t25 == null ? sink.close() : t25;
      }
      onCancel(sink) {
        let t25;
        EventSinkLOfTL().as(sink);
        t25 = this[_mapperSubscription];
        return t25 == null ? null : t25.cancel();
      }
      onListen(sink) {
        EventSinkLOfTL().as(sink);
      }
      onPause(sink) {
        let t25;
        EventSinkLOfTL().as(sink);
        t25 = this[_mapperSubscription];
        return t25 == null ? null : t25.pause();
      }
      onResume(sink) {
        let t25;
        EventSinkLOfTL().as(sink);
        t25 = this[_mapperSubscription];
        return t25 == null ? null : t25.resume();
      }
    }
    (_SwitchMapStreamSink.new = function(_mapper) {
      this[_mapperSubscription] = null;
      this[_inputClosed] = false;
      this[_mapper$] = _mapper;
      ;
    }).prototype = _SwitchMapStreamSink.prototype;
    dart.addTypeTests(_SwitchMapStreamSink);
    _SwitchMapStreamSink.prototype[_is__SwitchMapStreamSink_default] = true;
    dart.addTypeCaches(_SwitchMapStreamSink);
    _SwitchMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(T))];
    dart.setMethodSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_SwitchMapStreamSink, I[3]);
    dart.setFieldSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getFields(_SwitchMapStreamSink.__proto__),
      [_mapper$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)]))),
      [_mapperSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_inputClosed]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _SwitchMapStreamSink;
  });
  switch_map._SwitchMapStreamSink = switch_map._SwitchMapStreamSink$();
  dart.addTypeTests(switch_map._SwitchMapStreamSink, _is__SwitchMapStreamSink_default);
  var mapper$ = dart.privateName(switch_map, "SwitchMapStreamTransformer.mapper");
  const _is_SwitchMapStreamTransformer_default = Symbol('_is_SwitchMapStreamTransformer_default');
  switch_map.SwitchMapStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _SwitchMapStreamSinkOfSL$TL = () => (_SwitchMapStreamSinkOfSL$TL = dart.constFn(switch_map._SwitchMapStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class SwitchMapStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(T)) {
      get mapper() {
        return this[mapper$];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), TL(), stream, new (_SwitchMapStreamSinkOfSL$TL()).new(this.mapper));
      }
    }
    (SwitchMapStreamTransformer.new = function(mapper) {
      this[mapper$] = mapper;
      SwitchMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SwitchMapStreamTransformer.prototype;
    dart.addTypeTests(SwitchMapStreamTransformer);
    SwitchMapStreamTransformer.prototype[_is_SwitchMapStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchMapStreamTransformer);
    dart.setMethodSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchMapStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(SwitchMapStreamTransformer, I[3]);
    dart.setFieldSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)])))
    }));
    return SwitchMapStreamTransformer;
  });
  switch_map.SwitchMapStreamTransformer = switch_map.SwitchMapStreamTransformer$();
  dart.addTypeTests(switch_map.SwitchMapStreamTransformer, _is_SwitchMapStreamTransformer_default);
  switch_map['SwitchMapExtension|switchMap'] = function SwitchMapExtension$124switchMap(T, S, $this, mapper) {
    return $this.transform(dart.legacy(S), new (switch_map.SwitchMapStreamTransformer$(dart.legacy(T), dart.legacy(S))).new(mapper));
  };
  switch_map['SwitchMapExtension|get#switchMap'] = function SwitchMapExtension$124get$35switchMap(T, $this) {
    return dart.fn((S, mapper) => switch_map['SwitchMapExtension|switchMap'](dart.legacy(T), dart.legacy(S), $this, mapper), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      return [StreamLOfSL(), [dart.legacy(dart.fnType(StreamLOfSL(), [dart.legacy(T)]))]];
    }));
  };
  var _isEmpty = dart.privateName(switch_if_empty, "_isEmpty");
  var _fallbackSubscription = dart.privateName(switch_if_empty, "_fallbackSubscription");
  var _fallbackStream$ = dart.privateName(switch_if_empty, "_fallbackStream");
  const _is__SwitchIfEmptyStreamSink_default = Symbol('_is__SwitchIfEmptyStreamSink_default');
  switch_if_empty._SwitchIfEmptyStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _SwitchIfEmptyStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        this[_isEmpty] = false;
        sink.add(data);
      }
      addError(sink, error, st = null) {
        EventSinkLOfSL().as(sink);
        sink.addError(error, st);
      }
      close(sink) {
        EventSinkLOfSL().as(sink);
        if (dart.test(this[_isEmpty])) {
          this[_fallbackSubscription] = this[_fallbackStream$].listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.bind(sink, 'close')});
        } else {
          sink.close();
        }
      }
      onCancel(sink) {
        let t27;
        EventSinkLOfSL().as(sink);
        t27 = this[_fallbackSubscription];
        return t27 == null ? null : t27.cancel();
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
      }
      onPause(sink) {
        let t27;
        EventSinkLOfSL().as(sink);
        t27 = this[_fallbackSubscription];
        return t27 == null ? null : t27.pause();
      }
      onResume(sink) {
        let t27;
        EventSinkLOfSL().as(sink);
        t27 = this[_fallbackSubscription];
        return t27 == null ? null : t27.resume();
      }
    }
    (_SwitchIfEmptyStreamSink.new = function(_fallbackStream) {
      this[_isEmpty] = true;
      this[_fallbackSubscription] = null;
      this[_fallbackStream$] = _fallbackStream;
      ;
    }).prototype = _SwitchIfEmptyStreamSink.prototype;
    dart.addTypeTests(_SwitchIfEmptyStreamSink);
    _SwitchIfEmptyStreamSink.prototype[_is__SwitchIfEmptyStreamSink_default] = true;
    dart.addTypeCaches(_SwitchIfEmptyStreamSink);
    _SwitchIfEmptyStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchIfEmptyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_SwitchIfEmptyStreamSink, I[4]);
    dart.setFieldSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getFields(_SwitchIfEmptyStreamSink.__proto__),
      [_fallbackStream$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(S)))),
      [_isEmpty]: dart.fieldType(dart.legacy(core.bool)),
      [_fallbackSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(S))))
    }));
    return _SwitchIfEmptyStreamSink;
  });
  switch_if_empty._SwitchIfEmptyStreamSink = switch_if_empty._SwitchIfEmptyStreamSink$();
  dart.addTypeTests(switch_if_empty._SwitchIfEmptyStreamSink, _is__SwitchIfEmptyStreamSink_default);
  var fallbackStream$ = dart.privateName(switch_if_empty, "SwitchIfEmptyStreamTransformer.fallbackStream");
  const _is_SwitchIfEmptyStreamTransformer_default = Symbol('_is_SwitchIfEmptyStreamTransformer_default');
  switch_if_empty.SwitchIfEmptyStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _SwitchIfEmptyStreamSinkOfSL = () => (_SwitchIfEmptyStreamSinkOfSL = dart.constFn(switch_if_empty._SwitchIfEmptyStreamSink$(SL())))();
    class SwitchIfEmptyStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get fallbackStream() {
        return this[fallbackStream$];
      }
      set fallbackStream(value) {
        super.fallbackStream = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_SwitchIfEmptyStreamSinkOfSL()).new(this.fallbackStream));
      }
    }
    (SwitchIfEmptyStreamTransformer.new = function(fallbackStream) {
      this[fallbackStream$] = fallbackStream;
      SwitchIfEmptyStreamTransformer.__proto__.new.call(this);
      if (this.fallbackStream == null) {
        dart.throw(new core.ArgumentError.new("fallbackStream cannot be null"));
      }
    }).prototype = SwitchIfEmptyStreamTransformer.prototype;
    dart.addTypeTests(SwitchIfEmptyStreamTransformer);
    SwitchIfEmptyStreamTransformer.prototype[_is_SwitchIfEmptyStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchIfEmptyStreamTransformer);
    dart.setMethodSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchIfEmptyStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(SwitchIfEmptyStreamTransformer, I[4]);
    dart.setFieldSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchIfEmptyStreamTransformer.__proto__),
      fallbackStream: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(S))))
    }));
    return SwitchIfEmptyStreamTransformer;
  });
  switch_if_empty.SwitchIfEmptyStreamTransformer = switch_if_empty.SwitchIfEmptyStreamTransformer$();
  dart.addTypeTests(switch_if_empty.SwitchIfEmptyStreamTransformer, _is_SwitchIfEmptyStreamTransformer_default);
  switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'] = function SwitchIfEmptyExtension$124switchIfEmpty(T, $this, fallbackStream) {
    return $this.transform(dart.legacy(T), new (switch_if_empty.SwitchIfEmptyStreamTransformer$(dart.legacy(T))).new(fallbackStream));
  };
  switch_if_empty['SwitchIfEmptyExtension|get#switchIfEmpty'] = function SwitchIfEmptyExtension$124get$35switchIfEmpty(T, $this) {
    return dart.fn(fallbackStream => switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'](dart.legacy(T), $this, fallbackStream), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(async.Stream$(dart.legacy(T)))]));
  };
  var _isFirstEventAdded = dart.privateName(start_with_many, "_isFirstEventAdded");
  var _startValues$ = dart.privateName(start_with_many, "_startValues");
  var _safeAddFirstEvent = dart.privateName(start_with_many, "_safeAddFirstEvent");
  const _is__StartWithManyStreamSink_default = Symbol('_is__StartWithManyStreamSink_default');
  start_with_many._StartWithManyStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _StartWithManyStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        this[_safeAddFirstEvent](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkLOfSL().as(sink);
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkLOfSL().as(sink);
      }
      onResume(sink) {
        EventSinkLOfSL().as(sink);
      }
      [_safeAddFirstEvent](sink) {
        if (dart.test(this[_isFirstEventAdded])) return;
        this[_startValues$][$forEach](dart.bind(sink, 'add'));
        this[_isFirstEventAdded] = true;
      }
    }
    (_StartWithManyStreamSink.new = function(_startValues) {
      this[_isFirstEventAdded] = false;
      this[_startValues$] = _startValues;
      ;
    }).prototype = _StartWithManyStreamSink.prototype;
    dart.addTypeTests(_StartWithManyStreamSink);
    _StartWithManyStreamSink.prototype[_is__StartWithManyStreamSink_default] = true;
    dart.addTypeCaches(_StartWithManyStreamSink);
    _StartWithManyStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithManyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_safeAddFirstEvent]: dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(S)))])
    }));
    dart.setLibraryUri(_StartWithManyStreamSink, I[5]);
    dart.setFieldSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getFields(_StartWithManyStreamSink.__proto__),
      [_startValues$]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(S)))),
      [_isFirstEventAdded]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _StartWithManyStreamSink;
  });
  start_with_many._StartWithManyStreamSink = start_with_many._StartWithManyStreamSink$();
  dart.addTypeTests(start_with_many._StartWithManyStreamSink, _is__StartWithManyStreamSink_default);
  var startValues$ = dart.privateName(start_with_many, "StartWithManyStreamTransformer.startValues");
  const _is_StartWithManyStreamTransformer_default = Symbol('_is_StartWithManyStreamTransformer_default');
  start_with_many.StartWithManyStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _StartWithManyStreamSinkOfSL = () => (_StartWithManyStreamSinkOfSL = dart.constFn(start_with_many._StartWithManyStreamSink$(SL())))();
    class StartWithManyStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get startValues() {
        return this[startValues$];
      }
      set startValues(value) {
        super.startValues = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_StartWithManyStreamSinkOfSL()).new(this.startValues));
      }
    }
    (StartWithManyStreamTransformer.new = function(startValues) {
      this[startValues$] = startValues;
      StartWithManyStreamTransformer.__proto__.new.call(this);
      if (this.startValues == null) {
        dart.throw(new core.ArgumentError.new("startValues cannot be null"));
      }
    }).prototype = StartWithManyStreamTransformer.prototype;
    dart.addTypeTests(StartWithManyStreamTransformer);
    StartWithManyStreamTransformer.prototype[_is_StartWithManyStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithManyStreamTransformer);
    dart.setMethodSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithManyStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(StartWithManyStreamTransformer, I[5]);
    dart.setFieldSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithManyStreamTransformer.__proto__),
      startValues: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(S))))
    }));
    return StartWithManyStreamTransformer;
  });
  start_with_many.StartWithManyStreamTransformer = start_with_many.StartWithManyStreamTransformer$();
  dart.addTypeTests(start_with_many.StartWithManyStreamTransformer, _is_StartWithManyStreamTransformer_default);
  start_with_many['StartWithManyExtension|startWithMany'] = function StartWithManyExtension$124startWithMany(T, $this, startValues) {
    return $this.transform(dart.legacy(T), new (start_with_many.StartWithManyStreamTransformer$(dart.legacy(T))).new(startValues));
  };
  start_with_many['StartWithManyExtension|get#startWithMany'] = function StartWithManyExtension$124get$35startWithMany(T, $this) {
    return dart.fn(startValues => start_with_many['StartWithManyExtension|startWithMany'](dart.legacy(T), $this, startValues), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(core.List$(dart.legacy(T)))]));
  };
  var _otherSubscription$ = dart.privateName(skip_until, "_otherSubscription");
  var _canAdd = dart.privateName(skip_until, "_canAdd");
  var _otherStream$0 = dart.privateName(skip_until, "_otherStream");
  const _is__SkipUntilStreamSink_default = Symbol('_is__SkipUntilStreamSink_default');
  skip_until._SkipUntilStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _SkipUntilStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        if (dart.test(this[_canAdd])) {
          sink.add(data);
        }
      }
      addError(sink, e, st = null) {
        EventSinkLOfSL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t31;
        EventSinkLOfSL().as(sink);
        t31 = this[_otherSubscription$];
        t31 == null ? null : t31.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t31;
        EventSinkLOfSL().as(sink);
        t31 = this[_otherSubscription$];
        return t31 == null ? null : t31.cancel();
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
        return this[_otherSubscription$] = this[_otherStream$0].take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this[_canAdd] = true, T$.VoidToboolL())});
      }
      onPause(sink) {
        let t31;
        EventSinkLOfSL().as(sink);
        t31 = this[_otherSubscription$];
        return t31 == null ? null : t31.pause();
      }
      onResume(sink) {
        let t31;
        EventSinkLOfSL().as(sink);
        t31 = this[_otherSubscription$];
        return t31 == null ? null : t31.resume();
      }
    }
    (_SkipUntilStreamSink.new = function(_otherStream) {
      this[_otherSubscription$] = null;
      this[_canAdd] = false;
      this[_otherStream$0] = _otherStream;
      ;
    }).prototype = _SkipUntilStreamSink.prototype;
    dart.addTypeTests(_SkipUntilStreamSink);
    _SkipUntilStreamSink.prototype[_is__SkipUntilStreamSink_default] = true;
    dart.addTypeCaches(_SkipUntilStreamSink);
    _SkipUntilStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getMethods(_SkipUntilStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_SkipUntilStreamSink, I[6]);
    dart.setFieldSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getFields(_SkipUntilStreamSink.__proto__),
      [_otherStream$0]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_otherSubscription$]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_canAdd]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _SkipUntilStreamSink;
  });
  skip_until._SkipUntilStreamSink = skip_until._SkipUntilStreamSink$();
  dart.addTypeTests(skip_until._SkipUntilStreamSink, _is__SkipUntilStreamSink_default);
  var otherStream$0 = dart.privateName(skip_until, "SkipUntilStreamTransformer.otherStream");
  const _is_SkipUntilStreamTransformer_default = Symbol('_is_SkipUntilStreamTransformer_default');
  skip_until.SkipUntilStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _SkipUntilStreamSinkOfSL$TL = () => (_SkipUntilStreamSinkOfSL$TL = dart.constFn(skip_until._SkipUntilStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class SkipUntilStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get otherStream() {
        return this[otherStream$0];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_SkipUntilStreamSinkOfSL$TL()).new(this.otherStream));
      }
    }
    (SkipUntilStreamTransformer.new = function(otherStream) {
      this[otherStream$0] = otherStream;
      SkipUntilStreamTransformer.__proto__.new.call(this);
      if (this.otherStream == null) {
        dart.throw(new core.ArgumentError.new("otherStream cannot be null"));
      }
    }).prototype = SkipUntilStreamTransformer.prototype;
    dart.addTypeTests(SkipUntilStreamTransformer);
    SkipUntilStreamTransformer.prototype[_is_SkipUntilStreamTransformer_default] = true;
    dart.addTypeCaches(SkipUntilStreamTransformer);
    dart.setMethodSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(SkipUntilStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(SkipUntilStreamTransformer, I[6]);
    dart.setFieldSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getFields(SkipUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T))))
    }));
    return SkipUntilStreamTransformer;
  });
  skip_until.SkipUntilStreamTransformer = skip_until.SkipUntilStreamTransformer$();
  dart.addTypeTests(skip_until.SkipUntilStreamTransformer, _is_SkipUntilStreamTransformer_default);
  skip_until['SkipUntilExtension|skipUntil'] = function SkipUntilExtension$124skipUntil(T, S, $this, otherStream) {
    return $this.transform(dart.legacy(T), new (skip_until.SkipUntilStreamTransformer$(dart.legacy(T), dart.legacy(S))).new(otherStream));
  };
  skip_until['SkipUntilExtension|get#skipUntil'] = function SkipUntilExtension$124get$35skipUntil(T, $this) {
    return dart.fn((S, otherStream) => skip_until['SkipUntilExtension|skipUntil'](dart.legacy(T), dart.legacy(S), $this, otherStream), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      return [dart.legacy(async.Stream$(dart.legacy(T))), [StreamLOfSL()]];
    }));
  };
  var _inRecovery = dart.privateName(on_error_resume, "_inRecovery");
  var _recoverySubscriptions = dart.privateName(on_error_resume, "_recoverySubscriptions");
  var _recoveryFn$ = dart.privateName(on_error_resume, "_recoveryFn");
  const _is__OnErrorResumeStreamSink_default = Symbol('_is__OnErrorResumeStreamSink_default');
  on_error_resume._OnErrorResumeStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamSubscriptionOfSL = () => (StreamSubscriptionOfSL = dart.constFn(async.StreamSubscription$(SL())))();
    var StreamSubscriptionLOfSL = () => (StreamSubscriptionLOfSL = dart.constFn(dart.legacy(StreamSubscriptionOfSL())))();
    var JSArrayOfStreamSubscriptionLOfSL = () => (JSArrayOfStreamSubscriptionLOfSL = dart.constFn(_interceptors.JSArray$(StreamSubscriptionLOfSL())))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    var StreamSubscriptionLOfSLToFutureLOfvoid = () => (StreamSubscriptionLOfSLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfSL()])))();
    var StreamSubscriptionLOfSLTovoid = () => (StreamSubscriptionLOfSLTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionLOfSL()])))();
    class _OnErrorResumeStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        if (!dart.test(this[_inRecovery])) {
          sink.add(data);
        }
      }
      addError(sink, e, st = null) {
        let t33;
        EventSinkLOfSL().as(sink);
        this[_inRecovery] = true;
        let recoveryStream = (t33 = e, this[_recoveryFn$](t33));
        let subscription = null;
        subscription = recoveryStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_recoverySubscriptions][$remove](subscription);
            sink.close();
          }, T$.VoidToNull())});
        this[_recoverySubscriptions][$add](subscription);
      }
      close(sink) {
        EventSinkLOfSL().as(sink);
        if (!dart.test(this[_inRecovery])) {
          sink.close();
        }
      }
      onCancel(sink) {
        EventSinkLOfSL().as(sink);
        return dart.test(this[_recoverySubscriptions][$isEmpty]) ? null : async.Future.wait(dart.dynamic, this[_recoverySubscriptions][$map](T$.FutureLOfvoid(), dart.fn(subscription => {
          let t33;
          t33 = subscription;
          return t33 == null ? null : t33.cancel();
        }, StreamSubscriptionLOfSLToFutureLOfvoid()))[$where](dart.fn(future => future != null, T$.FutureLOfvoidToboolL())));
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
      }
      onPause(sink) {
        EventSinkLOfSL().as(sink);
        return this[_recoverySubscriptions][$forEach](dart.fn(subscription => subscription.pause(), StreamSubscriptionLOfSLTovoid()));
      }
      onResume(sink) {
        EventSinkLOfSL().as(sink);
        return this[_recoverySubscriptions][$forEach](dart.fn(subscription => subscription.resume(), StreamSubscriptionLOfSLTovoid()));
      }
    }
    (_OnErrorResumeStreamSink.new = function(_recoveryFn) {
      this[_inRecovery] = false;
      this[_recoverySubscriptions] = JSArrayOfStreamSubscriptionLOfSL().of([]);
      this[_recoveryFn$] = _recoveryFn;
      ;
    }).prototype = _OnErrorResumeStreamSink.prototype;
    dart.addTypeTests(_OnErrorResumeStreamSink);
    _OnErrorResumeStreamSink.prototype[_is__OnErrorResumeStreamSink_default] = true;
    dart.addTypeCaches(_OnErrorResumeStreamSink);
    _OnErrorResumeStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getMethods(_OnErrorResumeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_OnErrorResumeStreamSink, I[7]);
    dart.setFieldSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getFields(_OnErrorResumeStreamSink.__proto__),
      [_recoveryFn$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)]))),
      [_inRecovery]: dart.fieldType(dart.legacy(core.bool)),
      [_recoverySubscriptions]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(async.StreamSubscription$(dart.legacy(S))))))
    }));
    return _OnErrorResumeStreamSink;
  });
  on_error_resume._OnErrorResumeStreamSink = on_error_resume._OnErrorResumeStreamSink$();
  dart.addTypeTests(on_error_resume._OnErrorResumeStreamSink, _is__OnErrorResumeStreamSink_default);
  var recoveryFn$ = dart.privateName(on_error_resume, "OnErrorResumeStreamTransformer.recoveryFn");
  const _is_OnErrorResumeStreamTransformer_default = Symbol('_is_OnErrorResumeStreamTransformer_default');
  on_error_resume.OnErrorResumeStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _OnErrorResumeStreamSinkOfSL = () => (_OnErrorResumeStreamSinkOfSL = dart.constFn(on_error_resume._OnErrorResumeStreamSink$(SL())))();
    class OnErrorResumeStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get recoveryFn() {
        return this[recoveryFn$];
      }
      set recoveryFn(value) {
        super.recoveryFn = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_OnErrorResumeStreamSinkOfSL()).new(this.recoveryFn));
      }
    }
    (OnErrorResumeStreamTransformer.new = function(recoveryFn) {
      this[recoveryFn$] = recoveryFn;
      OnErrorResumeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = OnErrorResumeStreamTransformer.prototype;
    dart.addTypeTests(OnErrorResumeStreamTransformer);
    OnErrorResumeStreamTransformer.prototype[_is_OnErrorResumeStreamTransformer_default] = true;
    dart.addTypeCaches(OnErrorResumeStreamTransformer);
    dart.setMethodSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getMethods(OnErrorResumeStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(OnErrorResumeStreamTransformer, I[7]);
    dart.setFieldSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getFields(OnErrorResumeStreamTransformer.__proto__),
      recoveryFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])))
    }));
    return OnErrorResumeStreamTransformer;
  });
  on_error_resume.OnErrorResumeStreamTransformer = on_error_resume.OnErrorResumeStreamTransformer$();
  dart.addTypeTests(on_error_resume.OnErrorResumeStreamTransformer, _is_OnErrorResumeStreamTransformer_default);
  on_error_resume['OnErrorExtensions|onErrorResumeNext'] = function OnErrorExtensions$124onErrorResumeNext(T, $this, recoveryStream) {
    return $this.transform(dart.legacy(T), new (on_error_resume.OnErrorResumeStreamTransformer$(dart.legacy(T))).new(dart.fn(e => recoveryStream, dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.dynamic]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorResumeNext'] = function OnErrorExtensions$124get$35onErrorResumeNext(T, $this) {
    return dart.fn(recoveryStream => on_error_resume['OnErrorExtensions|onErrorResumeNext'](dart.legacy(T), $this, recoveryStream), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(async.Stream$(dart.legacy(T)))]));
  };
  on_error_resume['OnErrorExtensions|onErrorResume'] = function OnErrorExtensions$124onErrorResume(T, $this, recoveryFn) {
    return $this.transform(dart.legacy(T), new (on_error_resume.OnErrorResumeStreamTransformer$(dart.legacy(T))).new(recoveryFn));
  };
  on_error_resume['OnErrorExtensions|get#onErrorResume'] = function OnErrorExtensions$124get$35onErrorResume(T, $this) {
    return dart.fn(recoveryFn => on_error_resume['OnErrorExtensions|onErrorResume'](dart.legacy(T), $this, recoveryFn), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.dynamic]))]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturn'] = function OnErrorExtensions$124onErrorReturn(T, $this, returnValue) {
    return $this.transform(dart.legacy(T), new (on_error_resume.OnErrorResumeStreamTransformer$(dart.legacy(T))).new(dart.fn(e => async.Stream$(dart.legacy(T)).value(returnValue), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.dynamic]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturn'] = function OnErrorExtensions$124get$35onErrorReturn(T, $this) {
    return dart.fn(returnValue => on_error_resume['OnErrorExtensions|onErrorReturn'](dart.legacy(T), $this, returnValue), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(T)]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturnWith'] = function OnErrorExtensions$124onErrorReturnWith(T, $this, returnFn) {
    return $this.transform(dart.legacy(T), new (on_error_resume.OnErrorResumeStreamTransformer$(dart.legacy(T))).new(dart.fn(e => async.Stream$(dart.legacy(T)).value(returnFn(e)), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.dynamic]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturnWith'] = function OnErrorExtensions$124get$35onErrorReturnWith(T, $this) {
    return dart.fn(returnFn => on_error_resume['OnErrorExtensions|onErrorReturnWith'](dart.legacy(T), $this, returnFn), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.dynamic]))]));
  };
  var _subscriptions$ = dart.privateName(flat_map, "_subscriptions");
  var _openSubscriptions = dart.privateName(flat_map, "_openSubscriptions");
  var _inputClosed$ = dart.privateName(flat_map, "_inputClosed");
  var _mapper$0 = dart.privateName(flat_map, "_mapper");
  const _is__FlatMapStreamSink_default = Symbol('_is__FlatMapStreamSink_default');
  flat_map._FlatMapStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var JSArrayOfStreamSubscriptionLOfTL = () => (JSArrayOfStreamSubscriptionLOfTL = dart.constFn(_interceptors.JSArray$(StreamSubscriptionLOfTL())))();
    var EventSinkOfTL = () => (EventSinkOfTL = dart.constFn(async.EventSink$(TL())))();
    var EventSinkLOfTL = () => (EventSinkLOfTL = dart.constFn(dart.legacy(EventSinkOfTL())))();
    var StreamSubscriptionLOfTLToFutureLOfvoid = () => (StreamSubscriptionLOfTLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfTL()])))();
    var StreamSubscriptionLOfTLTovoid = () => (StreamSubscriptionLOfTLTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionLOfTL()])))();
    class _FlatMapStreamSink extends core.Object {
      add(sink, data) {
        let t41;
        EventSinkLOfTL().as(sink);
        SL().as(data);
        let mappedStream = (t41 = data, this[_mapper$0](t41));
        this[_openSubscriptions] = dart.notNull(this[_openSubscriptions]) + 1;
        let subscription = null;
        subscription = mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_openSubscriptions] = dart.notNull(this[_openSubscriptions]) - 1;
            this[_subscriptions$][$remove](subscription);
            if (dart.test(this[_inputClosed$]) && this[_openSubscriptions] === 0) {
              sink.close();
            }
          }, T$.VoidToNull())});
        this[_subscriptions$][$add](subscription);
      }
      addError(sink, e, st = null) {
        EventSinkLOfTL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        EventSinkLOfTL().as(sink);
        this[_inputClosed$] = true;
        if (this[_openSubscriptions] === 0) {
          sink.close();
        }
      }
      onCancel(sink) {
        EventSinkLOfTL().as(sink);
        return async.Future.wait(dart.dynamic, this[_subscriptions$][$map](T$.FutureL(), dart.fn(s => s.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid())));
      }
      onListen(sink) {
        EventSinkLOfTL().as(sink);
      }
      onPause(sink) {
        EventSinkLOfTL().as(sink);
        return this[_subscriptions$][$forEach](dart.fn(s => s.pause(), StreamSubscriptionLOfTLTovoid()));
      }
      onResume(sink) {
        EventSinkLOfTL().as(sink);
        return this[_subscriptions$][$forEach](dart.fn(s => s.resume(), StreamSubscriptionLOfTLTovoid()));
      }
    }
    (_FlatMapStreamSink.new = function(_mapper) {
      this[_subscriptions$] = JSArrayOfStreamSubscriptionLOfTL().of([]);
      this[_openSubscriptions] = 0;
      this[_inputClosed$] = false;
      this[_mapper$0] = _mapper;
      ;
    }).prototype = _FlatMapStreamSink.prototype;
    dart.addTypeTests(_FlatMapStreamSink);
    _FlatMapStreamSink.prototype[_is__FlatMapStreamSink_default] = true;
    dart.addTypeCaches(_FlatMapStreamSink);
    _FlatMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(T))];
    dart.setMethodSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getMethods(_FlatMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_FlatMapStreamSink, I[8]);
    dart.setFieldSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getFields(_FlatMapStreamSink.__proto__),
      [_mapper$0]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)]))),
      [_subscriptions$]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(async.StreamSubscription$(dart.legacy(T)))))),
      [_openSubscriptions]: dart.fieldType(dart.legacy(core.int)),
      [_inputClosed$]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _FlatMapStreamSink;
  });
  flat_map._FlatMapStreamSink = flat_map._FlatMapStreamSink$();
  dart.addTypeTests(flat_map._FlatMapStreamSink, _is__FlatMapStreamSink_default);
  var mapper$0 = dart.privateName(flat_map, "FlatMapStreamTransformer.mapper");
  const _is_FlatMapStreamTransformer_default = Symbol('_is_FlatMapStreamTransformer_default');
  flat_map.FlatMapStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _FlatMapStreamSinkOfSL$TL = () => (_FlatMapStreamSinkOfSL$TL = dart.constFn(flat_map._FlatMapStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class FlatMapStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(T)) {
      get mapper() {
        return this[mapper$0];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), TL(), stream, new (_FlatMapStreamSinkOfSL$TL()).new(this.mapper));
      }
    }
    (FlatMapStreamTransformer.new = function(mapper) {
      this[mapper$0] = mapper;
      FlatMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = FlatMapStreamTransformer.prototype;
    dart.addTypeTests(FlatMapStreamTransformer);
    FlatMapStreamTransformer.prototype[_is_FlatMapStreamTransformer_default] = true;
    dart.addTypeCaches(FlatMapStreamTransformer);
    dart.setMethodSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getMethods(FlatMapStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(FlatMapStreamTransformer, I[8]);
    dart.setFieldSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getFields(FlatMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)])))
    }));
    return FlatMapStreamTransformer;
  });
  flat_map.FlatMapStreamTransformer = flat_map.FlatMapStreamTransformer$();
  dart.addTypeTests(flat_map.FlatMapStreamTransformer, _is_FlatMapStreamTransformer_default);
  flat_map['FlatMapExtension|flatMap'] = function FlatMapExtension$124flatMap(T, S, $this, mapper) {
    return $this.transform(dart.legacy(S), new (flat_map.FlatMapStreamTransformer$(dart.legacy(T), dart.legacy(S))).new(mapper));
  };
  flat_map['FlatMapExtension|get#flatMap'] = function FlatMapExtension$124get$35flatMap(T, $this) {
    return dart.fn((S, mapper) => flat_map['FlatMapExtension|flatMap'](dart.legacy(T), dart.legacy(S), $this, mapper), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      return [StreamLOfSL(), [dart.legacy(dart.fnType(StreamLOfSL(), [dart.legacy(T)]))]];
    }));
  };
  flat_map['FlatMapExtension|flatMapIterable'] = function FlatMapExtension$124flatMapIterable(T, S, $this, mapper) {
    return $this.transform(dart.legacy(core.Iterable$(dart.legacy(S))), new (flat_map.FlatMapStreamTransformer$(dart.legacy(T), dart.legacy(core.Iterable$(dart.legacy(S))))).new(mapper)).expand(dart.legacy(S), dart.fn(iterable => iterable, dart.fnType(dart.legacy(core.Iterable$(dart.legacy(S))), [dart.legacy(core.Iterable$(dart.legacy(S)))])));
  };
  flat_map['FlatMapExtension|get#flatMapIterable'] = function FlatMapExtension$124get$35flatMapIterable(T, $this) {
    return dart.fn((S, mapper) => flat_map['FlatMapExtension|flatMapIterable'](dart.legacy(T), dart.legacy(S), $this, mapper), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      var IterableOfSL = () => (IterableOfSL = dart.constFn(core.Iterable$(SL())))();
      var IterableLOfSL = () => (IterableLOfSL = dart.constFn(dart.legacy(IterableOfSL())))();
      var StreamOfIterableLOfSL = () => (StreamOfIterableLOfSL = dart.constFn(async.Stream$(IterableLOfSL())))();
      var StreamLOfIterableLOfSL = () => (StreamLOfIterableLOfSL = dart.constFn(dart.legacy(StreamOfIterableLOfSL())))();
      return [StreamLOfSL(), [dart.legacy(dart.fnType(StreamLOfIterableLOfSL(), [dart.legacy(T)]))]];
    }));
  };
  var _mapperSubscription$ = dart.privateName(exhaust_map, "_mapperSubscription");
  var _inputClosed$0 = dart.privateName(exhaust_map, "_inputClosed");
  var _mapper$1 = dart.privateName(exhaust_map, "_mapper");
  const _is__ExhaustMapStreamSink_default = Symbol('_is__ExhaustMapStreamSink_default');
  exhaust_map._ExhaustMapStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var EventSinkOfTL = () => (EventSinkOfTL = dart.constFn(async.EventSink$(TL())))();
    var EventSinkLOfTL = () => (EventSinkLOfTL = dart.constFn(dart.legacy(EventSinkOfTL())))();
    class _ExhaustMapStreamSink extends core.Object {
      add(sink, data) {
        let t45;
        EventSinkLOfTL().as(sink);
        SL().as(data);
        if (this[_mapperSubscription$] != null) {
          return;
        }
        let mappedStream = (t45 = data, this[_mapper$1](t45));
        this[_mapperSubscription$] = mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_mapperSubscription$] = null;
            if (dart.test(this[_inputClosed$0])) {
              sink.close();
            }
          }, T$.VoidToNull())});
      }
      addError(sink, e, st = null) {
        EventSinkLOfTL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t45;
        EventSinkLOfTL().as(sink);
        this[_inputClosed$0] = true;
        t45 = this[_mapperSubscription$];
        t45 == null ? sink.close() : t45;
      }
      onCancel(sink) {
        let t45;
        EventSinkLOfTL().as(sink);
        t45 = this[_mapperSubscription$];
        return t45 == null ? null : t45.cancel();
      }
      onListen(sink) {
        EventSinkLOfTL().as(sink);
      }
      onPause(sink) {
        let t45;
        EventSinkLOfTL().as(sink);
        t45 = this[_mapperSubscription$];
        return t45 == null ? null : t45.pause();
      }
      onResume(sink) {
        let t45;
        EventSinkLOfTL().as(sink);
        t45 = this[_mapperSubscription$];
        return t45 == null ? null : t45.resume();
      }
    }
    (_ExhaustMapStreamSink.new = function(_mapper) {
      this[_mapperSubscription$] = null;
      this[_inputClosed$0] = false;
      this[_mapper$1] = _mapper;
      ;
    }).prototype = _ExhaustMapStreamSink.prototype;
    dart.addTypeTests(_ExhaustMapStreamSink);
    _ExhaustMapStreamSink.prototype[_is__ExhaustMapStreamSink_default] = true;
    dart.addTypeCaches(_ExhaustMapStreamSink);
    _ExhaustMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(T))];
    dart.setMethodSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getMethods(_ExhaustMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_ExhaustMapStreamSink, I[9]);
    dart.setFieldSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getFields(_ExhaustMapStreamSink.__proto__),
      [_mapper$1]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)]))),
      [_mapperSubscription$]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_inputClosed$0]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _ExhaustMapStreamSink;
  });
  exhaust_map._ExhaustMapStreamSink = exhaust_map._ExhaustMapStreamSink$();
  dart.addTypeTests(exhaust_map._ExhaustMapStreamSink, _is__ExhaustMapStreamSink_default);
  var mapper$1 = dart.privateName(exhaust_map, "ExhaustMapStreamTransformer.mapper");
  const _is_ExhaustMapStreamTransformer_default = Symbol('_is_ExhaustMapStreamTransformer_default');
  exhaust_map.ExhaustMapStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _ExhaustMapStreamSinkOfSL$TL = () => (_ExhaustMapStreamSinkOfSL$TL = dart.constFn(exhaust_map._ExhaustMapStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class ExhaustMapStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(T)) {
      get mapper() {
        return this[mapper$1];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), TL(), stream, new (_ExhaustMapStreamSinkOfSL$TL()).new(this.mapper));
      }
    }
    (ExhaustMapStreamTransformer.new = function(mapper) {
      this[mapper$1] = mapper;
      ExhaustMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = ExhaustMapStreamTransformer.prototype;
    dart.addTypeTests(ExhaustMapStreamTransformer);
    ExhaustMapStreamTransformer.prototype[_is_ExhaustMapStreamTransformer_default] = true;
    dart.addTypeCaches(ExhaustMapStreamTransformer);
    dart.setMethodSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getMethods(ExhaustMapStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(ExhaustMapStreamTransformer, I[9]);
    dart.setFieldSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getFields(ExhaustMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(S)])))
    }));
    return ExhaustMapStreamTransformer;
  });
  exhaust_map.ExhaustMapStreamTransformer = exhaust_map.ExhaustMapStreamTransformer$();
  dart.addTypeTests(exhaust_map.ExhaustMapStreamTransformer, _is_ExhaustMapStreamTransformer_default);
  exhaust_map['ExhaustMapExtension|exhaustMap'] = function ExhaustMapExtension$124exhaustMap(T, S, $this, mapper) {
    return $this.transform(dart.legacy(S), new (exhaust_map.ExhaustMapStreamTransformer$(dart.legacy(T), dart.legacy(S))).new(mapper));
  };
  exhaust_map['ExhaustMapExtension|get#exhaustMap'] = function ExhaustMapExtension$124get$35exhaustMap(T, $this) {
    return dart.fn((S, mapper) => exhaust_map['ExhaustMapExtension|exhaustMap'](dart.legacy(T), dart.legacy(S), $this, mapper), dart.gFnType(S => {
      var SL = () => (SL = dart.constFn(dart.legacy(S)))();
      var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
      var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
      return [StreamLOfSL(), [dart.legacy(dart.fnType(StreamLOfSL(), [dart.legacy(T)]))]];
    }));
  };
  var _onCancel$ = dart.privateName($do, "_onCancel");
  var _onData$ = dart.privateName($do, "_onData");
  var _onDone$ = dart.privateName($do, "_onDone");
  var _onEach$ = dart.privateName($do, "_onEach");
  var _onError$ = dart.privateName($do, "_onError");
  var _onListen$ = dart.privateName($do, "_onListen");
  var _onPause$ = dart.privateName($do, "_onPause");
  var _onResume$ = dart.privateName($do, "_onResume");
  const _is__DoStreamSink_default = Symbol('_is__DoStreamSink_default');
  $do._DoStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    var NotificationOfSL = () => (NotificationOfSL = dart.constFn(notification.Notification$(SL())))();
    class _DoStreamSink extends core.Object {
      add(sink, data) {
        let t47, t48;
        EventSinkLOfSL().as(sink);
        SL().as(data);
        try {
          t47 = this[_onData$];
          t47 == null ? null : t47(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          sink.addError(e, s);
        }
        try {
          t48 = this[_onEach$];
          t48 == null ? null : t48(NotificationOfSL().onData(data));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          sink.addError(e, s);
        }
        sink.add(data);
      }
      addError(sink, e, st = null) {
        let t49, t50;
        EventSinkLOfSL().as(sink);
        try {
          t49 = this[_onError$];
          t49 == null ? null : t49(e, st);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          sink.addError(e, s);
        }
        try {
          t50 = this[_onEach$];
          t50 == null ? null : t50(NotificationOfSL().onError(e, st));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          sink.addError(e, s);
        }
        sink.addError(e, st);
      }
      close(sink) {
        let t51, t52;
        EventSinkLOfSL().as(sink);
        try {
          t51 = this[_onDone$];
          t51 == null ? null : t51();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          sink.addError(e, s);
        }
        try {
          t52 = this[_onEach$];
          t52 == null ? null : t52(NotificationOfSL().onDone());
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          sink.addError(e, s);
        }
        sink.close();
      }
      onCancel(sink) {
        let t53;
        EventSinkLOfSL().as(sink);
        t53 = this[_onCancel$];
        return t53 == null ? null : t53();
      }
      onListen(sink) {
        let t53;
        EventSinkLOfSL().as(sink);
        t53 = this[_onListen$];
        t53 == null ? null : t53();
      }
      onPause(sink) {
        let t53;
        EventSinkLOfSL().as(sink);
        t53 = this[_onPause$];
        return t53 == null ? null : t53();
      }
      onResume(sink) {
        let t53;
        EventSinkLOfSL().as(sink);
        t53 = this[_onResume$];
        return t53 == null ? null : t53();
      }
    }
    (_DoStreamSink.new = function(_onCancel, _onData, _onDone, _onEach, _onError, _onListen, _onPause, _onResume) {
      this[_onCancel$] = _onCancel;
      this[_onData$] = _onData;
      this[_onDone$] = _onDone;
      this[_onEach$] = _onEach;
      this[_onError$] = _onError;
      this[_onListen$] = _onListen;
      this[_onPause$] = _onPause;
      this[_onResume$] = _onResume;
      ;
    }).prototype = _DoStreamSink.prototype;
    dart.addTypeTests(_DoStreamSink);
    _DoStreamSink.prototype[_is__DoStreamSink_default] = true;
    dart.addTypeCaches(_DoStreamSink);
    _DoStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_DoStreamSink, () => ({
      __proto__: dart.getMethods(_DoStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_DoStreamSink, I[10]);
    dart.setFieldSignature(_DoStreamSink, () => ({
      __proto__: dart.getFields(_DoStreamSink.__proto__),
      [_onCancel$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, []))),
      [_onData$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(S)]))),
      [_onDone$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_onEach$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(notification.Notification$(dart.legacy(S)))]))),
      [_onError$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.StackTrace)]))),
      [_onListen$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_onPause$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      [_onResume$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return _DoStreamSink;
  });
  $do._DoStreamSink = $do._DoStreamSink$();
  dart.addTypeTests($do._DoStreamSink, _is__DoStreamSink_default);
  var onCancel$ = dart.privateName($do, "DoStreamTransformer.onCancel");
  var onData$ = dart.privateName($do, "DoStreamTransformer.onData");
  var onDone$ = dart.privateName($do, "DoStreamTransformer.onDone");
  var onEach$ = dart.privateName($do, "DoStreamTransformer.onEach");
  var onError$ = dart.privateName($do, "DoStreamTransformer.onError");
  var onListen$ = dart.privateName($do, "DoStreamTransformer.onListen");
  var onPause$ = dart.privateName($do, "DoStreamTransformer.onPause");
  var onResume$ = dart.privateName($do, "DoStreamTransformer.onResume");
  const _is_DoStreamTransformer_default = Symbol('_is_DoStreamTransformer_default');
  $do.DoStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _DoStreamSinkOfSL = () => (_DoStreamSinkOfSL = dart.constFn($do._DoStreamSink$(SL())))();
    class DoStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get onCancel() {
        return this[onCancel$];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      get onData() {
        return this[onData$];
      }
      set onData(value) {
        super.onData = value;
      }
      get onDone() {
        return this[onDone$];
      }
      set onDone(value) {
        super.onDone = value;
      }
      get onEach() {
        return this[onEach$];
      }
      set onEach(value) {
        super.onEach = value;
      }
      get onError() {
        return this[onError$];
      }
      set onError(value) {
        super.onError = value;
      }
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        super.onListen = value;
      }
      get onPause() {
        return this[onPause$];
      }
      set onPause(value) {
        super.onPause = value;
      }
      get onResume() {
        return this[onResume$];
      }
      set onResume(value) {
        super.onResume = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_DoStreamSinkOfSL()).new(this.onCancel, this.onData, this.onDone, this.onEach, this.onError, this.onListen, this.onPause, this.onResume));
      }
    }
    (DoStreamTransformer.new = function(opts) {
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let onData = opts && 'onData' in opts ? opts.onData : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let onEach = opts && 'onEach' in opts ? opts.onEach : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      this[onCancel$] = onCancel;
      this[onData$] = onData;
      this[onDone$] = onDone;
      this[onEach$] = onEach;
      this[onError$] = onError;
      this[onListen$] = onListen;
      this[onPause$] = onPause;
      this[onResume$] = onResume;
      DoStreamTransformer.__proto__.new.call(this);
      if (this.onCancel == null && this.onData == null && this.onDone == null && this.onEach == null && this.onError == null && this.onListen == null && this.onPause == null && this.onResume == null) {
        dart.throw(new core.ArgumentError.new("Must provide at least one handler"));
      }
    }).prototype = DoStreamTransformer.prototype;
    dart.addTypeTests(DoStreamTransformer);
    DoStreamTransformer.prototype[_is_DoStreamTransformer_default] = true;
    dart.addTypeCaches(DoStreamTransformer);
    dart.setMethodSignature(DoStreamTransformer, () => ({
      __proto__: dart.getMethods(DoStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(DoStreamTransformer, I[10]);
    dart.setFieldSignature(DoStreamTransformer, () => ({
      __proto__: dart.getFields(DoStreamTransformer.__proto__),
      onCancel: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, []))),
      onData: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(S)]))),
      onDone: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onEach: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(notification.Notification$(dart.legacy(S)))]))),
      onError: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.StackTrace)]))),
      onListen: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onPause: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      onResume: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return DoStreamTransformer;
  });
  $do.DoStreamTransformer = $do.DoStreamTransformer$();
  dart.addTypeTests($do.DoStreamTransformer, _is_DoStreamTransformer_default);
  $do['DoExtensions|doOnCancel'] = function DoExtensions$124doOnCancel(T, $this, onCancel) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onCancel: onCancel}));
  };
  $do['DoExtensions|get#doOnCancel'] = function DoExtensions$124get$35doOnCancel(T, $this) {
    return dart.fn(onCancel => $do['DoExtensions|doOnCancel'](dart.legacy(T), $this, onCancel), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.VoidToLvoid()]));
  };
  $do['DoExtensions|doOnData'] = function DoExtensions$124doOnData(T, $this, onData) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onData: onData}));
  };
  $do['DoExtensions|get#doOnData'] = function DoExtensions$124get$35doOnData(T, $this) {
    return dart.fn(onData => $do['DoExtensions|doOnData'](dart.legacy(T), $this, onData), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]));
  };
  $do['DoExtensions|doOnDone'] = function DoExtensions$124doOnDone(T, $this, onDone) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onDone: onDone}));
  };
  $do['DoExtensions|get#doOnDone'] = function DoExtensions$124get$35doOnDone(T, $this) {
    return dart.fn(onDone => $do['DoExtensions|doOnDone'](dart.legacy(T), $this, onDone), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.VoidToLvoid()]));
  };
  $do['DoExtensions|doOnEach'] = function DoExtensions$124doOnEach(T, $this, onEach) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onEach: onEach}));
  };
  $do['DoExtensions|get#doOnEach'] = function DoExtensions$124get$35doOnEach(T, $this) {
    return dart.fn(onEach => $do['DoExtensions|doOnEach'](dart.legacy(T), $this, onEach), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(notification.Notification$(dart.legacy(T)))]))]));
  };
  $do['DoExtensions|doOnError'] = function DoExtensions$124doOnError(T, $this, onError) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onError: onError}));
  };
  $do['DoExtensions|get#doOnError'] = function DoExtensions$124get$35doOnError(T, $this) {
    return dart.fn(onError => $do['DoExtensions|doOnError'](dart.legacy(T), $this, onError), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.ObjectLAndStackTraceLToLvoid()]));
  };
  $do['DoExtensions|doOnListen'] = function DoExtensions$124doOnListen(T, $this, onListen) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onListen: onListen}));
  };
  $do['DoExtensions|get#doOnListen'] = function DoExtensions$124get$35doOnListen(T, $this) {
    return dart.fn(onListen => $do['DoExtensions|doOnListen'](dart.legacy(T), $this, onListen), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.VoidToLvoid()]));
  };
  $do['DoExtensions|doOnPause'] = function DoExtensions$124doOnPause(T, $this, onPause) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onPause: onPause}));
  };
  $do['DoExtensions|get#doOnPause'] = function DoExtensions$124get$35doOnPause(T, $this) {
    return dart.fn(onPause => $do['DoExtensions|doOnPause'](dart.legacy(T), $this, onPause), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.VoidToLvoid()]));
  };
  $do['DoExtensions|doOnResume'] = function DoExtensions$124doOnResume(T, $this, onResume) {
    return $this.transform(dart.legacy(T), new ($do.DoStreamTransformer$(dart.legacy(T))).new({onResume: onResume}));
  };
  $do['DoExtensions|get#doOnResume'] = function DoExtensions$124get$35doOnResume(T, $this) {
    return dart.fn(onResume => $do['DoExtensions|doOnResume'](dart.legacy(T), $this, onResume), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.VoidToLvoid()]));
  };
  var _outputSink$ = dart.privateName(dematerialize, "_outputSink");
  const _is__DematerializeStreamSink_default = Symbol('_is__DematerializeStreamSink_default');
  dematerialize._DematerializeStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var NotificationOfSL = () => (NotificationOfSL = dart.constFn(notification.Notification$(SL())))();
    var NotificationLOfSL = () => (NotificationLOfSL = dart.constFn(dart.legacy(NotificationOfSL())))();
    class _DematerializeStreamSink extends core.Object {
      add(data) {
        NotificationLOfSL().as(data);
        if (dart.test(data.isOnData)) {
          this[_outputSink$].add(data.value);
        } else if (dart.test(data.isOnDone)) {
          this[_outputSink$].close();
        } else if (dart.test(data.isOnError)) {
          this[_outputSink$].addError(data.errorAndStackTrace.error, data.errorAndStackTrace.stackTrace);
        }
      }
      addError(e, st = null) {
        return this[_outputSink$].addError(e, st);
      }
      close() {
        return this[_outputSink$].close();
      }
    }
    (_DematerializeStreamSink.new = function(_outputSink) {
      this[_outputSink$] = _outputSink;
      ;
    }).prototype = _DematerializeStreamSink.prototype;
    dart.addTypeTests(_DematerializeStreamSink);
    _DematerializeStreamSink.prototype[_is__DematerializeStreamSink_default] = true;
    dart.addTypeCaches(_DematerializeStreamSink);
    _DematerializeStreamSink[dart.implements] = () => [async.EventSink$(dart.legacy(notification.Notification$(dart.legacy(S))))];
    dart.setMethodSignature(_DematerializeStreamSink, () => ({
      __proto__: dart.getMethods(_DematerializeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DematerializeStreamSink, I[11]);
    dart.setFieldSignature(_DematerializeStreamSink, () => ({
      __proto__: dart.getFields(_DematerializeStreamSink.__proto__),
      [_outputSink$]: dart.finalFieldType(dart.legacy(async.EventSink$(dart.legacy(S))))
    }));
    return _DematerializeStreamSink;
  });
  dematerialize._DematerializeStreamSink = dematerialize._DematerializeStreamSink$();
  dart.addTypeTests(dematerialize._DematerializeStreamSink, _is__DematerializeStreamSink_default);
  var kind$ = dart.privateName(notification, "Notification.kind");
  var value$0 = dart.privateName(notification, "Notification.value");
  var errorAndStackTrace$ = dart.privateName(notification, "Notification.errorAndStackTrace");
  var _name$ = dart.privateName(notification, "_name");
  const _is_Notification_default = Symbol('_is_Notification_default');
  notification.Notification$ = dart.generic(T => {
    class Notification extends core.Object {
      get kind() {
        return this[kind$];
      }
      set kind(value) {
        super.kind = value;
      }
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      get errorAndStackTrace() {
        return this[errorAndStackTrace$];
      }
      set errorAndStackTrace(value) {
        super.errorAndStackTrace = value;
      }
      static onData(value) {
        return new (notification.Notification$(dart.legacy(T))).__(notification.Kind.OnData, value, null);
      }
      static onDone() {
        return C[0] || CT.C0;
      }
      static onError(error, stackTrace) {
        return new (notification.Notification$(dart.legacy(T))).__(notification.Kind.OnError, null, new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace));
      }
      toString() {
        return "Notification{kind: " + dart.str(this.kind) + ", value: " + dart.str(this.value) + ", errorAndStackTrace: " + dart.str(this.errorAndStackTrace) + "}";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.NotificationL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.kind == other.kind && dart.equals(this.value, other.value) && dart.equals(this.errorAndStackTrace, other.errorAndStackTrace);
      }
      get hashCode() {
        return (dart.notNull(dart.hashCode(this.kind)) ^ dart.notNull(dart.hashCode(this.value)) ^ dart.notNull(dart.hashCode(this.errorAndStackTrace))) >>> 0;
      }
      get isOnData() {
        return this.kind == notification.Kind.OnData;
      }
      get isOnDone() {
        return this.kind == notification.Kind.OnDone;
      }
      get isOnError() {
        return this.kind == notification.Kind.OnError;
      }
    }
    (Notification.__ = function(kind, value, errorAndStackTrace) {
      this[kind$] = kind;
      this[value$0] = value;
      this[errorAndStackTrace$] = errorAndStackTrace;
      ;
    }).prototype = Notification.prototype;
    dart.addTypeTests(Notification);
    Notification.prototype[_is_Notification_default] = true;
    dart.addTypeCaches(Notification);
    dart.setMethodSignature(Notification, () => ({
      __proto__: dart.getMethods(Notification.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(Notification, () => ({
      __proto__: dart.getGetters(Notification.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int),
      isOnData: dart.legacy(core.bool),
      isOnDone: dart.legacy(core.bool),
      isOnError: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(Notification, I[12]);
    dart.setFieldSignature(Notification, () => ({
      __proto__: dart.getFields(Notification.__proto__),
      kind: dart.finalFieldType(dart.legacy(notification.Kind)),
      value: dart.finalFieldType(dart.legacy(T)),
      errorAndStackTrace: dart.finalFieldType(dart.legacy(error_and_stacktrace.ErrorAndStackTrace))
    }));
    dart.defineExtensionMethods(Notification, ['toString', '_equals']);
    dart.defineExtensionAccessors(Notification, ['hashCode']);
    return Notification;
  });
  notification.Notification = notification.Notification$();
  dart.addTypeTests(notification.Notification, _is_Notification_default);
  const _is_DematerializeStreamTransformer_default = Symbol('_is_DematerializeStreamTransformer_default');
  dematerialize.DematerializeStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var NotificationOfSL = () => (NotificationOfSL = dart.constFn(notification.Notification$(SL())))();
    var NotificationLOfSL = () => (NotificationLOfSL = dart.constFn(dart.legacy(NotificationOfSL())))();
    var StreamOfNotificationLOfSL = () => (StreamOfNotificationLOfSL = dart.constFn(async.Stream$(NotificationLOfSL())))();
    var StreamLOfNotificationLOfSL = () => (StreamLOfNotificationLOfSL = dart.constFn(dart.legacy(StreamOfNotificationLOfSL())))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var _DematerializeStreamSinkOfSL = () => (_DematerializeStreamSinkOfSL = dart.constFn(dematerialize._DematerializeStreamSink$(SL())))();
    var _DematerializeStreamSinkLOfSL = () => (_DematerializeStreamSinkLOfSL = dart.constFn(dart.legacy(_DematerializeStreamSinkOfSL())))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    var EventSinkLOfSLTo_DematerializeStreamSinkLOfSL = () => (EventSinkLOfSLTo_DematerializeStreamSinkLOfSL = dart.constFn(dart.fnType(_DematerializeStreamSinkLOfSL(), [EventSinkLOfSL()])))();
    class DematerializeStreamTransformer extends async.StreamTransformerBase$(dart.legacy(notification.Notification$(dart.legacy(S))), dart.legacy(S)) {
      bind(stream) {
        StreamLOfNotificationLOfSL().as(stream);
        return StreamOfSL().eventTransformed(stream, dart.fn(sink => new (_DematerializeStreamSinkOfSL()).new(sink), EventSinkLOfSLTo_DematerializeStreamSinkLOfSL()));
      }
    }
    (DematerializeStreamTransformer.new = function() {
      DematerializeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = DematerializeStreamTransformer.prototype;
    dart.addTypeTests(DematerializeStreamTransformer);
    DematerializeStreamTransformer.prototype[_is_DematerializeStreamTransformer_default] = true;
    dart.addTypeCaches(DematerializeStreamTransformer);
    dart.setMethodSignature(DematerializeStreamTransformer, () => ({
      __proto__: dart.getMethods(DematerializeStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(DematerializeStreamTransformer, I[11]);
    return DematerializeStreamTransformer;
  });
  dematerialize.DematerializeStreamTransformer = dematerialize.DematerializeStreamTransformer$();
  dart.addTypeTests(dematerialize.DematerializeStreamTransformer, _is_DematerializeStreamTransformer_default);
  dematerialize['DematerializeExtension|dematerialize'] = function DematerializeExtension$124dematerialize(T, $this) {
    return $this.transform(dart.legacy(T), new (dematerialize.DematerializeStreamTransformer$(dart.legacy(T))).new());
  };
  dematerialize['DematerializeExtension|get#dematerialize'] = function DematerializeExtension$124get$35dematerialize(T, $this) {
    return dart.fn(() => dematerialize['DematerializeExtension|dematerialize'](dart.legacy(T), $this), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), []));
  };
  var strategy$ = dart.privateName(backpressure, "BackpressureStreamTransformer.strategy");
  var windowStreamFactory$ = dart.privateName(backpressure, "BackpressureStreamTransformer.windowStreamFactory");
  var onWindowStart$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowStart");
  var onWindowEnd$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowEnd");
  var maxLengthQueue$ = dart.privateName(backpressure, "BackpressureStreamTransformer.maxLengthQueue");
  var startBufferEvery$ = dart.privateName(backpressure, "BackpressureStreamTransformer.startBufferEvery");
  var closeWindowWhen$ = dart.privateName(backpressure, "BackpressureStreamTransformer.closeWindowWhen");
  var ignoreEmptyWindows$ = dart.privateName(backpressure, "BackpressureStreamTransformer.ignoreEmptyWindows");
  var dispatchOnClose$ = dart.privateName(backpressure, "BackpressureStreamTransformer.dispatchOnClose");
  const _is_BackpressureStreamTransformer_default = Symbol('_is_BackpressureStreamTransformer_default');
  backpressure.BackpressureStreamTransformer$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _BackpressureStreamSinkOfSL$TL = () => (_BackpressureStreamSinkOfSL$TL = dart.constFn(backpressure._BackpressureStreamSink$(SL(), TL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class BackpressureStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(T)) {
      get strategy() {
        return this[strategy$];
      }
      set strategy(value) {
        super.strategy = value;
      }
      get windowStreamFactory() {
        return this[windowStreamFactory$];
      }
      set windowStreamFactory(value) {
        super.windowStreamFactory = value;
      }
      get onWindowStart() {
        return this[onWindowStart$];
      }
      set onWindowStart(value) {
        super.onWindowStart = value;
      }
      get onWindowEnd() {
        return this[onWindowEnd$];
      }
      set onWindowEnd(value) {
        super.onWindowEnd = value;
      }
      get maxLengthQueue() {
        return this[maxLengthQueue$];
      }
      set maxLengthQueue(value) {
        super.maxLengthQueue = value;
      }
      get startBufferEvery() {
        return this[startBufferEvery$];
      }
      set startBufferEvery(value) {
        super.startBufferEvery = value;
      }
      get closeWindowWhen() {
        return this[closeWindowWhen$];
      }
      set closeWindowWhen(value) {
        super.closeWindowWhen = value;
      }
      get ignoreEmptyWindows() {
        return this[ignoreEmptyWindows$];
      }
      set ignoreEmptyWindows(value) {
        super.ignoreEmptyWindows = value;
      }
      get dispatchOnClose() {
        return this[dispatchOnClose$];
      }
      set dispatchOnClose(value) {
        super.dispatchOnClose = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        let sink = new (_BackpressureStreamSinkOfSL$TL()).new(this.strategy, this.windowStreamFactory, this.onWindowStart, this.onWindowEnd, this.startBufferEvery, this.closeWindowWhen, this.ignoreEmptyWindows, this.dispatchOnClose, this.maxLengthQueue);
        return forwarding_stream.forwardStream(SL(), TL(), stream, sink);
      }
    }
    (BackpressureStreamTransformer.new = function(strategy, windowStreamFactory, opts) {
      let onWindowStart = opts && 'onWindowStart' in opts ? opts.onWindowStart : null;
      let onWindowEnd = opts && 'onWindowEnd' in opts ? opts.onWindowEnd : null;
      let startBufferEvery = opts && 'startBufferEvery' in opts ? opts.startBufferEvery : 0;
      let closeWindowWhen = opts && 'closeWindowWhen' in opts ? opts.closeWindowWhen : null;
      let ignoreEmptyWindows = opts && 'ignoreEmptyWindows' in opts ? opts.ignoreEmptyWindows : true;
      let dispatchOnClose = opts && 'dispatchOnClose' in opts ? opts.dispatchOnClose : true;
      let maxLengthQueue = opts && 'maxLengthQueue' in opts ? opts.maxLengthQueue : null;
      this[strategy$] = strategy;
      this[windowStreamFactory$] = windowStreamFactory;
      this[onWindowStart$] = onWindowStart;
      this[onWindowEnd$] = onWindowEnd;
      this[startBufferEvery$] = startBufferEvery;
      this[closeWindowWhen$] = closeWindowWhen;
      this[ignoreEmptyWindows$] = ignoreEmptyWindows;
      this[dispatchOnClose$] = dispatchOnClose;
      this[maxLengthQueue$] = maxLengthQueue;
      BackpressureStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = BackpressureStreamTransformer.prototype;
    dart.addTypeTests(BackpressureStreamTransformer);
    BackpressureStreamTransformer.prototype[_is_BackpressureStreamTransformer_default] = true;
    dart.addTypeCaches(BackpressureStreamTransformer);
    dart.setMethodSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getMethods(BackpressureStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(BackpressureStreamTransformer, I[13]);
    dart.setFieldSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getFields(BackpressureStreamTransformer.__proto__),
      strategy: dart.finalFieldType(dart.legacy(backpressure.WindowStrategy)),
      windowStreamFactory: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream), [dart.legacy(S)]))),
      onWindowStart: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(S)]))),
      onWindowEnd: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(core.List$(dart.legacy(S)))]))),
      maxLengthQueue: dart.finalFieldType(dart.legacy(core.int)),
      startBufferEvery: dart.finalFieldType(dart.legacy(core.int)),
      closeWindowWhen: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.List$(dart.legacy(S)))]))),
      ignoreEmptyWindows: dart.finalFieldType(dart.legacy(core.bool)),
      dispatchOnClose: dart.finalFieldType(dart.legacy(core.bool))
    }));
    return BackpressureStreamTransformer;
  });
  backpressure.BackpressureStreamTransformer = backpressure.BackpressureStreamTransformer$();
  dart.addTypeTests(backpressure.BackpressureStreamTransformer, _is_BackpressureStreamTransformer_default);
  const _is_WindowStreamTransformer_default = Symbol('_is_WindowStreamTransformer_default');
  window$.WindowStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToStreamLOfTL = () => (ListLOfTLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [ListLOfTL()])))();
    class WindowStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(async.Stream$(dart.legacy(T)))) {}
    (WindowStreamTransformer.new = function(window) {
      WindowStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => StreamOfTL().fromIterable(queue), ListLOfTLToStreamLOfTL()), ignoreEmptyWindows: false});
      if (window == null) dart.throw(new core.ArgumentError.notNull("window"));
    }).prototype = WindowStreamTransformer.prototype;
    dart.addTypeTests(WindowStreamTransformer);
    WindowStreamTransformer.prototype[_is_WindowStreamTransformer_default] = true;
    dart.addTypeCaches(WindowStreamTransformer);
    dart.setLibraryUri(WindowStreamTransformer, I[14]);
    return WindowStreamTransformer;
  });
  window$.WindowStreamTransformer = window$.WindowStreamTransformer$();
  dart.addTypeTests(window$.WindowStreamTransformer, _is_WindowStreamTransformer_default);
  const _is_WindowCountStreamTransformer_default = Symbol('_is_WindowCountStreamTransformer_default');
  window$.WindowCountStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToStreamLOfTL = () => (ListLOfTLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [ListLOfTL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [IterableLOfTL()])))();
    class WindowCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(async.Stream$(dart.legacy(T)))) {}
    (WindowCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      WindowCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => StreamOfTL().fromIterable(queue), ListLOfTLToStreamLOfTL()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[$length] == count, IterableLOfTLToboolL())});
      if (count == null) dart.throw(new core.ArgumentError.notNull("count"));
      if (startBufferEvery == null) {
        dart.throw(new core.ArgumentError.notNull("startBufferEvery"));
      }
      if (dart.notNull(count) < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (dart.notNull(startBufferEvery) < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = WindowCountStreamTransformer.prototype;
    dart.addTypeTests(WindowCountStreamTransformer);
    WindowCountStreamTransformer.prototype[_is_WindowCountStreamTransformer_default] = true;
    dart.addTypeCaches(WindowCountStreamTransformer);
    dart.setLibraryUri(WindowCountStreamTransformer, I[14]);
    return WindowCountStreamTransformer;
  });
  window$.WindowCountStreamTransformer = window$.WindowCountStreamTransformer$();
  dart.addTypeTests(window$.WindowCountStreamTransformer, _is_WindowCountStreamTransformer_default);
  const _is_WindowTestStreamTransformer_default = Symbol('_is_WindowTestStreamTransformer_default');
  window$.WindowTestStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToStreamLOfTL = () => (ListLOfTLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [ListLOfTL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [IterableLOfTL()])))();
    class WindowTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(async.Stream$(dart.legacy(T)))) {}
    (WindowTestStreamTransformer.new = function(test) {
      WindowTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => StreamOfTL().fromIterable(queue), ListLOfTLToStreamLOfTL()), closeWindowWhen: dart.fn(queue => test(queue[$last]), IterableLOfTLToboolL())});
      if (test == null) dart.throw(new core.ArgumentError.notNull("test"));
    }).prototype = WindowTestStreamTransformer.prototype;
    dart.addTypeTests(WindowTestStreamTransformer);
    WindowTestStreamTransformer.prototype[_is_WindowTestStreamTransformer_default] = true;
    dart.addTypeCaches(WindowTestStreamTransformer);
    dart.setLibraryUri(WindowTestStreamTransformer, I[14]);
    return WindowTestStreamTransformer;
  });
  window$.WindowTestStreamTransformer = window$.WindowTestStreamTransformer$();
  dart.addTypeTests(window$.WindowTestStreamTransformer, _is_WindowTestStreamTransformer_default);
  window$['WindowExtensions|window'] = function WindowExtensions$124window(T, $this, window) {
    return $this.transform(dart.legacy(async.Stream$(dart.legacy(T))), new (window$.WindowStreamTransformer$(dart.legacy(T))).new(dart.fn(_ => window, dart.fnType(T$.StreamL(), [dart.legacy(T)]))));
  };
  window$['WindowExtensions|get#window'] = function WindowExtensions$124get$35window(T, $this) {
    return dart.fn(window => window$['WindowExtensions|window'](dart.legacy(T), $this, window), dart.fnType(dart.legacy(async.Stream$(dart.legacy(async.Stream$(dart.legacy(T))))), [T$.StreamL()]));
  };
  window$['WindowExtensions|windowCount'] = function WindowExtensions$124windowCount(T, $this, count, startBufferEvery = 0) {
    return $this.transform(dart.legacy(async.Stream$(dart.legacy(T))), new (window$.WindowCountStreamTransformer$(dart.legacy(T))).new(count, startBufferEvery));
  };
  window$['WindowExtensions|get#windowCount'] = function WindowExtensions$124get$35windowCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => window$['WindowExtensions|windowCount'](dart.legacy(T), $this, count, startBufferEvery), dart.fnType(dart.legacy(async.Stream$(dart.legacy(async.Stream$(dart.legacy(T))))), [T$.intL()], [T$.intL()]));
  };
  window$['WindowExtensions|windowTest'] = function WindowExtensions$124windowTest(T, $this, onTestHandler) {
    return $this.transform(dart.legacy(async.Stream$(dart.legacy(T))), new (window$.WindowTestStreamTransformer$(dart.legacy(T))).new(onTestHandler));
  };
  window$['WindowExtensions|get#windowTest'] = function WindowExtensions$124get$35windowTest(T, $this) {
    return dart.fn(onTestHandler => window$['WindowExtensions|windowTest'](dart.legacy(T), $this, onTestHandler), dart.fnType(dart.legacy(async.Stream$(dart.legacy(async.Stream$(dart.legacy(T))))), [dart.legacy(dart.fnType(T$.boolL(), [dart.legacy(T)]))]));
  };
  window$['WindowExtensions|windowTime'] = function WindowExtensions$124windowTime(T, $this, duration) {
    if (duration == null) dart.throw(new core.ArgumentError.notNull("duration"));
    return window$['WindowExtensions|window'](dart.legacy(T), $this, T$.StreamOfvoid().periodic(duration));
  };
  window$['WindowExtensions|get#windowTime'] = function WindowExtensions$124get$35windowTime(T, $this) {
    return dart.fn(duration => window$['WindowExtensions|windowTime'](dart.legacy(T), $this, duration), dart.fnType(dart.legacy(async.Stream$(dart.legacy(async.Stream$(dart.legacy(T))))), [T$.DurationL()]));
  };
  const _is_ThrottleStreamTransformer_default = Symbol('_is_ThrottleStreamTransformer_default');
  throttle.ThrottleStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLToTL = () => (TLToTL = dart.constFn(dart.fnType(TL(), [TL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToTL = () => (IterableLOfTLToTL = dart.constFn(dart.fnType(TL(), [IterableLOfTL()])))();
    class ThrottleStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(T)) {}
    (ThrottleStreamTransformer.new = function(window, opts) {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      ThrottleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.eventAfterLastWindow, window, {onWindowStart: dart.test(leading) ? dart.fn(event => event, TLToTL()) : null, onWindowEnd: dart.test(trailing) ? dart.fn(queue => queue[$last], IterableLOfTLToTL()) : null, dispatchOnClose: trailing});
      if (!(window != null)) dart.assertFailed("window stream factory cannot be null", I[15], 33, 12, "window != null");
    }).prototype = ThrottleStreamTransformer.prototype;
    dart.addTypeTests(ThrottleStreamTransformer);
    ThrottleStreamTransformer.prototype[_is_ThrottleStreamTransformer_default] = true;
    dart.addTypeCaches(ThrottleStreamTransformer);
    dart.setLibraryUri(ThrottleStreamTransformer, I[16]);
    return ThrottleStreamTransformer;
  });
  throttle.ThrottleStreamTransformer = throttle.ThrottleStreamTransformer$();
  dart.addTypeTests(throttle.ThrottleStreamTransformer, _is_ThrottleStreamTransformer_default);
  throttle['ThrottleExtensions|throttle'] = function ThrottleExtensions$124throttle(T, $this, window, opts) {
    let trailing = opts && 'trailing' in opts ? opts.trailing : false;
    let leading = opts && 'leading' in opts ? opts.leading : true;
    return $this.transform(dart.legacy(T), new (throttle.ThrottleStreamTransformer$(dart.legacy(T))).new(window, {trailing: trailing, leading: leading}));
  };
  throttle['ThrottleExtensions|get#throttle'] = function ThrottleExtensions$124get$35throttle(T, $this) {
    return dart.fn((window, opts) => {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      return throttle['ThrottleExtensions|throttle'](dart.legacy(T), $this, window, {trailing: trailing, leading: leading});
    }, dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(T$.StreamL(), [dart.legacy(T)]))], {leading: T$.boolL(), trailing: T$.boolL()}, {}));
  };
  throttle['ThrottleExtensions|throttleTime'] = function ThrottleExtensions$124throttleTime(T, $this, duration, opts) {
    let trailing = opts && 'trailing' in opts ? opts.trailing : false;
    let leading = opts && 'leading' in opts ? opts.leading : true;
    core.ArgumentError.checkNotNull(T$.DurationL(), duration, "duration");
    return $this.transform(dart.legacy(T), new (throttle.ThrottleStreamTransformer$(dart.legacy(T))).new(dart.fn(_ => new (T$.TimerStreamOfboolL()).new(true, duration), dart.fnType(T$.TimerStreamLOfboolL(), [dart.legacy(T)])), {trailing: trailing, leading: leading}));
  };
  throttle['ThrottleExtensions|get#throttleTime'] = function ThrottleExtensions$124get$35throttleTime(T, $this) {
    return dart.fn((duration, opts) => {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      return throttle['ThrottleExtensions|throttleTime'](dart.legacy(T), $this, duration, {trailing: trailing, leading: leading});
    }, dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.DurationL()], {leading: T$.boolL(), trailing: T$.boolL()}, {}));
  };
  const _is_SampleStreamTransformer_default = Symbol('_is_SampleStreamTransformer_default');
  sample.SampleStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToTL = () => (IterableLOfTLToTL = dart.constFn(dart.fnType(TL(), [IterableLOfTL()])))();
    class SampleStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(T)) {}
    (SampleStreamTransformer.new = function(window) {
      SampleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue[$last], IterableLOfTLToTL())});
      if (!(window != null)) dart.assertFailed("window stream factory cannot be null", I[17], 23, 12, "window != null");
    }).prototype = SampleStreamTransformer.prototype;
    dart.addTypeTests(SampleStreamTransformer);
    SampleStreamTransformer.prototype[_is_SampleStreamTransformer_default] = true;
    dart.addTypeCaches(SampleStreamTransformer);
    dart.setLibraryUri(SampleStreamTransformer, I[18]);
    return SampleStreamTransformer;
  });
  sample.SampleStreamTransformer = sample.SampleStreamTransformer$();
  dart.addTypeTests(sample.SampleStreamTransformer, _is_SampleStreamTransformer_default);
  sample['SampleExtensions|sample'] = function SampleExtensions$124sample(T, $this, sampleStream) {
    return $this.transform(dart.legacy(T), new (sample.SampleStreamTransformer$(dart.legacy(T))).new(dart.fn(_ => sampleStream, dart.fnType(T$.StreamL(), [dart.legacy(T)]))));
  };
  sample['SampleExtensions|get#sample'] = function SampleExtensions$124get$35sample(T, $this) {
    return dart.fn(sampleStream => sample['SampleExtensions|sample'](dart.legacy(T), $this, sampleStream), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.StreamL()]));
  };
  sample['SampleExtensions|sampleTime'] = function SampleExtensions$124sampleTime(T, $this, duration) {
    return sample['SampleExtensions|sample'](dart.legacy(T), $this, T$.StreamOfvoid().periodic(duration));
  };
  sample['SampleExtensions|get#sampleTime'] = function SampleExtensions$124get$35sampleTime(T, $this) {
    return dart.fn(duration => sample['SampleExtensions|sampleTime'](dart.legacy(T), $this, duration), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.DurationL()]));
  };
  const _is_PairwiseStreamTransformer_default = Symbol('_is_PairwiseStreamTransformer_default');
  pairwise.PairwiseStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLToNeverStreamLOfvoid = () => (TLToNeverStreamLOfvoid = dart.constFn(dart.fnType(T$.NeverStreamLOfvoid(), [TL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToIterableLOfTL = () => (IterableLOfTLToIterableLOfTL = dart.constFn(dart.fnType(IterableLOfTL(), [IterableLOfTL()])))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [IterableLOfTL()])))();
    class PairwiseStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(core.Iterable$(dart.legacy(T)))) {}
    (PairwiseStreamTransformer.new = function() {
      PairwiseStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, dart.fn(_ => new (T$.NeverStreamOfvoid()).new(), TLToNeverStreamLOfvoid()), {onWindowEnd: dart.fn(queue => queue, IterableLOfTLToIterableLOfTL()), startBufferEvery: 1, closeWindowWhen: dart.fn(queue => queue[$length] === 2, IterableLOfTLToboolL()), dispatchOnClose: false});
      ;
    }).prototype = PairwiseStreamTransformer.prototype;
    dart.addTypeTests(PairwiseStreamTransformer);
    PairwiseStreamTransformer.prototype[_is_PairwiseStreamTransformer_default] = true;
    dart.addTypeCaches(PairwiseStreamTransformer);
    dart.setLibraryUri(PairwiseStreamTransformer, I[19]);
    return PairwiseStreamTransformer;
  });
  pairwise.PairwiseStreamTransformer = pairwise.PairwiseStreamTransformer$();
  dart.addTypeTests(pairwise.PairwiseStreamTransformer, _is_PairwiseStreamTransformer_default);
  pairwise['PairwiseExtension|pairwise'] = function PairwiseExtension$124pairwise(T, $this) {
    return $this.transform(dart.legacy(core.Iterable$(dart.legacy(T))), new (pairwise.PairwiseStreamTransformer$(dart.legacy(T))).new());
  };
  pairwise['PairwiseExtension|get#pairwise'] = function PairwiseExtension$124get$35pairwise(T, $this) {
    return dart.fn(() => pairwise['PairwiseExtension|pairwise'](dart.legacy(T), $this), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.Iterable$(dart.legacy(T))))), []));
  };
  const _is_DebounceStreamTransformer_default = Symbol('_is_DebounceStreamTransformer_default');
  debounce.DebounceStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToTL = () => (IterableLOfTLToTL = dart.constFn(dart.fnType(TL(), [IterableLOfTL()])))();
    class DebounceStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(T)) {}
    (DebounceStreamTransformer.new = function(window) {
      if (!(window != null)) dart.assertFailed("window stream factory cannot be null", I[20], 33, 16, "window != null");
      DebounceStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.everyEvent, window, {onWindowEnd: dart.fn(queue => queue[$last], IterableLOfTLToTL()), maxLengthQueue: 1});
      ;
    }).prototype = DebounceStreamTransformer.prototype;
    dart.addTypeTests(DebounceStreamTransformer);
    DebounceStreamTransformer.prototype[_is_DebounceStreamTransformer_default] = true;
    dart.addTypeCaches(DebounceStreamTransformer);
    dart.setLibraryUri(DebounceStreamTransformer, I[21]);
    return DebounceStreamTransformer;
  });
  debounce.DebounceStreamTransformer = debounce.DebounceStreamTransformer$();
  dart.addTypeTests(debounce.DebounceStreamTransformer, _is_DebounceStreamTransformer_default);
  debounce['DebounceExtensions|debounce'] = function DebounceExtensions$124debounce(T, $this, window) {
    return $this.transform(dart.legacy(T), new (debounce.DebounceStreamTransformer$(dart.legacy(T))).new(window));
  };
  debounce['DebounceExtensions|get#debounce'] = function DebounceExtensions$124get$35debounce(T, $this) {
    return dart.fn(window => debounce['DebounceExtensions|debounce'](dart.legacy(T), $this, window), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(dart.fnType(T$.StreamL(), [dart.legacy(T)]))]));
  };
  debounce['DebounceExtensions|debounceTime'] = function DebounceExtensions$124debounceTime(T, $this, duration) {
    return $this.transform(dart.legacy(T), new (debounce.DebounceStreamTransformer$(dart.legacy(T))).new(dart.fn(_ => new (T$.TimerStreamOfvoid()).new(null, duration), dart.fnType(T$.TimerStreamLOfvoid(), [dart.legacy(T)]))));
  };
  debounce['DebounceExtensions|get#debounceTime'] = function DebounceExtensions$124get$35debounceTime(T, $this) {
    return dart.fn(duration => debounce['DebounceExtensions|debounceTime'](dart.legacy(T), $this, duration), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [T$.DurationL()]));
  };
  var _name$0 = dart.privateName(backpressure, "_name");
  backpressure.WindowStrategy = class WindowStrategy extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (backpressure.WindowStrategy.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = backpressure.WindowStrategy.prototype;
  dart.addTypeTests(backpressure.WindowStrategy);
  dart.addTypeCaches(backpressure.WindowStrategy);
  dart.setMethodSignature(backpressure.WindowStrategy, () => ({
    __proto__: dart.getMethods(backpressure.WindowStrategy.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(backpressure.WindowStrategy, I[13]);
  dart.setFieldSignature(backpressure.WindowStrategy, () => ({
    __proto__: dart.getFields(backpressure.WindowStrategy.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(backpressure.WindowStrategy, ['toString']);
  backpressure.WindowStrategy.everyEvent = C[2] || CT.C2;
  backpressure.WindowStrategy.eventAfterLastWindow = C[3] || CT.C3;
  backpressure.WindowStrategy.firstEventOnly = C[4] || CT.C4;
  backpressure.WindowStrategy.onHandler = C[5] || CT.C5;
  backpressure.WindowStrategy.values = C[6] || CT.C6;
  var _hasData = dart.privateName(backpressure, "_hasData");
  var _mainClosed = dart.privateName(backpressure, "_mainClosed");
  var _windowSubscription = dart.privateName(backpressure, "_windowSubscription");
  var _strategy$ = dart.privateName(backpressure, "_strategy");
  var _windowStreamFactory$ = dart.privateName(backpressure, "_windowStreamFactory");
  var _onWindowStart$ = dart.privateName(backpressure, "_onWindowStart");
  var _onWindowEnd$ = dart.privateName(backpressure, "_onWindowEnd");
  var _startBufferEvery$ = dart.privateName(backpressure, "_startBufferEvery");
  var _closeWindowWhen$ = dart.privateName(backpressure, "_closeWindowWhen");
  var _ignoreEmptyWindows$ = dart.privateName(backpressure, "_ignoreEmptyWindows");
  var _dispatchOnClose$ = dart.privateName(backpressure, "_dispatchOnClose");
  const _is__BackpressureStreamSink_default = Symbol('_is__BackpressureStreamSink_default');
  backpressure._BackpressureStreamSink$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var DoubleLinkedQueueOfSL = () => (DoubleLinkedQueueOfSL = dart.constFn(collection.DoubleLinkedQueue$(SL())))();
    var ListOfSL = () => (ListOfSL = dart.constFn(core.List$(SL())))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var EventSinkOfTL = () => (EventSinkOfTL = dart.constFn(async.EventSink$(TL())))();
    var EventSinkLOfTL = () => (EventSinkLOfTL = dart.constFn(dart.legacy(EventSinkOfTL())))();
    class _BackpressureStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfTL().as(sink);
        SL().as(data);
        this[_hasData] = true;
        this.maybeCreateWindow(data, sink);
        if (this.skip === 0) {
          this.queue.add(data);
          if (this.maxLengthQueue != null && dart.notNull(this.queue[$length]) > dart.notNull(this.maxLengthQueue)) {
            backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](SL(), this.queue, dart.notNull(this.queue[$length]) - dart.notNull(this.maxLengthQueue));
          }
        }
        if (dart.notNull(this.skip) > 0) {
          this.skip = dart.notNull(this.skip) - 1;
        }
        this.maybeCloseWindow(sink);
      }
      addError(sink, e, st = null) {
        EventSinkLOfTL().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t93;
        EventSinkLOfTL().as(sink);
        this[_mainClosed] = true;
        if (this[_strategy$] == backpressure.WindowStrategy.eventAfterLastWindow) {
          return;
        }
        if (dart.test(this[_dispatchOnClose$]) && dart.test(this.queue[$isNotEmpty])) {
          this.resolveWindowStart(this.queue[$last], sink);
        }
        this.resolveWindowEnd(sink, true);
        this.queue.clear();
        t93 = this[_windowSubscription];
        t93 == null ? null : t93.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t93;
        EventSinkLOfTL().as(sink);
        t93 = this[_windowSubscription];
        return t93 == null ? null : t93.cancel();
      }
      onListen(sink) {
        EventSinkLOfTL().as(sink);
      }
      onPause(sink) {
        let t93;
        EventSinkLOfTL().as(sink);
        t93 = this[_windowSubscription];
        return t93 == null ? null : t93.pause();
      }
      onResume(sink) {
        let t93;
        EventSinkLOfTL().as(sink);
        t93 = this[_windowSubscription];
        return t93 == null ? null : t93.resume();
      }
      maybeCreateWindow(event, sink) {
        let t93;
        SL().as(event);
        EventSinkLOfTL().as(sink);
        switch (this[_strategy$]) {
          case C[3] || CT.C3:
          {
            if (this[_windowSubscription] != null) return;
            this[_windowSubscription] = this.singleWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[4] || CT.C4:
          {
            if (this[_windowSubscription] != null) return;
            this[_windowSubscription] = this.multiWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[2] || CT.C2:
          {
            t93 = this[_windowSubscription];
            t93 == null ? null : t93.cancel();
            this[_windowSubscription] = this.singleWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[5] || CT.C5:
          {
            break;
          }
        }
      }
      maybeCloseWindow(sink) {
        let t93;
        EventSinkLOfTL().as(sink);
        if (this[_closeWindowWhen$] != null && dart.test((t93 = this.unmodifiableQueue, this[_closeWindowWhen$](t93)))) {
          this.resolveWindowEnd(sink);
        }
      }
      singleWindow(event, sink) {
        SL().as(event);
        EventSinkLOfTL().as(sink);
        return this.buildStream(event, sink).take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink, this[_mainClosed]), T$.VoidTovoid())});
      }
      multiWindow(event, sink) {
        SL().as(event);
        EventSinkLOfTL().as(sink);
        return this.buildStream(event, sink).listen(dart.fn(_ => this.resolveWindowEnd(sink), T$.dynamicTovoid()), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink), T$.VoidTovoid())});
      }
      buildStream(event, sink) {
        let t93, t93$;
        SL().as(event);
        EventSinkLOfTL().as(sink);
        let stream = null;
        t93 = this[_windowSubscription];
        t93 == null ? null : t93.cancel();
        stream = (t93$ = event, this[_windowStreamFactory$](t93$));
        if (stream == null) {
          sink.addError(new core.ArgumentError.notNull("windowStreamFactory"));
        }
        return stream;
      }
      resolveWindowStart(event, sink) {
        let t93;
        SL().as(event);
        EventSinkLOfTL().as(sink);
        if (this[_onWindowStart$] != null) {
          sink.add((t93 = event, this[_onWindowStart$](t93)));
        }
      }
      resolveWindowEnd(sink, isControllerClosing = false) {
        let t93, t93$, t93$0, t93$1;
        EventSinkLOfTL().as(sink);
        if (dart.test(isControllerClosing) && this[_strategy$] == backpressure.WindowStrategy.eventAfterLastWindow) {
          if (dart.test(this[_hasData]) && dart.notNull(this.queue[$length]) > 1 && this[_onWindowEnd$] != null) {
            sink.add((t93 = this.unmodifiableQueue, this[_onWindowEnd$](t93)));
          }
          this.queue.clear();
          t93$ = this[_windowSubscription];
          t93$ == null ? null : t93$.cancel();
          this[_windowSubscription] = null;
          sink.close();
          return;
        }
        if (dart.test(isControllerClosing) || this[_strategy$] == backpressure.WindowStrategy.eventAfterLastWindow || this[_strategy$] == backpressure.WindowStrategy.everyEvent) {
          t93$0 = this[_windowSubscription];
          t93$0 == null ? null : t93$0.cancel();
          this[_windowSubscription] = null;
        }
        if (dart.test(isControllerClosing) && !dart.test(this[_dispatchOnClose$])) {
          return;
        }
        if (dart.test(this[_hasData]) && (dart.test(this.queue[$isNotEmpty]) || !dart.test(this[_ignoreEmptyWindows$]))) {
          if (this[_onWindowEnd$] != null) {
            sink.add((t93$1 = this.unmodifiableQueue, this[_onWindowEnd$](t93$1)));
          }
          if (!dart.test(isControllerClosing) && dart.notNull(this[_startBufferEvery$]) > 0) {
            this.skip = dart.notNull(this[_startBufferEvery$]) > dart.notNull(this.queue[$length]) ? dart.notNull(this[_startBufferEvery$]) - dart.notNull(this.queue[$length]) : 0;
            if (dart.notNull(this[_startBufferEvery$]) < dart.notNull(this.queue[$length])) {
              backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](SL(), this.queue, this[_startBufferEvery$]);
            } else {
              this.queue.clear();
            }
          } else {
            this.queue.clear();
          }
        }
      }
      get unmodifiableQueue() {
        return ListOfSL().unmodifiable(this.queue);
      }
    }
    (_BackpressureStreamSink.new = function(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
      this.queue = new (DoubleLinkedQueueOfSL()).new();
      this.skip = 0;
      this[_hasData] = false;
      this[_mainClosed] = false;
      this[_windowSubscription] = null;
      this[_strategy$] = _strategy;
      this[_windowStreamFactory$] = _windowStreamFactory;
      this[_onWindowStart$] = _onWindowStart;
      this[_onWindowEnd$] = _onWindowEnd;
      this[_startBufferEvery$] = _startBufferEvery;
      this[_closeWindowWhen$] = _closeWindowWhen;
      this[_ignoreEmptyWindows$] = _ignoreEmptyWindows;
      this[_dispatchOnClose$] = _dispatchOnClose;
      this.maxLengthQueue = maxLengthQueue;
      ;
    }).prototype = _BackpressureStreamSink.prototype;
    dart.addTypeTests(_BackpressureStreamSink);
    _BackpressureStreamSink.prototype[_is__BackpressureStreamSink_default] = true;
    dart.addTypeCaches(_BackpressureStreamSink);
    _BackpressureStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(T))];
    dart.setMethodSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getMethods(_BackpressureStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      maybeCreateWindow: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      maybeCloseWindow: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      singleWindow: dart.fnType(dart.legacy(async.StreamSubscription), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      multiWindow: dart.fnType(dart.legacy(async.StreamSubscription), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      buildStream: dart.fnType(dart.legacy(async.Stream), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      resolveWindowStart: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      resolveWindowEnd: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.bool)])
    }));
    dart.setGetterSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getGetters(_BackpressureStreamSink.__proto__),
      unmodifiableQueue: dart.legacy(core.List$(dart.legacy(S)))
    }));
    dart.setLibraryUri(_BackpressureStreamSink, I[13]);
    dart.setFieldSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getFields(_BackpressureStreamSink.__proto__),
      [_strategy$]: dart.finalFieldType(dart.legacy(backpressure.WindowStrategy)),
      [_windowStreamFactory$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Stream), [dart.legacy(S)]))),
      [_onWindowStart$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(S)]))),
      [_onWindowEnd$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(core.List$(dart.legacy(S)))]))),
      [_startBufferEvery$]: dart.finalFieldType(dart.legacy(core.int)),
      [_closeWindowWhen$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.List$(dart.legacy(S)))]))),
      [_ignoreEmptyWindows$]: dart.finalFieldType(dart.legacy(core.bool)),
      [_dispatchOnClose$]: dart.finalFieldType(dart.legacy(core.bool)),
      queue: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(S)))),
      maxLengthQueue: dart.finalFieldType(dart.legacy(core.int)),
      skip: dart.fieldType(dart.legacy(core.int)),
      [_hasData]: dart.fieldType(dart.legacy(core.bool)),
      [_mainClosed]: dart.fieldType(dart.legacy(core.bool)),
      [_windowSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription))
    }));
    return _BackpressureStreamSink;
  });
  backpressure._BackpressureStreamSink = backpressure._BackpressureStreamSink$();
  dart.addTypeTests(backpressure._BackpressureStreamSink, _is__BackpressureStreamSink_default);
  backpressure['_RemoveFirstNQueueExtension|removeFirstElements'] = function _RemoveFirstNQueueExtension$124removeFirstElements(T, $this, count) {
    for (let i = 0; i < dart.notNull(count); i = i + 1) {
      $this.removeFirst();
    }
  };
  backpressure['_RemoveFirstNQueueExtension|get#removeFirstElements'] = function _RemoveFirstNQueueExtension$124get$35removeFirstElements(T, $this) {
    return dart.fn(count => backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](dart.legacy(T), $this, count), T$.intLTovoid());
  };
  const _is_BufferStreamTransformer_default = Symbol('_is_BufferStreamTransformer_default');
  buffer.BufferStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToListLOfTL = () => (ListLOfTLToListLOfTL = dart.constFn(dart.fnType(ListLOfTL(), [ListLOfTL()])))();
    class BufferStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(core.List$(dart.legacy(T)))) {}
    (BufferStreamTransformer.new = function(window) {
      BufferStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue, ListLOfTLToListLOfTL()), ignoreEmptyWindows: false});
      if (window == null) dart.throw(new core.ArgumentError.notNull("window"));
    }).prototype = BufferStreamTransformer.prototype;
    dart.addTypeTests(BufferStreamTransformer);
    BufferStreamTransformer.prototype[_is_BufferStreamTransformer_default] = true;
    dart.addTypeCaches(BufferStreamTransformer);
    dart.setLibraryUri(BufferStreamTransformer, I[22]);
    return BufferStreamTransformer;
  });
  buffer.BufferStreamTransformer = buffer.BufferStreamTransformer$();
  dart.addTypeTests(buffer.BufferStreamTransformer, _is_BufferStreamTransformer_default);
  const _is_BufferCountStreamTransformer_default = Symbol('_is_BufferCountStreamTransformer_default');
  buffer.BufferCountStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToListLOfTL = () => (ListLOfTLToListLOfTL = dart.constFn(dart.fnType(ListLOfTL(), [ListLOfTL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [IterableLOfTL()])))();
    class BufferCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(core.List$(dart.legacy(T)))) {}
    (BufferCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      BufferCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, ListLOfTLToListLOfTL()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[$length] == count, IterableLOfTLToboolL())});
      if (count == null) dart.throw(new core.ArgumentError.notNull("count"));
      if (startBufferEvery == null) {
        dart.throw(new core.ArgumentError.notNull("startBufferEvery"));
      }
      if (dart.notNull(count) < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (dart.notNull(startBufferEvery) < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = BufferCountStreamTransformer.prototype;
    dart.addTypeTests(BufferCountStreamTransformer);
    BufferCountStreamTransformer.prototype[_is_BufferCountStreamTransformer_default] = true;
    dart.addTypeCaches(BufferCountStreamTransformer);
    dart.setLibraryUri(BufferCountStreamTransformer, I[22]);
    return BufferCountStreamTransformer;
  });
  buffer.BufferCountStreamTransformer = buffer.BufferCountStreamTransformer$();
  dart.addTypeTests(buffer.BufferCountStreamTransformer, _is_BufferCountStreamTransformer_default);
  const _is_BufferTestStreamTransformer_default = Symbol('_is_BufferTestStreamTransformer_default');
  buffer.BufferTestStreamTransformer$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var ListLOfTLToListLOfTL = () => (ListLOfTLToListLOfTL = dart.constFn(dart.fnType(ListLOfTL(), [ListLOfTL()])))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [IterableLOfTL()])))();
    class BufferTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(dart.legacy(T), dart.legacy(core.List$(dart.legacy(T)))) {}
    (BufferTestStreamTransformer.new = function(test) {
      BufferTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, ListLOfTLToListLOfTL()), closeWindowWhen: dart.fn(queue => test(queue[$last]), IterableLOfTLToboolL())});
      if (test == null) dart.throw(new core.ArgumentError.notNull("test"));
    }).prototype = BufferTestStreamTransformer.prototype;
    dart.addTypeTests(BufferTestStreamTransformer);
    BufferTestStreamTransformer.prototype[_is_BufferTestStreamTransformer_default] = true;
    dart.addTypeCaches(BufferTestStreamTransformer);
    dart.setLibraryUri(BufferTestStreamTransformer, I[22]);
    return BufferTestStreamTransformer;
  });
  buffer.BufferTestStreamTransformer = buffer.BufferTestStreamTransformer$();
  dart.addTypeTests(buffer.BufferTestStreamTransformer, _is_BufferTestStreamTransformer_default);
  buffer['BufferExtensions|buffer'] = function BufferExtensions$124buffer(T, $this, window) {
    return $this.transform(dart.legacy(core.List$(dart.legacy(T))), new (buffer.BufferStreamTransformer$(dart.legacy(T))).new(dart.fn(_ => window, dart.fnType(T$.StreamL(), [dart.legacy(T)]))));
  };
  buffer['BufferExtensions|get#buffer'] = function BufferExtensions$124get$35buffer(T, $this) {
    return dart.fn(window => buffer['BufferExtensions|buffer'](dart.legacy(T), $this, window), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(T))))), [T$.StreamL()]));
  };
  buffer['BufferExtensions|bufferCount'] = function BufferExtensions$124bufferCount(T, $this, count, startBufferEvery = 0) {
    return $this.transform(dart.legacy(core.List$(dart.legacy(T))), new (buffer.BufferCountStreamTransformer$(dart.legacy(T))).new(count, startBufferEvery));
  };
  buffer['BufferExtensions|get#bufferCount'] = function BufferExtensions$124get$35bufferCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => buffer['BufferExtensions|bufferCount'](dart.legacy(T), $this, count, startBufferEvery), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(T))))), [T$.intL()], [T$.intL()]));
  };
  buffer['BufferExtensions|bufferTest'] = function BufferExtensions$124bufferTest(T, $this, onTestHandler) {
    return $this.transform(dart.legacy(core.List$(dart.legacy(T))), new (buffer.BufferTestStreamTransformer$(dart.legacy(T))).new(onTestHandler));
  };
  buffer['BufferExtensions|get#bufferTest'] = function BufferExtensions$124get$35bufferTest(T, $this) {
    return dart.fn(onTestHandler => buffer['BufferExtensions|bufferTest'](dart.legacy(T), $this, onTestHandler), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(T))))), [dart.legacy(dart.fnType(T$.boolL(), [dart.legacy(T)]))]));
  };
  buffer['BufferExtensions|bufferTime'] = function BufferExtensions$124bufferTime(T, $this, duration) {
    if (duration == null) dart.throw(new core.ArgumentError.notNull("duration"));
    return buffer['BufferExtensions|buffer'](dart.legacy(T), $this, T$.StreamOfvoid().periodic(duration));
  };
  buffer['BufferExtensions|get#bufferTime'] = function BufferExtensions$124get$35bufferTime(T, $this) {
    return dart.fn(duration => buffer['BufferExtensions|bufferTime'](dart.legacy(T), $this, duration), dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(T))))), [T$.DurationL()]));
  };
  notification.Kind = class Kind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (notification.Kind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = notification.Kind.prototype;
  dart.addTypeTests(notification.Kind);
  dart.addTypeCaches(notification.Kind);
  dart.setMethodSignature(notification.Kind, () => ({
    __proto__: dart.getMethods(notification.Kind.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(notification.Kind, I[12]);
  dart.setFieldSignature(notification.Kind, () => ({
    __proto__: dart.getFields(notification.Kind.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(notification.Kind, ['toString']);
  notification.Kind.OnData = C[7] || CT.C7;
  notification.Kind.OnDone = C[1] || CT.C1;
  notification.Kind.OnError = C[8] || CT.C8;
  notification.Kind.values = C[9] || CT.C9;
  var _outputSink$0 = dart.privateName(materialize, "_outputSink");
  const _is__MaterializeStreamSink_default = Symbol('_is__MaterializeStreamSink_default');
  materialize._MaterializeStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var NotificationOfSL = () => (NotificationOfSL = dart.constFn(notification.Notification$(SL())))();
    class _MaterializeStreamSink extends core.Object {
      add(data) {
        SL().as(data);
        this[_outputSink$0].add(NotificationOfSL().onData(data));
      }
      addError(e, st = null) {
        return this[_outputSink$0].add(NotificationOfSL().onError(e, st));
      }
      close() {
        this[_outputSink$0].add(NotificationOfSL().onDone());
        this[_outputSink$0].close();
      }
    }
    (_MaterializeStreamSink.new = function(_outputSink) {
      this[_outputSink$0] = _outputSink;
      ;
    }).prototype = _MaterializeStreamSink.prototype;
    dart.addTypeTests(_MaterializeStreamSink);
    _MaterializeStreamSink.prototype[_is__MaterializeStreamSink_default] = true;
    dart.addTypeCaches(_MaterializeStreamSink);
    _MaterializeStreamSink[dart.implements] = () => [async.EventSink$(dart.legacy(S))];
    dart.setMethodSignature(_MaterializeStreamSink, () => ({
      __proto__: dart.getMethods(_MaterializeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MaterializeStreamSink, I[23]);
    dart.setFieldSignature(_MaterializeStreamSink, () => ({
      __proto__: dart.getFields(_MaterializeStreamSink.__proto__),
      [_outputSink$0]: dart.finalFieldType(dart.legacy(async.EventSink$(dart.legacy(notification.Notification$(dart.legacy(S))))))
    }));
    return _MaterializeStreamSink;
  });
  materialize._MaterializeStreamSink = materialize._MaterializeStreamSink$();
  dart.addTypeTests(materialize._MaterializeStreamSink, _is__MaterializeStreamSink_default);
  const _is_MaterializeStreamTransformer_default = Symbol('_is_MaterializeStreamTransformer_default');
  materialize.MaterializeStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var NotificationOfSL = () => (NotificationOfSL = dart.constFn(notification.Notification$(SL())))();
    var NotificationLOfSL = () => (NotificationLOfSL = dart.constFn(dart.legacy(NotificationOfSL())))();
    var StreamOfNotificationLOfSL = () => (StreamOfNotificationLOfSL = dart.constFn(async.Stream$(NotificationLOfSL())))();
    var _MaterializeStreamSinkOfSL = () => (_MaterializeStreamSinkOfSL = dart.constFn(materialize._MaterializeStreamSink$(SL())))();
    var _MaterializeStreamSinkLOfSL = () => (_MaterializeStreamSinkLOfSL = dart.constFn(dart.legacy(_MaterializeStreamSinkOfSL())))();
    var EventSinkOfNotificationLOfSL = () => (EventSinkOfNotificationLOfSL = dart.constFn(async.EventSink$(NotificationLOfSL())))();
    var EventSinkLOfNotificationLOfSL = () => (EventSinkLOfNotificationLOfSL = dart.constFn(dart.legacy(EventSinkOfNotificationLOfSL())))();
    var EventSinkLOfNotificationLOfSLTo_MaterializeStreamSinkLOfSL = () => (EventSinkLOfNotificationLOfSLTo_MaterializeStreamSinkLOfSL = dart.constFn(dart.fnType(_MaterializeStreamSinkLOfSL(), [EventSinkLOfNotificationLOfSL()])))();
    class MaterializeStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(notification.Notification$(dart.legacy(S)))) {
      bind(stream) {
        StreamLOfSL().as(stream);
        return StreamOfNotificationLOfSL().eventTransformed(stream, dart.fn(sink => new (_MaterializeStreamSinkOfSL()).new(sink), EventSinkLOfNotificationLOfSLTo_MaterializeStreamSinkLOfSL()));
      }
    }
    (MaterializeStreamTransformer.new = function() {
      MaterializeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = MaterializeStreamTransformer.prototype;
    dart.addTypeTests(MaterializeStreamTransformer);
    MaterializeStreamTransformer.prototype[_is_MaterializeStreamTransformer_default] = true;
    dart.addTypeCaches(MaterializeStreamTransformer);
    dart.setMethodSignature(MaterializeStreamTransformer, () => ({
      __proto__: dart.getMethods(MaterializeStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(notification.Notification$(dart.legacy(S))))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(MaterializeStreamTransformer, I[23]);
    return MaterializeStreamTransformer;
  });
  materialize.MaterializeStreamTransformer = materialize.MaterializeStreamTransformer$();
  dart.addTypeTests(materialize.MaterializeStreamTransformer, _is_MaterializeStreamTransformer_default);
  materialize['MaterializeExtension|materialize'] = function MaterializeExtension$124materialize(T, $this) {
    return $this.transform(dart.legacy(notification.Notification$(dart.legacy(T))), new (materialize.MaterializeStreamTransformer$(dart.legacy(T))).new());
  };
  materialize['MaterializeExtension|get#materialize'] = function MaterializeExtension$124get$35materialize(T, $this) {
    return dart.fn(() => materialize['MaterializeExtension|materialize'](dart.legacy(T), $this), dart.fnType(dart.legacy(async.Stream$(dart.legacy(notification.Notification$(dart.legacy(T))))), []));
  };
  var _controller = dart.privateName(sequence_equal, "_controller");
  const _is_SequenceEqualStream_default = Symbol('_is_SequenceEqualStream_default');
  sequence_equal.SequenceEqualStream$ = dart.generic((S, T) => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class SequenceEqualStream extends async.Stream$(dart.legacy(core.bool)) {
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      static _buildController(S, T, stream, other, equals) {
        let t105;
        if (stream == null) {
          dart.throw(new core.ArgumentError.notNull("stream"));
        }
        if (other == null) {
          dart.throw(new core.ArgumentError.notNull("other"));
        }
        let doCompare = (t105 = equals, t105 == null ? dart.fn((s, t) => dart.equals(s, t), dart.fnType(T$.boolL(), [dart.legacy(S), dart.legacy(T)])) : t105);
        let controller = null;
        let subscription = null;
        controller = T$.StreamControllerOfboolL().new({sync: true, onListen: dart.fn(() => {
            let emitAndClose = dart.fn((value = true) => {
              let t105;
              t105 = controller;
              return (() => {
                t105.add(value);
                t105.close();
                return t105;
              })();
            }, T$.boolLToStreamControllerLOfboolL());
            subscription = zip.ZipStream.zip2(dart.legacy(notification.Notification$(dart.legacy(S))), dart.legacy(notification.Notification$(dart.legacy(T))), T$.boolL(), stream.transform(dart.legacy(notification.Notification$(dart.legacy(S))), new (materialize.MaterializeStreamTransformer$(dart.legacy(S))).new()), other.transform(dart.legacy(notification.Notification$(dart.legacy(T))), new (materialize.MaterializeStreamTransformer$(dart.legacy(T))).new()), dart.fn((s, t) => {
              let t105, t105$, t105$0, t105$1;
              return s.kind == t.kind && (t105$ = (t105 = s.errorAndStackTrace, t105 == null ? null : t105.error), t105$ == null ? null : dart.toString(t105$)) == (t105$1 = (t105$0 = t.errorAndStackTrace, t105$0 == null ? null : t105$0.error), t105$1 == null ? null : dart.toString(t105$1)) && dart.test(doCompare(s.value, t.value));
            }, dart.fnType(T$.boolL(), [dart.legacy(notification.Notification$(dart.legacy(S))), dart.legacy(notification.Notification$(dart.legacy(T)))]))).where(dart.fn(isEqual => !dart.test(isEqual), T$.boolLToboolL())).listen(emitAndClose, {onError: dart.bind(controller, 'addError'), onDone: emitAndClose});
          }, T$.VoidToNull()), onPause: dart.fn(() => subscription.pause(), T$.VoidTovoid()), onResume: dart.fn(() => subscription.resume(), T$.VoidTovoid()), onCancel: dart.fn(() => subscription.cancel(), T$.VoidToFutureLOfvoid())});
        return controller;
      }
    }
    (SequenceEqualStream.new = function(stream, other, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      this[_controller] = sequence_equal.SequenceEqualStream._buildController(SL(), TL(), stream, other, equals);
      SequenceEqualStream.__proto__.new.call(this);
      ;
    }).prototype = SequenceEqualStream.prototype;
    dart.addTypeTests(SequenceEqualStream);
    SequenceEqualStream.prototype[_is_SequenceEqualStream_default] = true;
    dart.addTypeCaches(SequenceEqualStream);
    dart.setMethodSignature(SequenceEqualStream, () => ({
      __proto__: dart.getMethods(SequenceEqualStream.__proto__),
      listen: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(core.bool))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {})
    }));
    dart.setLibraryUri(SequenceEqualStream, I[24]);
    dart.setFieldSignature(SequenceEqualStream, () => ({
      __proto__: dart.getFields(SequenceEqualStream.__proto__),
      [_controller]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(core.bool))))
    }));
    return SequenceEqualStream;
  });
  sequence_equal.SequenceEqualStream = sequence_equal.SequenceEqualStream$();
  dart.addTypeTests(sequence_equal.SequenceEqualStream, _is_SequenceEqualStream_default);
  var _queue$ = dart.privateName(replay_subject, "_queue");
  var _maxSize$ = dart.privateName(replay_subject, "_maxSize");
  const _is_ReplaySubject_default = Symbol('_is_ReplaySubject_default');
  replay_subject.ReplaySubject$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _EventOfTL = () => (_EventOfTL = dart.constFn(replay_subject._Event$(TL())))();
    var _EventLOfTL = () => (_EventLOfTL = dart.constFn(dart.legacy(_EventOfTL())))();
    var _EventLOfTLToboolL = () => (_EventLOfTLToboolL = dart.constFn(dart.fnType(T$.boolL(), [_EventLOfTL()])))();
    var _EventLOfTLToTL = () => (_EventLOfTLToTL = dart.constFn(dart.fnType(TL(), [_EventLOfTL()])))();
    var _EventLOfTLToErrorAndStackTraceL = () => (_EventLOfTLToErrorAndStackTraceL = dart.constFn(dart.fnType(T$.ErrorAndStackTraceL(), [_EventLOfTL()])))();
    class ReplaySubject extends subject.Subject$(dart.legacy(T)) {
      static new(opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(dart.legacy(T)).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let queue = new (collection.ListQueue$(dart.legacy(replay_subject._Event$(dart.legacy(T))))).new();
        return new (replay_subject.ReplaySubject$(dart.legacy(T))).__(controller, rx.Rx.defer(dart.legacy(T), dart.fn(() => queue[$toList]({growable: false})[$reversed][$fold](dart.legacy(async.Stream$(dart.legacy(T))), controller.stream, dart.fn((stream, event) => {
          if (dart.test(event.isError)) {
            let errorAndStackTrace = event.errorAndStackTrace;
            return stream.transform(dart.legacy(T), new (start_with_error.StartWithErrorStreamTransformer$(dart.legacy(T))).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          } else {
            return stream.transform(dart.legacy(T), new (start_with.StartWithStreamTransformer$(dart.legacy(T))).new(event.data));
          }
        }, dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(replay_subject._Event$(dart.legacy(T)))]))), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [])), {reusable: true}), queue, maxSize);
      }
      onAdd(event) {
        TL().as(event);
        if (this[_queue$][$length] == this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(_EventOfTL().data(event));
      }
      onAddError(error, stackTrace = null) {
        if (this[_queue$][$length] == this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(_EventOfTL().error(new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace)));
      }
      get values() {
        return this[_queue$][$where](dart.fn(event => !dart.test(event.isError), _EventLOfTLToboolL()))[$map](TL(), dart.fn(event => event.data, _EventLOfTLToTL()))[$toList]({growable: false});
      }
      get errorAndStackTraces() {
        return this[_queue$][$where](dart.fn(event => event.isError, _EventLOfTLToboolL()))[$map](T$.ErrorAndStackTraceL(), dart.fn(event => event.errorAndStackTrace, _EventLOfTLToErrorAndStackTraceL()))[$toList]({growable: false});
      }
      createForwardingSubject(R, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return replay_subject.ReplaySubject$(dart.legacy(R)).new({maxSize: this[_maxSize$], onCancel: onCancel, onListen: onListen, sync: sync});
      }
    }
    (ReplaySubject.__ = function(controller, stream, _queue, _maxSize) {
      this[_queue$] = _queue;
      this[_maxSize$] = _maxSize;
      ReplaySubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = ReplaySubject.prototype;
    dart.addTypeTests(ReplaySubject);
    ReplaySubject.prototype[_is_ReplaySubject_default] = true;
    dart.addTypeCaches(ReplaySubject);
    ReplaySubject[dart.implements] = () => [replay_stream.ReplayStream$(dart.legacy(T))];
    dart.setMethodSignature(ReplaySubject, () => ({
      __proto__: dart.getMethods(ReplaySubject.__proto__),
      createForwardingSubject: dart.gFnType(R => [dart.legacy(replay_subject.ReplaySubject$(dart.legacy(R))), [], {onCancel: dart.legacy(dart.fnType(dart.void, [])), onListen: dart.legacy(dart.fnType(dart.void, [])), sync: dart.legacy(core.bool)}, {}])
    }));
    dart.setGetterSignature(ReplaySubject, () => ({
      __proto__: dart.getGetters(ReplaySubject.__proto__),
      values: dart.legacy(core.List$(dart.legacy(T))),
      errorAndStackTraces: dart.legacy(core.List$(dart.legacy(error_and_stacktrace.ErrorAndStackTrace)))
    }));
    dart.setLibraryUri(ReplaySubject, I[25]);
    dart.setFieldSignature(ReplaySubject, () => ({
      __proto__: dart.getFields(ReplaySubject.__proto__),
      [_queue$]: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(replay_subject._Event$(dart.legacy(T)))))),
      [_maxSize$]: dart.finalFieldType(dart.legacy(core.int))
    }));
    return ReplaySubject;
  });
  replay_subject.ReplaySubject = replay_subject.ReplaySubject$();
  dart.addTypeTests(replay_subject.ReplaySubject, _is_ReplaySubject_default);
  const _is__Event_default = Symbol('_is__Event_default');
  replay_subject._Event$ = dart.generic(T => {
    class _Event extends core.Object {
      static data(data) {
        return new (replay_subject._Event$(dart.legacy(T))).__({isError: false, data: data});
      }
      static error(e) {
        return new (replay_subject._Event$(dart.legacy(T))).__({isError: true, errorAndStackTrace: e});
      }
    }
    (_Event.__ = function(opts) {
      let isError = opts && 'isError' in opts ? opts.isError : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let errorAndStackTrace = opts && 'errorAndStackTrace' in opts ? opts.errorAndStackTrace : null;
      this.isError = isError;
      this.data = data;
      this.errorAndStackTrace = errorAndStackTrace;
      ;
    }).prototype = _Event.prototype;
    dart.addTypeTests(_Event);
    _Event.prototype[_is__Event_default] = true;
    dart.addTypeCaches(_Event);
    dart.setLibraryUri(_Event, I[25]);
    dart.setFieldSignature(_Event, () => ({
      __proto__: dart.getFields(_Event.__proto__),
      isError: dart.finalFieldType(dart.legacy(core.bool)),
      data: dart.finalFieldType(dart.legacy(T)),
      errorAndStackTrace: dart.finalFieldType(dart.legacy(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Event;
  });
  replay_subject._Event = replay_subject._Event$();
  dart.addTypeTests(replay_subject._Event, _is__Event_default);
  var _isFirstEventAdded$ = dart.privateName(start_with_error, "_isFirstEventAdded");
  var _e$ = dart.privateName(start_with_error, "_e");
  var _st$ = dart.privateName(start_with_error, "_st");
  var _safeAddFirstEvent$ = dart.privateName(start_with_error, "_safeAddFirstEvent");
  const _is__StartWithErrorStreamSink_default = Symbol('_is__StartWithErrorStreamSink_default');
  start_with_error._StartWithErrorStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _StartWithErrorStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        this[_safeAddFirstEvent$](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent$](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent$](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkLOfSL().as(sink);
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent$](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkLOfSL().as(sink);
      }
      onResume(sink) {
        EventSinkLOfSL().as(sink);
      }
      [_safeAddFirstEvent$](sink) {
        if (dart.test(this[_isFirstEventAdded$])) return;
        sink.addError(this[_e$], this[_st$]);
        this[_isFirstEventAdded$] = true;
      }
    }
    (_StartWithErrorStreamSink.new = function(_e, _st) {
      this[_isFirstEventAdded$] = false;
      this[_e$] = _e;
      this[_st$] = _st;
      ;
    }).prototype = _StartWithErrorStreamSink.prototype;
    dart.addTypeTests(_StartWithErrorStreamSink);
    _StartWithErrorStreamSink.prototype[_is__StartWithErrorStreamSink_default] = true;
    dart.addTypeCaches(_StartWithErrorStreamSink);
    _StartWithErrorStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithErrorStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_safeAddFirstEvent$]: dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(S)))])
    }));
    dart.setLibraryUri(_StartWithErrorStreamSink, I[26]);
    dart.setFieldSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getFields(_StartWithErrorStreamSink.__proto__),
      [_e$]: dart.finalFieldType(dart.legacy(core.Object)),
      [_st$]: dart.finalFieldType(dart.legacy(core.StackTrace)),
      [_isFirstEventAdded$]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _StartWithErrorStreamSink;
  });
  start_with_error._StartWithErrorStreamSink = start_with_error._StartWithErrorStreamSink$();
  dart.addTypeTests(start_with_error._StartWithErrorStreamSink, _is__StartWithErrorStreamSink_default);
  var error$ = dart.privateName(start_with_error, "StartWithErrorStreamTransformer.error");
  var stackTrace$ = dart.privateName(start_with_error, "StartWithErrorStreamTransformer.stackTrace");
  const _is_StartWithErrorStreamTransformer_default = Symbol('_is_StartWithErrorStreamTransformer_default');
  start_with_error.StartWithErrorStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _StartWithErrorStreamSinkOfSL = () => (_StartWithErrorStreamSinkOfSL = dart.constFn(start_with_error._StartWithErrorStreamSink$(SL())))();
    class StartWithErrorStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get error() {
        return this[error$];
      }
      set error(value) {
        super.error = value;
      }
      get stackTrace() {
        return this[stackTrace$];
      }
      set stackTrace(value) {
        super.stackTrace = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_StartWithErrorStreamSinkOfSL()).new(this.error, this.stackTrace));
      }
    }
    (StartWithErrorStreamTransformer.new = function(error, stackTrace = null) {
      this[error$] = error;
      this[stackTrace$] = stackTrace;
      StartWithErrorStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithErrorStreamTransformer.prototype;
    dart.addTypeTests(StartWithErrorStreamTransformer);
    StartWithErrorStreamTransformer.prototype[_is_StartWithErrorStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithErrorStreamTransformer);
    dart.setMethodSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithErrorStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(StartWithErrorStreamTransformer, I[26]);
    dart.setFieldSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithErrorStreamTransformer.__proto__),
      error: dart.finalFieldType(dart.legacy(core.Object)),
      stackTrace: dart.finalFieldType(dart.legacy(core.StackTrace))
    }));
    return StartWithErrorStreamTransformer;
  });
  start_with_error.StartWithErrorStreamTransformer = start_with_error.StartWithErrorStreamTransformer$();
  dart.addTypeTests(start_with_error.StartWithErrorStreamTransformer, _is_StartWithErrorStreamTransformer_default);
  forwarding_stream.forwardStream = function forwardStream(T, R, stream, connectedSink) {
    core.ArgumentError.checkNotNull(dart.legacy(async.Stream$(dart.legacy(T))), stream, "stream");
    core.ArgumentError.checkNotNull(dart.legacy(forwarding_sink.ForwardingSink$(dart.legacy(T), dart.legacy(R))), connectedSink, "connectedSink");
    let controller = null;
    let subscription = null;
    function runCatching(block) {
      try {
        block();
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        connectedSink.addError(controller, e, s);
      }
    }
    dart.fn(runCatching, T$.FnTovoid());
    let onListen = dart.fn(() => {
      runCatching(dart.fn(() => connectedSink.onListen(controller), T$.VoidTovoid()));
      subscription = stream.listen(dart.fn(data => runCatching(dart.fn(() => connectedSink.add(controller, data), T$.VoidTovoid())), dart.fnType(dart.void, [dart.legacy(T)])), {onError: dart.fn((e, st) => runCatching(dart.fn(() => connectedSink.addError(controller, e, st), T$.VoidTovoid())), T$.dynamicAndStackTraceLTovoid()), onDone: dart.fn(() => runCatching(dart.fn(() => connectedSink.close(controller), T$.VoidTovoid())), T$.VoidTovoid())});
    }, T$.VoidToNull());
    let onCancel = dart.fn(() => {
      let onCancelSelfFuture = subscription.cancel();
      let onCancelConnectedFuture = connectedSink.onCancel(controller);
      let futures = (() => {
        let t106 = T$.JSArrayOfFutureL().of([]);
        if (T$.FutureL().is(onCancelSelfFuture)) t106[$add](onCancelSelfFuture);
        if (T$.FutureL().is(onCancelConnectedFuture)) t106[$add](onCancelConnectedFuture);
        return t106;
      })();
      return async.Future.wait(dart.dynamic, futures);
    }, T$.VoidToFutureLOfListL());
    let onPause = dart.fn(() => {
      subscription.pause();
      runCatching(dart.fn(() => connectedSink.onPause(controller), T$.VoidTovoid()));
    }, T$.VoidToNull());
    let onResume = dart.fn(() => {
      subscription.resume();
      runCatching(dart.fn(() => connectedSink.onResume(controller), T$.VoidTovoid()));
    }, T$.VoidToNull());
    if (dart.legacy(subject.Subject$(dart.legacy(T))).is(stream)) {
      controller = stream.createForwardingSubject(dart.legacy(R), {onListen: onListen, onCancel: onCancel, sync: true});
    } else if (dart.test(stream.isBroadcast)) {
      controller = async.StreamController$(dart.legacy(R)).broadcast({onListen: onListen, onCancel: onCancel, sync: true});
    } else {
      controller = async.StreamController$(dart.legacy(R)).new({onListen: onListen, onPause: onPause, onResume: onResume, onCancel: onCancel, sync: true});
    }
    return controller.stream;
  };
  var _isFirstEventAdded$0 = dart.privateName(start_with, "_isFirstEventAdded");
  var _startValue$ = dart.privateName(start_with, "_startValue");
  var _safeAddFirstEvent$0 = dart.privateName(start_with, "_safeAddFirstEvent");
  const _is__StartWithStreamSink_default = Symbol('_is__StartWithStreamSink_default');
  start_with._StartWithStreamSink$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var EventSinkOfSL = () => (EventSinkOfSL = dart.constFn(async.EventSink$(SL())))();
    var EventSinkLOfSL = () => (EventSinkLOfSL = dart.constFn(dart.legacy(EventSinkOfSL())))();
    class _StartWithStreamSink extends core.Object {
      add(sink, data) {
        EventSinkLOfSL().as(sink);
        SL().as(data);
        this[_safeAddFirstEvent$0](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent$0](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkLOfSL().as(sink);
        this[_safeAddFirstEvent$0](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkLOfSL().as(sink);
      }
      onListen(sink) {
        EventSinkLOfSL().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent$0](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkLOfSL().as(sink);
      }
      onResume(sink) {
        EventSinkLOfSL().as(sink);
      }
      [_safeAddFirstEvent$0](sink) {
        if (!dart.test(this[_isFirstEventAdded$0])) {
          sink.add(this[_startValue$]);
          this[_isFirstEventAdded$0] = true;
        }
      }
    }
    (_StartWithStreamSink.new = function(_startValue) {
      this[_isFirstEventAdded$0] = false;
      this[_startValue$] = _startValue;
      ;
    }).prototype = _StartWithStreamSink.prototype;
    dart.addTypeTests(_StartWithStreamSink);
    _StartWithStreamSink.prototype[_is__StartWithStreamSink_default] = true;
    dart.addTypeCaches(_StartWithStreamSink);
    _StartWithStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(dart.legacy(S), dart.legacy(S))];
    dart.setMethodSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addError: dart.fnType(dart.void, [dart.legacy(core.Object), dart.dynamic], [dart.legacy(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.legacy(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_safeAddFirstEvent$0]: dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(S)))])
    }));
    dart.setLibraryUri(_StartWithStreamSink, I[27]);
    dart.setFieldSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getFields(_StartWithStreamSink.__proto__),
      [_startValue$]: dart.finalFieldType(dart.legacy(S)),
      [_isFirstEventAdded$0]: dart.fieldType(dart.legacy(core.bool))
    }));
    return _StartWithStreamSink;
  });
  start_with._StartWithStreamSink = start_with._StartWithStreamSink$();
  dart.addTypeTests(start_with._StartWithStreamSink, _is__StartWithStreamSink_default);
  var startValue$ = dart.privateName(start_with, "StartWithStreamTransformer.startValue");
  const _is_StartWithStreamTransformer_default = Symbol('_is_StartWithStreamTransformer_default');
  start_with.StartWithStreamTransformer$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var StreamOfSL = () => (StreamOfSL = dart.constFn(async.Stream$(SL())))();
    var StreamLOfSL = () => (StreamLOfSL = dart.constFn(dart.legacy(StreamOfSL())))();
    var _StartWithStreamSinkOfSL = () => (_StartWithStreamSinkOfSL = dart.constFn(start_with._StartWithStreamSink$(SL())))();
    class StartWithStreamTransformer extends async.StreamTransformerBase$(dart.legacy(S), dart.legacy(S)) {
      get startValue() {
        return this[startValue$];
      }
      set startValue(value) {
        super.startValue = value;
      }
      bind(stream) {
        StreamLOfSL().as(stream);
        return forwarding_stream.forwardStream(SL(), SL(), stream, new (_StartWithStreamSinkOfSL()).new(this.startValue));
      }
    }
    (StartWithStreamTransformer.new = function(startValue) {
      this[startValue$] = startValue;
      StartWithStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithStreamTransformer.prototype;
    dart.addTypeTests(StartWithStreamTransformer);
    StartWithStreamTransformer.prototype[_is_StartWithStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithStreamTransformer);
    dart.setMethodSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithStreamTransformer.__proto__),
      bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(StartWithStreamTransformer, I[27]);
    dart.setFieldSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithStreamTransformer.__proto__),
      startValue: dart.finalFieldType(dart.legacy(S))
    }));
    return StartWithStreamTransformer;
  });
  start_with.StartWithStreamTransformer = start_with.StartWithStreamTransformer$();
  dart.addTypeTests(start_with.StartWithStreamTransformer, _is_StartWithStreamTransformer_default);
  start_with['StartWithExtension|startWith'] = function StartWithExtension$124startWith(T, $this, startValue) {
    return $this.transform(dart.legacy(T), new (start_with.StartWithStreamTransformer$(dart.legacy(T))).new(startValue));
  };
  start_with['StartWithExtension|get#startWith'] = function StartWithExtension$124get$35startWith(T, $this) {
    return dart.fn(startValue => start_with['StartWithExtension|startWith'](dart.legacy(T), $this, startValue), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(T)]));
  };
  var _stream$ = dart.privateName(behavior_subject, "_stream");
  var _wrapper$ = dart.privateName(behavior_subject, "_wrapper");
  var _forwardBehaviorSubject = dart.privateName(behavior_subject, "_forwardBehaviorSubject");
  const _is_BehaviorSubject_default = Symbol('_is_BehaviorSubject_default');
  behavior_subject.BehaviorSubject$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var StreamLOfTLToStreamLOfTL = () => (StreamLOfTLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [StreamLOfTL()])))();
    class BehaviorSubject extends subject.Subject$(dart.legacy(T)) {
      static new(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(dart.legacy(T)).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(dart.legacy(T))).new();
        return new (behavior_subject.BehaviorSubject$(dart.legacy(T))).__(controller, rx.Rx.defer(dart.legacy(T), behavior_subject.BehaviorSubject._deferStream(dart.legacy(T), wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static seeded(seedValue, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(dart.legacy(T)).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(dart.legacy(T))).seeded(seedValue);
        return new (behavior_subject.BehaviorSubject$(dart.legacy(T))).__(controller, rx.Rx.defer(dart.legacy(T), behavior_subject.BehaviorSubject._deferStream(dart.legacy(T), wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static _deferStream(T, wrapper, controller, sync) {
        return dart.fn(() => {
          if (dart.test(wrapper.latestIsError)) {
            let errorAndStackTrace = wrapper.latestErrorAndStackTrace;
            return controller.stream.transform(dart.legacy(T), new (start_with_error.StartWithErrorStreamTransformer$(dart.legacy(T))).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          } else if (dart.test(wrapper.latestIsValue)) {
            return controller.stream.transform(dart.legacy(T), new (start_with.StartWithStreamTransformer$(dart.legacy(T))).new(wrapper.latestValue));
          }
          return controller.stream;
        }, dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), []));
      }
      onAdd(event) {
        TL().as(event);
        return this[_wrapper$].setValue(event);
      }
      onAddError(error, stackTrace = null) {
        return this[_wrapper$].setError(error, stackTrace);
      }
      get stream() {
        return this;
      }
      get hasValue() {
        return this[_wrapper$].latestIsValue;
      }
      get value() {
        return this[_wrapper$].latestValue;
      }
      set value(newValue) {
        TL().as(newValue);
        return this.add(newValue);
      }
      get hasError() {
        return this[_wrapper$].latestIsError;
      }
      get errorAndStackTrace() {
        return this[_wrapper$].latestErrorAndStackTrace;
      }
      createForwardingSubject(R, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return behavior_subject.BehaviorSubject$(dart.legacy(R)).new({onListen: onListen, onCancel: onCancel, sync: sync});
      }
      where(test) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.where(test), StreamLOfTLToStreamLOfTL()));
      }
      map(S, convert) {
        return this[_forwardBehaviorSubject](dart.legacy(S), dart.fn(s => s.map(dart.legacy(S), convert), dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [StreamLOfTL()])));
      }
      asyncMap(E, convert) {
        return this[_forwardBehaviorSubject](dart.legacy(E), dart.fn(s => s.asyncMap(dart.legacy(E), convert), dart.fnType(dart.legacy(async.Stream$(dart.legacy(E))), [StreamLOfTL()])));
      }
      asyncExpand(E, convert) {
        return this[_forwardBehaviorSubject](dart.legacy(E), dart.fn(s => s.asyncExpand(dart.legacy(E), convert), dart.fnType(dart.legacy(async.Stream$(dart.legacy(E))), [StreamLOfTL()])));
      }
      handleError(onError, opts) {
        let test = opts && 'test' in opts ? opts.test : null;
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.handleError(onError, {test: test}), StreamLOfTLToStreamLOfTL()));
      }
      expand(S, convert) {
        return this[_forwardBehaviorSubject](dart.legacy(S), dart.fn(s => s.expand(dart.legacy(S), convert), dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [StreamLOfTL()])));
      }
      transform(S, streamTransformer) {
        dart.legacy(async.StreamTransformer$(TL(), dart.legacy(S))).as(streamTransformer);
        return this[_forwardBehaviorSubject](dart.legacy(S), dart.fn(s => s.transform(dart.legacy(S), streamTransformer), dart.fnType(dart.legacy(async.Stream$(dart.legacy(S))), [StreamLOfTL()])));
      }
      cast(R) {
        return this[_forwardBehaviorSubject](dart.legacy(R), dart.fn(s => s.cast(dart.legacy(R)), dart.fnType(dart.legacy(async.Stream$(dart.legacy(R))), [StreamLOfTL()])));
      }
      take(count) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.take(count), StreamLOfTLToStreamLOfTL()));
      }
      takeWhile(test) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.takeWhile(test), StreamLOfTLToStreamLOfTL()));
      }
      skip(count) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.skip(count), StreamLOfTLToStreamLOfTL()));
      }
      skipWhile(test) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.skipWhile(test), StreamLOfTLToStreamLOfTL()));
      }
      distinct(equals = null) {
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.distinct(equals), StreamLOfTLToStreamLOfTL()));
      }
      timeout(timeLimit, opts) {
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        return this[_forwardBehaviorSubject](TL(), dart.fn(s => s.timeout(timeLimit, {onTimeout: onTimeout}), StreamLOfTLToStreamLOfTL()));
      }
      [_forwardBehaviorSubject](R, transformerStream) {
        core.ArgumentError.checkNotNull(dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(R))), [StreamLOfTL()])), transformerStream, "transformerStream");
        let subject = null;
        let subscription = null;
        let onListen = dart.fn(() => subscription = transformerStream(this[_stream$]).listen(dart.bind(subject, 'add'), {onError: dart.bind(subject, 'addError'), onDone: dart.bind(subject, 'close')}), dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(R))), []));
        let onCancel = dart.fn(() => subscription.cancel(), T$.VoidToFutureLOfvoid());
        return subject = this.createForwardingSubject(dart.legacy(R), {onListen: onListen, onCancel: onCancel, sync: true});
      }
    }
    (BehaviorSubject.__ = function(controller, _stream, _wrapper) {
      this[_stream$] = _stream;
      this[_wrapper$] = _wrapper;
      BehaviorSubject.__proto__.new.call(this, controller, _stream);
      ;
    }).prototype = BehaviorSubject.prototype;
    dart.addTypeTests(BehaviorSubject);
    BehaviorSubject.prototype[_is_BehaviorSubject_default] = true;
    dart.addTypeCaches(BehaviorSubject);
    BehaviorSubject[dart.implements] = () => [value_stream.ValueStream$(dart.legacy(T))];
    dart.setMethodSignature(BehaviorSubject, () => ({
      __proto__: dart.getMethods(BehaviorSubject.__proto__),
      createForwardingSubject: dart.gFnType(R => [dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(R))), [], {onCancel: dart.legacy(dart.fnType(dart.void, [])), onListen: dart.legacy(dart.fnType(dart.void, [])), sync: dart.legacy(core.bool)}, {}]),
      where: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      map: dart.gFnType(S => [dart.legacy(value_stream.ValueStream$(dart.legacy(S))), [dart.legacy(dart.fnType(dart.legacy(S), [dart.legacy(T)]))]]),
      asyncMap: dart.gFnType(E => [dart.legacy(value_stream.ValueStream$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(E))), [dart.legacy(T)]))]]),
      asyncExpand: dart.gFnType(E => [dart.legacy(value_stream.ValueStream$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(E))), [dart.legacy(T)]))]]),
      handleError: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(core.Function)], {test: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]))}, {}),
      expand: dart.gFnType(S => [dart.legacy(value_stream.ValueStream$(dart.legacy(S))), [dart.legacy(dart.fnType(dart.legacy(core.Iterable$(dart.legacy(S))), [dart.legacy(T)]))]]),
      transform: dart.gFnType(S => [dart.legacy(value_stream.ValueStream$(dart.legacy(S))), [dart.legacy(core.Object)]]),
      cast: dart.gFnType(R => [dart.legacy(value_stream.ValueStream$(dart.legacy(R))), []]),
      take: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(core.int)]),
      takeWhile: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      skip: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(core.int)]),
      skipWhile: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      distinct: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [], [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))]),
      timeout: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(core.Duration)], {onTimeout: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(T)))]))}, {}),
      [_forwardBehaviorSubject]: dart.gFnType(R => [dart.legacy(value_stream.ValueStream$(dart.legacy(R))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(R))), [dart.legacy(async.Stream$(dart.legacy(T)))]))]])
    }));
    dart.setGetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getGetters(BehaviorSubject.__proto__),
      stream: dart.legacy(value_stream.ValueStream$(dart.legacy(T))),
      hasValue: dart.legacy(core.bool),
      value: dart.legacy(T),
      hasError: dart.legacy(core.bool),
      errorAndStackTrace: dart.legacy(error_and_stacktrace.ErrorAndStackTrace)
    }));
    dart.setSetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getSetters(BehaviorSubject.__proto__),
      value: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(BehaviorSubject, I[28]);
    dart.setFieldSignature(BehaviorSubject, () => ({
      __proto__: dart.getFields(BehaviorSubject.__proto__),
      [_wrapper$]: dart.finalFieldType(dart.legacy(behavior_subject._Wrapper$(dart.legacy(T)))),
      [_stream$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T))))
    }));
    return BehaviorSubject;
  });
  behavior_subject.BehaviorSubject = behavior_subject.BehaviorSubject$();
  dart.addTypeTests(behavior_subject.BehaviorSubject, _is_BehaviorSubject_default);
  var latestValue$ = dart.privateName(behavior_subject, "_Wrapper.latestValue");
  const _is__Wrapper_default = Symbol('_is__Wrapper_default');
  behavior_subject._Wrapper$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _Wrapper extends core.Object {
      get latestValue() {
        return this[latestValue$];
      }
      set latestValue(value) {
        this[latestValue$] = TL().as(value);
      }
      setValue(event) {
        TL().as(event);
        this.latestIsValue = true;
        this.latestIsError = false;
        this.latestValue = event;
        this.latestErrorAndStackTrace = null;
      }
      setError(error, stackTrace = null) {
        this.latestIsValue = false;
        this.latestIsError = true;
        this.latestValue = null;
        this.latestErrorAndStackTrace = new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace);
      }
    }
    (_Wrapper.new = function() {
      this.latestErrorAndStackTrace = null;
      this.latestIsValue = false;
      this.latestIsError = false;
      this[latestValue$] = null;
      ;
    }).prototype = _Wrapper.prototype;
    (_Wrapper.seeded = function(latestValue) {
      this.latestErrorAndStackTrace = null;
      this.latestIsValue = false;
      this.latestIsError = false;
      this[latestValue$] = latestValue;
      this.latestIsValue = true;
      ;
    }).prototype = _Wrapper.prototype;
    dart.addTypeTests(_Wrapper);
    _Wrapper.prototype[_is__Wrapper_default] = true;
    dart.addTypeCaches(_Wrapper);
    dart.setMethodSignature(_Wrapper, () => ({
      __proto__: dart.getMethods(_Wrapper.__proto__),
      setValue: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      setError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)])
    }));
    dart.setLibraryUri(_Wrapper, I[28]);
    dart.setFieldSignature(_Wrapper, () => ({
      __proto__: dart.getFields(_Wrapper.__proto__),
      latestValue: dart.fieldType(dart.legacy(T)),
      latestErrorAndStackTrace: dart.fieldType(dart.legacy(error_and_stacktrace.ErrorAndStackTrace)),
      latestIsValue: dart.fieldType(dart.legacy(core.bool)),
      latestIsError: dart.fieldType(dart.legacy(core.bool))
    }));
    return _Wrapper;
  });
  behavior_subject._Wrapper = behavior_subject._Wrapper$();
  dart.addTypeTests(behavior_subject._Wrapper, _is__Wrapper_default);
  const _is_ConnectableStream_default = Symbol('_is_ConnectableStream_default');
  connectable_stream.ConnectableStream$ = dart.generic(T => {
    class ConnectableStream extends async.StreamView$(dart.legacy(T)) {}
    (ConnectableStream.new = function(stream) {
      ConnectableStream.__proto__.new.call(this, stream);
      ;
    }).prototype = ConnectableStream.prototype;
    dart.addTypeTests(ConnectableStream);
    ConnectableStream.prototype[_is_ConnectableStream_default] = true;
    dart.addTypeCaches(ConnectableStream);
    dart.setLibraryUri(ConnectableStream, I[29]);
    return ConnectableStream;
  });
  connectable_stream.ConnectableStream = connectable_stream.ConnectableStream$();
  dart.addTypeTests(connectable_stream.ConnectableStream, _is_ConnectableStream_default);
  var _subject$ = dart.privateName(connectable_stream, "_subject");
  var _source$ = dart.privateName(connectable_stream, "_source");
  var _connect = dart.privateName(connectable_stream, "_connect");
  const _is_PublishConnectableStream_default = Symbol('_is_PublishConnectableStream_default');
  connectable_stream.PublishConnectableStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamSubscriptionLOfTLToFutureLOfvoid = () => (StreamSubscriptionLOfTLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfTL()])))();
    var ConnectableStreamSubscriptionOfTL = () => (ConnectableStreamSubscriptionOfTL = dart.constFn(connectable_stream.ConnectableStreamSubscription$(TL())))();
    var ConnectableStreamSubscriptionLOfTL = () => (ConnectableStreamSubscriptionLOfTL = dart.constFn(dart.legacy(ConnectableStreamSubscriptionOfTL())))();
    var VoidToConnectableStreamSubscriptionLOfTL = () => (VoidToConnectableStreamSubscriptionLOfTL = dart.constFn(dart.fnType(ConnectableStreamSubscriptionLOfTL(), [])))();
    class PublishConnectableStream extends connectable_stream.ConnectableStream$(dart.legacy(T)) {
      static new(source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.PublishConnectableStream$(dart.legacy(T))).__(source, publish_subject.PublishSubject$(dart.legacy(T)).new({sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfTL()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t109;
          let subscription = this[_connect]();
          t109 = connection;
          t109 == null ? null : t109(subscription);
        }, T$.VoidToNull());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        this[_subject$].onListen = dart.fn(() => subscription = this[_connect](), VoidToConnectableStreamSubscriptionLOfTL());
        this[_subject$].onCancel = dart.fn(() => subscription.cancel(), T$.VoidToFutureL());
        return this[_subject$];
      }
    }
    (PublishConnectableStream.__ = function(source, _subject) {
      let t109;
      this[_subject$] = _subject;
      this[_source$] = dart.test((t109 = source.isBroadcast, t109 == null ? true : t109)) ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid())});
      PublishConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = PublishConnectableStream.prototype;
    dart.addTypeTests(PublishConnectableStream);
    PublishConnectableStream.prototype[_is_PublishConnectableStream_default] = true;
    dart.addTypeCaches(PublishConnectableStream);
    dart.setMethodSignature(PublishConnectableStream, () => ({
      __proto__: dart.getMethods(PublishConnectableStream.__proto__),
      [_connect]: dart.fnType(dart.legacy(connectable_stream.ConnectableStreamSubscription$(dart.legacy(T))), []),
      autoConnect: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [], {connection: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))}, {}),
      connect: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), []),
      refCount: dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(PublishConnectableStream, I[29]);
    dart.setFieldSignature(PublishConnectableStream, () => ({
      __proto__: dart.getFields(PublishConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_subject$]: dart.finalFieldType(dart.legacy(publish_subject.PublishSubject$(dart.legacy(T))))
    }));
    return PublishConnectableStream;
  });
  connectable_stream.PublishConnectableStream = connectable_stream.PublishConnectableStream$();
  dart.addTypeTests(connectable_stream.PublishConnectableStream, _is_PublishConnectableStream_default);
  const _is_ValueConnectableStream_default = Symbol('_is_ValueConnectableStream_default');
  connectable_stream.ValueConnectableStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamSubscriptionLOfTLToFutureLOfvoid = () => (StreamSubscriptionLOfTLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfTL()])))();
    var ConnectableStreamSubscriptionOfTL = () => (ConnectableStreamSubscriptionOfTL = dart.constFn(connectable_stream.ConnectableStreamSubscription$(TL())))();
    var ConnectableStreamSubscriptionLOfTL = () => (ConnectableStreamSubscriptionLOfTL = dart.constFn(dart.legacy(ConnectableStreamSubscriptionOfTL())))();
    var VoidToConnectableStreamSubscriptionLOfTL = () => (VoidToConnectableStreamSubscriptionLOfTL = dart.constFn(dart.fnType(ConnectableStreamSubscriptionLOfTL(), [])))();
    class ValueConnectableStream extends connectable_stream.ConnectableStream$(dart.legacy(T)) {
      static new(source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(dart.legacy(T))).__(source, behavior_subject.BehaviorSubject$(dart.legacy(T)).new({sync: sync}));
      }
      static seeded(source, seedValue, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(dart.legacy(T))).__(source, behavior_subject.BehaviorSubject$(dart.legacy(T)).seeded(seedValue, {sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfTL()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t109;
          let subscription = this[_connect]();
          t109 = connection;
          t109 == null ? null : t109(subscription);
        }, T$.VoidToNull());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        this[_subject$].onListen = dart.fn(() => subscription = this[_connect](), VoidToConnectableStreamSubscriptionLOfTL());
        this[_subject$].onCancel = dart.fn(() => subscription.cancel(), T$.VoidToFutureL());
        return this[_subject$];
      }
      get value() {
        return this[_subject$].value;
      }
      get hasValue() {
        return this[_subject$].hasValue;
      }
      get errorAndStackTrace() {
        return this[_subject$].errorAndStackTrace;
      }
      get hasError() {
        return this[_subject$].hasError;
      }
    }
    (ValueConnectableStream.__ = function(source, _subject) {
      let t109;
      this[_subject$] = _subject;
      this[_source$] = dart.test((t109 = source.isBroadcast, t109 == null ? true : t109)) ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid())});
      ValueConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = ValueConnectableStream.prototype;
    dart.addTypeTests(ValueConnectableStream);
    ValueConnectableStream.prototype[_is_ValueConnectableStream_default] = true;
    dart.addTypeCaches(ValueConnectableStream);
    ValueConnectableStream[dart.implements] = () => [value_stream.ValueStream$(dart.legacy(T))];
    dart.setMethodSignature(ValueConnectableStream, () => ({
      __proto__: dart.getMethods(ValueConnectableStream.__proto__),
      [_connect]: dart.fnType(dart.legacy(connectable_stream.ConnectableStreamSubscription$(dart.legacy(T))), []),
      autoConnect: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [], {connection: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))}, {}),
      connect: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), []),
      refCount: dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(ValueConnectableStream, () => ({
      __proto__: dart.getGetters(ValueConnectableStream.__proto__),
      value: dart.legacy(T),
      hasValue: dart.legacy(core.bool),
      errorAndStackTrace: dart.legacy(error_and_stacktrace.ErrorAndStackTrace),
      hasError: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(ValueConnectableStream, I[29]);
    dart.setFieldSignature(ValueConnectableStream, () => ({
      __proto__: dart.getFields(ValueConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_subject$]: dart.finalFieldType(dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(T))))
    }));
    return ValueConnectableStream;
  });
  connectable_stream.ValueConnectableStream = connectable_stream.ValueConnectableStream$();
  dart.addTypeTests(connectable_stream.ValueConnectableStream, _is_ValueConnectableStream_default);
  const _is_ReplayConnectableStream_default = Symbol('_is_ReplayConnectableStream_default');
  connectable_stream.ReplayConnectableStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamSubscriptionLOfTLToFutureLOfvoid = () => (StreamSubscriptionLOfTLToFutureLOfvoid = dart.constFn(dart.fnType(T$.FutureLOfvoid(), [StreamSubscriptionLOfTL()])))();
    var ConnectableStreamSubscriptionOfTL = () => (ConnectableStreamSubscriptionOfTL = dart.constFn(connectable_stream.ConnectableStreamSubscription$(TL())))();
    var ConnectableStreamSubscriptionLOfTL = () => (ConnectableStreamSubscriptionLOfTL = dart.constFn(dart.legacy(ConnectableStreamSubscriptionOfTL())))();
    var VoidToConnectableStreamSubscriptionLOfTL = () => (VoidToConnectableStreamSubscriptionLOfTL = dart.constFn(dart.fnType(ConnectableStreamSubscriptionLOfTL(), [])))();
    class ReplayConnectableStream extends connectable_stream.ConnectableStream$(dart.legacy(T)) {
      static new(stream, opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ReplayConnectableStream$(dart.legacy(T))).__(stream, replay_subject.ReplaySubject$(dart.legacy(T)).new({maxSize: maxSize, sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfTL()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t109;
          let subscription = this[_connect]();
          t109 = connection;
          t109 == null ? null : t109(subscription);
        }, T$.VoidToNull());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        this[_subject$].onListen = dart.fn(() => subscription = this[_connect](), VoidToConnectableStreamSubscriptionLOfTL());
        this[_subject$].onCancel = dart.fn(() => subscription.cancel(), T$.VoidToFutureL());
        return this[_subject$];
      }
      get values() {
        return this[_subject$].values;
      }
      get errorAndStackTraces() {
        return this[_subject$].errorAndStackTraces;
      }
    }
    (ReplayConnectableStream.__ = function(source, _subject) {
      let t109;
      this[_subject$] = _subject;
      this[_source$] = dart.test((t109 = source.isBroadcast, t109 == null ? true : t109)) ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionLOfTLToFutureLOfvoid())});
      ReplayConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = ReplayConnectableStream.prototype;
    dart.addTypeTests(ReplayConnectableStream);
    ReplayConnectableStream.prototype[_is_ReplayConnectableStream_default] = true;
    dart.addTypeCaches(ReplayConnectableStream);
    ReplayConnectableStream[dart.implements] = () => [replay_stream.ReplayStream$(dart.legacy(T))];
    dart.setMethodSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getMethods(ReplayConnectableStream.__proto__),
      [_connect]: dart.fnType(dart.legacy(connectable_stream.ConnectableStreamSubscription$(dart.legacy(T))), []),
      autoConnect: dart.fnType(dart.legacy(replay_stream.ReplayStream$(dart.legacy(T))), [], {connection: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))}, {}),
      connect: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), []),
      refCount: dart.fnType(dart.legacy(replay_stream.ReplayStream$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getGetters(ReplayConnectableStream.__proto__),
      values: dart.legacy(core.List$(dart.legacy(T))),
      errorAndStackTraces: dart.legacy(core.List$(dart.legacy(error_and_stacktrace.ErrorAndStackTrace)))
    }));
    dart.setLibraryUri(ReplayConnectableStream, I[29]);
    dart.setFieldSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getFields(ReplayConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_subject$]: dart.finalFieldType(dart.legacy(replay_subject.ReplaySubject$(dart.legacy(T))))
    }));
    return ReplayConnectableStream;
  });
  connectable_stream.ReplayConnectableStream = connectable_stream.ReplayConnectableStream$();
  dart.addTypeTests(connectable_stream.ReplayConnectableStream, _is_ReplayConnectableStream_default);
  const _is_ConnectableStreamSubscription_default = Symbol('_is_ConnectableStreamSubscription_default');
  connectable_stream.ConnectableStreamSubscription$ = dart.generic(T => {
    class ConnectableStreamSubscription extends async.StreamSubscription$(dart.legacy(T)) {
      cancel() {
        return this[_source$].cancel().then(dart.void, dart.fn(_ => this[_subject$].close(), T$.voidToFutureL()));
      }
      asFuture(E, futureValue = null) {
        return this[_source$].asFuture(dart.legacy(E), futureValue);
      }
      get isPaused() {
        return this[_source$].isPaused;
      }
      onData(handleData) {
        return this[_source$].onData(handleData);
      }
      onDone(handleDone) {
        return this[_source$].onDone(handleDone);
      }
      onError(handleError) {
        return this[_source$].onError(handleError);
      }
      pause(resumeSignal = null) {
        return this[_source$].pause(resumeSignal);
      }
      resume() {
        return this[_source$].resume();
      }
    }
    (ConnectableStreamSubscription.new = function(_source, _subject) {
      this[_source$] = _source;
      this[_subject$] = _subject;
      ;
    }).prototype = ConnectableStreamSubscription.prototype;
    dart.addTypeTests(ConnectableStreamSubscription);
    ConnectableStreamSubscription.prototype[_is_ConnectableStreamSubscription_default] = true;
    dart.addTypeCaches(ConnectableStreamSubscription);
    dart.setMethodSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getMethods(ConnectableStreamSubscription.__proto__),
      cancel: dart.fnType(dart.legacy(async.Future), []),
      asFuture: dart.gFnType(E => [dart.legacy(async.Future$(dart.legacy(E))), [], [dart.legacy(E)]]),
      onData: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]),
      onDone: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
      onError: dart.fnType(dart.void, [dart.legacy(core.Function)]),
      pause: dart.fnType(dart.void, [], [dart.legacy(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getGetters(ConnectableStreamSubscription.__proto__),
      isPaused: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(ConnectableStreamSubscription, I[29]);
    dart.setFieldSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getFields(ConnectableStreamSubscription.__proto__),
      [_source$]: dart.finalFieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_subject$]: dart.finalFieldType(dart.legacy(subject.Subject$(dart.legacy(T))))
    }));
    return ConnectableStreamSubscription;
  });
  connectable_stream.ConnectableStreamSubscription = connectable_stream.ConnectableStreamSubscription$();
  dart.addTypeTests(connectable_stream.ConnectableStreamSubscription, _is_ConnectableStreamSubscription_default);
  connectable_stream['ConnectableStreamExtensions|publish'] = function ConnectableStreamExtensions$124publish(T, $this) {
    return connectable_stream.PublishConnectableStream$(dart.legacy(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publish'] = function ConnectableStreamExtensions$124get$35publish(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publish'](dart.legacy(T), $this), dart.fnType(dart.legacy(connectable_stream.ConnectableStream$(dart.legacy(T))), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValue'] = function ConnectableStreamExtensions$124publishValue(T, $this) {
    return connectable_stream.ValueConnectableStream$(dart.legacy(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValue'] = function ConnectableStreamExtensions$124get$35publishValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publishValue'](dart.legacy(T), $this), dart.fnType(dart.legacy(connectable_stream.ValueConnectableStream$(dart.legacy(T))), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValueSeeded'] = function ConnectableStreamExtensions$124publishValueSeeded(T, $this, seedValue) {
    return connectable_stream.ValueConnectableStream$(dart.legacy(T)).seeded($this, seedValue, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValueSeeded'] = function ConnectableStreamExtensions$124get$35publishValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](dart.legacy(T), $this, seedValue), dart.fnType(dart.legacy(connectable_stream.ValueConnectableStream$(dart.legacy(T))), [dart.legacy(T)]));
  };
  connectable_stream['ConnectableStreamExtensions|publishReplay'] = function ConnectableStreamExtensions$124publishReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return connectable_stream.ReplayConnectableStream$(dart.legacy(T)).new($this, {maxSize: maxSize, sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishReplay'] = function ConnectableStreamExtensions$124get$35publishReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|publishReplay'](dart.legacy(T), $this, {maxSize: maxSize});
    }, dart.fnType(dart.legacy(connectable_stream.ReplayConnectableStream$(dart.legacy(T))), [], {maxSize: T$.intL()}, {}));
  };
  connectable_stream['ConnectableStreamExtensions|share'] = function ConnectableStreamExtensions$124share(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publish'](dart.legacy(T), $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#share'] = function ConnectableStreamExtensions$124get$35share(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|share'](dart.legacy(T), $this), dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValue'] = function ConnectableStreamExtensions$124shareValue(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publishValue'](dart.legacy(T), $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValue'] = function ConnectableStreamExtensions$124get$35shareValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|shareValue'](dart.legacy(T), $this), dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValueSeeded'] = function ConnectableStreamExtensions$124shareValueSeeded(T, $this, seedValue) {
    return connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](dart.legacy(T), $this, seedValue).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValueSeeded'] = function ConnectableStreamExtensions$124get$35shareValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|shareValueSeeded'](dart.legacy(T), $this, seedValue), dart.fnType(dart.legacy(value_stream.ValueStream$(dart.legacy(T))), [dart.legacy(T)]));
  };
  connectable_stream['ConnectableStreamExtensions|shareReplay'] = function ConnectableStreamExtensions$124shareReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return connectable_stream['ConnectableStreamExtensions|publishReplay'](dart.legacy(T), $this, {maxSize: maxSize}).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareReplay'] = function ConnectableStreamExtensions$124get$35shareReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|shareReplay'](dart.legacy(T), $this, {maxSize: maxSize});
    }, dart.fnType(dart.legacy(replay_stream.ReplayStream$(dart.legacy(T))), [], {maxSize: T$.intL()}, {}));
  };
  rx.Rx = class Rx extends core.Object {
    static combineLatest(T, R, streams, combiner) {
      return new (combine_latest.CombineLatestStream$(dart.legacy(T), dart.legacy(R))).new(streams, combiner);
    }
    static combineLatestList(T, streams) {
      return combine_latest.CombineLatestStream.list(dart.legacy(T), streams);
    }
    static combineLatest2(A, B, T, streamA, streamB, combiner) {
      return combine_latest.CombineLatestStream.combine2(dart.legacy(A), dart.legacy(B), dart.legacy(T), streamA, streamB, combiner);
    }
    static combineLatest3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return combine_latest.CombineLatestStream.combine3(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(T), streamA, streamB, streamC, combiner);
    }
    static combineLatest4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return combine_latest.CombineLatestStream.combine4(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(T), streamA, streamB, streamC, streamD, combiner);
    }
    static combineLatest5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return combine_latest.CombineLatestStream.combine5(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static combineLatest6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return combine_latest.CombineLatestStream.combine6(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static combineLatest7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return combine_latest.CombineLatestStream.combine7(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static combineLatest8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return combine_latest.CombineLatestStream.combine8(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static combineLatest9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return combine_latest.CombineLatestStream.combine9(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(I), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static concat(T, streams) {
      return new (concat.ConcatStream$(dart.legacy(T))).new(streams);
    }
    static concatEager(T, streams) {
      return new (concat_eager.ConcatEagerStream$(dart.legacy(T))).new(streams);
    }
    static defer(T, streamFactory, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (defer.DeferStream$(dart.legacy(T))).new(streamFactory, {reusable: reusable});
    }
    static forkJoin(T, R, streams, combiner) {
      return new (fork_join.ForkJoinStream$(dart.legacy(T), dart.legacy(R))).new(streams, combiner);
    }
    static forkJoinList(T, streams) {
      return fork_join.ForkJoinStream.list(dart.legacy(T), streams);
    }
    static forkJoin2(A, B, T, streamA, streamB, combiner) {
      return fork_join.ForkJoinStream.combine2(dart.legacy(A), dart.legacy(B), dart.legacy(T), streamA, streamB, combiner);
    }
    static forkJoin3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return fork_join.ForkJoinStream.combine3(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(T), streamA, streamB, streamC, combiner);
    }
    static forkJoin4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return fork_join.ForkJoinStream.combine4(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(T), streamA, streamB, streamC, streamD, combiner);
    }
    static forkJoin5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return fork_join.ForkJoinStream.combine5(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static forkJoin6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return fork_join.ForkJoinStream.combine6(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static forkJoin7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return fork_join.ForkJoinStream.combine7(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static forkJoin8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return fork_join.ForkJoinStream.combine8(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static forkJoin9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return fork_join.ForkJoinStream.combine9(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(I), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static fromCallable(T, callable, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (from_callable.FromCallableStream$(dart.legacy(T))).new(callable, {reusable: reusable});
    }
    static merge(T, streams) {
      return new (merge.MergeStream$(dart.legacy(T))).new(streams);
    }
    static never(T) {
      return new (never.NeverStream$(dart.legacy(T))).new();
    }
    static race(T, streams) {
      return new (race.RaceStream$(dart.legacy(T))).new(streams);
    }
    static range(startInclusive, endInclusive) {
      return new range.RangeStream.new(startInclusive, endInclusive);
    }
    static repeat(T, streamFactory, count = null) {
      return new (repeat.RepeatStream$(dart.legacy(T))).new(streamFactory, count);
    }
    static retry(T, streamFactory, count = null) {
      return new (retry.RetryStream$(dart.legacy(T))).new(streamFactory, count);
    }
    static retryWhen(T, streamFactory, retryWhenFactory) {
      return new (retry_when.RetryWhenStream$(dart.legacy(T))).new(streamFactory, retryWhenFactory);
    }
    static sequenceEqual(A, B, stream, other, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      return new (sequence_equal.SequenceEqualStream$(dart.legacy(A), dart.legacy(B))).new(stream, other, {equals: equals});
    }
    static switchLatest(T, streams) {
      return new (switch_latest.SwitchLatestStream$(dart.legacy(T))).new(streams);
    }
    static timer(T, value, duration) {
      return new (timer.TimerStream$(dart.legacy(T))).new(value, duration);
    }
    static using(T, R, resourceFactory, streamFactory, disposer) {
      return new (using.UsingStream$(dart.legacy(T), dart.legacy(R))).new(resourceFactory, streamFactory, disposer);
    }
    static zip2(A, B, T, streamA, streamB, zipper) {
      return zip.ZipStream.zip2(dart.legacy(A), dart.legacy(B), dart.legacy(T), streamA, streamB, zipper);
    }
    static zip(T, R, streams, zipper) {
      return new (zip.ZipStream$(dart.legacy(T), dart.legacy(R))).new(streams, zipper);
    }
    static zipList(T, streams) {
      return zip.ZipStream.list(dart.legacy(T), streams);
    }
    static zip3(A, B, C, T, streamA, streamB, streamC, zipper) {
      return zip.ZipStream.zip3(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(T), streamA, streamB, streamC, zipper);
    }
    static zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper) {
      return zip.ZipStream.zip4(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(T), streamA, streamB, streamC, streamD, zipper);
    }
    static zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper) {
      return zip.ZipStream.zip5(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, zipper);
    }
    static zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
      return zip.ZipStream.zip6(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, zipper);
    }
    static zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
      return zip.ZipStream.zip7(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper);
    }
    static zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
      return zip.ZipStream.zip8(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper);
    }
    static zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
      return zip.ZipStream.zip9(dart.legacy(A), dart.legacy(B), dart.legacy(C), dart.legacy(D), dart.legacy(E), dart.legacy(F), dart.legacy(G), dart.legacy(H), dart.legacy(I), dart.legacy(T), streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper);
    }
  };
  (rx.Rx.new = function() {
    ;
  }).prototype = rx.Rx.prototype;
  dart.addTypeTests(rx.Rx);
  dart.addTypeCaches(rx.Rx);
  dart.setLibraryUri(rx.Rx, I[30]);
  dart.trackLibraries("packages/rxdart/src/transformers/with_latest_from.dart", {
    "package:rxdart/src/transformers/with_latest_from.dart": with_latest_from,
    "package:rxdart/src/transformers/time_interval.dart": time_interval,
    "package:rxdart/src/transformers/take_until.dart": take_until,
    "package:rxdart/src/transformers/switch_map.dart": switch_map,
    "package:rxdart/src/transformers/switch_if_empty.dart": switch_if_empty,
    "package:rxdart/src/transformers/start_with_many.dart": start_with_many,
    "package:rxdart/src/transformers/skip_until.dart": skip_until,
    "package:rxdart/src/transformers/on_error_resume.dart": on_error_resume,
    "package:rxdart/src/transformers/flat_map.dart": flat_map,
    "package:rxdart/src/transformers/exhaust_map.dart": exhaust_map,
    "package:rxdart/src/transformers/do.dart": $do,
    "package:rxdart/src/transformers/dematerialize.dart": dematerialize,
    "package:rxdart/src/transformers/backpressure/window.dart": window$,
    "package:rxdart/src/transformers/backpressure/throttle.dart": throttle,
    "package:rxdart/src/transformers/backpressure/sample.dart": sample,
    "package:rxdart/src/transformers/backpressure/pairwise.dart": pairwise,
    "package:rxdart/src/transformers/backpressure/debounce.dart": debounce,
    "package:rxdart/src/transformers/backpressure/backpressure.dart": backpressure,
    "package:rxdart/src/transformers/backpressure/buffer.dart": buffer,
    "package:rxdart/transformers.dart": transformers,
    "package:rxdart/src/utils/notification.dart": notification,
    "package:rxdart/src/transformers/materialize.dart": materialize,
    "package:rxdart/src/streams/sequence_equal.dart": sequence_equal,
    "package:rxdart/src/subjects/replay_subject.dart": replay_subject,
    "package:rxdart/src/transformers/start_with_error.dart": start_with_error,
    "package:rxdart/src/utils/forwarding_stream.dart": forwarding_stream,
    "package:rxdart/src/transformers/start_with.dart": start_with,
    "package:rxdart/src/subjects/behavior_subject.dart": behavior_subject,
    "package:rxdart/subjects.dart": subjects,
    "package:rxdart/src/streams/connectable_stream.dart": connectable_stream,
    "package:rxdart/streams.dart": streams,
    "package:rxdart/src/rx.dart": rx,
    "package:rxdart/rxdart.dart": rxdart
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["with_latest_from.dart","time_interval.dart","take_until.dart","switch_map.dart","switch_if_empty.dart","start_with_many.dart","skip_until.dart","on_error_resume.dart","flat_map.dart","exhaust_map.dart","do.dart","dematerialize.dart","../utils/notification.dart","backpressure/backpressure.dart","backpressure/window.dart","backpressure/throttle.dart","backpressure/sample.dart","backpressure/pairwise.dart","backpressure/debounce.dart","backpressure/buffer.dart","materialize.dart","../streams/sequence_equal.dart","../subjects/replay_subject.dart","start_with_error.dart","../utils/forwarding_stream.dart","start_with.dart","../subjects/behavior_subject.dart","../streams/connectable_stream.dart","../rx.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../C:/packages/rxdart/src/transformers/with_latest_from.dart.lib.js"}');
  // Exports:
  return {
    src__transformers__with_latest_from: with_latest_from,
    src__transformers__time_interval: time_interval,
    src__transformers__take_until: take_until,
    src__transformers__switch_map: switch_map,
    src__transformers__switch_if_empty: switch_if_empty,
    src__transformers__start_with_many: start_with_many,
    src__transformers__skip_until: skip_until,
    src__transformers__on_error_resume: on_error_resume,
    src__transformers__flat_map: flat_map,
    src__transformers__exhaust_map: exhaust_map,
    src__transformers__do: $do,
    src__transformers__dematerialize: dematerialize,
    src__transformers__backpressure__window: window$,
    src__transformers__backpressure__throttle: throttle,
    src__transformers__backpressure__sample: sample,
    src__transformers__backpressure__pairwise: pairwise,
    src__transformers__backpressure__debounce: debounce,
    src__transformers__backpressure__backpressure: backpressure,
    src__transformers__backpressure__buffer: buffer,
    transformers: transformers,
    src__utils__notification: notification,
    src__transformers__materialize: materialize,
    src__streams__sequence_equal: sequence_equal,
    src__subjects__replay_subject: replay_subject,
    src__transformers__start_with_error: start_with_error,
    src__utils__forwarding_stream: forwarding_stream,
    src__transformers__start_with: start_with,
    src__subjects__behavior_subject: behavior_subject,
    subjects: subjects,
    src__streams__connectable_stream: connectable_stream,
    streams: streams,
    src__rx: rx,
    rxdart: rxdart
  };
}));

//# sourceMappingURL=with_latest_from.dart.lib.js.map
